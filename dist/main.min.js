"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(e.document)return t(e);throw new Error("jQuery requires a window with a document")}:t(e)}("undefined"!=typeof window?window:void 0,function(w,O){function y(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}function g(e){return null!=e&&e===e.window}var t=[],_=Object.getPrototypeOf,a=t.slice,I=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},R=t.push,$=t.indexOf,W={},F=W.toString,B=W.hasOwnProperty,z=B.toString,U=z.call(Object),v={},T=w.document,X={type:!0,src:!0,nonce:!0,noModule:!0};function V(e,t,n){var r,i,o=(n=n||T).createElement("script");if(o.text=e,t)for(r in X)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function h(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?W[F.call(e)]||"object":_typeof(e)}var e="3.6.1",C=function e(t,n){return new e.fn.init(t,n)};function Y(e){var t=!!e&&"length"in e&&e.length,n=h(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}C.fn=C.prototype={jquery:e,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=C.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return C.each(this,e)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(C.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:R,sort:t.sort,splice:t.splice},C.extend=C.fn.extend=function(){var e,t,n,r,i,o=arguments[0]||{},s=1,a=arguments.length,l=!1;for("boolean"==typeof o&&(l=o,o=arguments[s]||{},s++),"object"===_typeof(o)||y(o)||(o={}),s===a&&(o=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(t in e)n=e[t],"__proto__"!==t&&o!==n&&(l&&n&&(C.isPlainObject(n)||(r=Array.isArray(n)))?(i=o[t],i=r&&!Array.isArray(i)?[]:r||C.isPlainObject(i)?i:{},r=!1,o[t]=C.extend(l,i,n)):void 0!==n&&(o[t]=n));return o},C.extend({expando:"jQuery"+(e+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==F.call(e))&&(!(e=_(e))||"function"==typeof(e=B.call(e,"constructor")&&e.constructor)&&z.call(e)===U)},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){V(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(Y(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(Y(Object(e))?C.merge(t,"string"==typeof e?[e]:e):R.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:$.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!=s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(Y(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return I(s)},guid:1,support:v}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=t[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){W["[object "+t+"]"]=t.toLowerCase()});function r(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&C(e).is(n))break;r.push(e)}return r}function Q(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var e=function(O){function d(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function _(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function I(){T()}var e,f,b,o,R,p,$,W,w,l,u,T,C,n,S,h,r,i,g,E="sizzle"+ +new Date,c=O.document,k=0,F=0,B=L(),z=L(),U=L(),v=L(),X=function(e,t){return e===t&&(u=!0),0},V={}.hasOwnProperty,t=[],Y=t.pop,Q=t.push,A=t.push,G=t.slice,y=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",s="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",K="\\["+s+"*("+a+")(?:"+s+"*([*^$|!~]?=)"+s+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+s+"*\\]",Z=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+K+")*)|.*)\\)|)",ee=new RegExp(s+"+","g"),m=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g"),te=new RegExp("^"+s+"*,"+s+"*"),ne=new RegExp("^"+s+"*([>+~]|"+s+")"+s+"*"),re=new RegExp(s+"|>"),ie=new RegExp(Z),oe=new RegExp("^"+a+"$"),x={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+K),PSEUDO:new RegExp("^"+Z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+s+"*(even|odd|(([+-]|)(\\d*)n|)"+s+"*(?:([+-]|)"+s+"*(\\d+)|))"+s+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+s+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+s+"*((?:-\\d)?\\d*)"+s+"*\\)|)(?=[^-]|$)","i")},se=/HTML$/i,ae=/^(?:input|select|textarea|button)$/i,le=/^h\d$/i,D=/^[^{]+\{\s*\[native \w/,ue=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ce=/[+~]/,N=new RegExp("\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\([^\\r\\n\\f])","g"),de=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,fe=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{A.apply(t=G.call(c.childNodes),c.childNodes),t[c.childNodes.length].nodeType}catch(e){A={apply:t.length?function(e,t){Q.apply(e,G.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function j(t,e,n,r){var i,o,s,a,l,u,c=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(T(e),e=e||C,S)){if(11!==d&&(a=ue.exec(t)))if(i=a[1]){if(9===d){if(!(u=e.getElementById(i)))return n;if(u.id===i)return n.push(u),n}else if(c&&(u=c.getElementById(i))&&g(e,u)&&u.id===i)return n.push(u),n}else{if(a[2])return A.apply(n,e.getElementsByTagName(t)),n;if((i=a[3])&&f.getElementsByClassName&&e.getElementsByClassName)return A.apply(n,e.getElementsByClassName(i)),n}if(f.qsa&&!v[t+" "]&&(!h||!h.test(t))&&(1!==d||"object"!==e.nodeName.toLowerCase())){if(u=t,c=e,1===d&&(re.test(t)||ne.test(t))){for((c=ce.test(t)&&ve(e.parentNode)||e)===e&&f.scope||((s=e.getAttribute("id"))?s=s.replace(de,_):e.setAttribute("id",s=E)),o=(l=p(t)).length;o--;)l[o]=(s?"#"+s:":scope")+" "+H(l[o]);u=l.join(",")}try{return A.apply(n,c.querySelectorAll(u)),n}catch(e){v(t,!0)}finally{s===E&&e.removeAttribute("id")}}}return W(t.replace(m,"$1"),e,n,r)}function L(){var n=[];function r(e,t){return n.push(e+" ")>b.cacheLength&&delete r[n.shift()],r[e+" "]=t}return r}function q(e){return e[E]=!0,e}function P(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function pe(e,t){for(var n=e.split("|"),r=n.length;r--;)b.attrHandle[n[r]]=t}function he(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&fe(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function M(s){return q(function(o){return o=+o,q(function(e,t){for(var n,r=s([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=j.support={},R=j.isXML=function(e){var t=e&&e.namespaceURI,e=e&&(e.ownerDocument||e).documentElement;return!se.test(t||e&&e.nodeName||"HTML")},T=j.setDocument=function(e){var e=e?e.ownerDocument||e:c;return e!=C&&9===e.nodeType&&e.documentElement&&(n=(C=e).documentElement,S=!R(C),c!=C&&(e=C.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",I,!1):e.attachEvent&&e.attachEvent("onunload",I)),f.scope=P(function(e){return n.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=P(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=P(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=D.test(C.getElementsByClassName),f.getById=P(function(e){return n.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),f.getById?(b.filter.ID=function(e){var t=e.replace(N,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&S)return(t=t.getElementById(e))?[t]:[]}):(b.filter.ID=function(e){var t=e.replace(N,d);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},b.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},r=[],h=[],(f.qsa=D.test(C.querySelectorAll))&&(P(function(e){var t;n.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+s+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\["+s+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+E+"-]").length||h.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\["+s+"*name"+s+"*="+s+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")}),P(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name"+s+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),n.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(f.matchesSelector=D.test(i=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&P(function(e){f.disconnectedMatch=i.call(e,"*"),i.call(e,"[s!='']:x"),r.push("!=",Z)}),h=h.length&&new RegExp(h.join("|")),r=r.length&&new RegExp(r.join("|")),e=D.test(n.compareDocumentPosition),g=e||D.test(n.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},X=e?function(e,t){var n;return e===t?(u=!0,0):(n=!e.compareDocumentPosition-!t.compareDocumentPosition)||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==c&&g(c,e)?-1:t==C||t.ownerDocument==c&&g(c,t)?1:l?y(l,e)-y(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e==C?-1:t==C?1:i?-1:o?1:l?y(l,e)-y(l,t):0;if(i===o)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?he(s[r],a[r]):s[r]==c?-1:a[r]==c?1:0}),C},j.matches=function(e,t){return j(e,null,null,t)},j.matchesSelector=function(e,t){if(T(e),f.matchesSelector&&S&&!v[t+" "]&&(!r||!r.test(t))&&(!h||!h.test(t)))try{var n=i.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){v(t,!0)}return 0<j(t,C,null,[e]).length},j.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),g(e,t)},j.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var n=b.attrHandle[t.toLowerCase()],n=n&&V.call(b.attrHandle,t.toLowerCase())?n(e,t,!S):void 0;return void 0!==n?n:f.attributes||!S?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},j.escape=function(e){return(e+"").replace(de,_)},j.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},j.uniqueSort=function(e){var t,n=[],r=0,i=0;if(u=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(X),u){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return l=null,e},o=j.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(b=j.selectors={cacheLength:50,createPseudo:q,match:x,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(N,d),e[3]=(e[3]||e[4]||e[5]||"").replace(N,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||j.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&j.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return x.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ie.test(n)&&(t=p(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(N,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+s+")"+e+"("+s+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(e){e=j.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===r:"!="===n?e!==r:"^="===n?r&&0===e.indexOf(r):"*="===n?r&&-1<e.indexOf(r):"$="===n?r&&e.slice(-r.length)===r:"~="===n?-1<(" "+e.replace(ee," ")+" ").indexOf(r):"|="===n&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,s,a,l,u=m!=y?"nextSibling":"previousSibling",c=e.parentNode,d=x&&e.nodeName.toLowerCase(),f=!n&&!x,p=!1;if(c){if(m){for(;u;){for(s=e;s=s[u];)if(x?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&f){for(p=(a=(r=(i=(o=(s=c)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&r[1])&&r[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(p=a=0)||l.pop();)if(1===s.nodeType&&++p&&s===e){i[h]=[k,a,p];break}}else if(!1===(p=f?a=(r=(i=(o=(s=e)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&r[1]:p))for(;(s=++a&&s&&s[u]||(p=a=0)||l.pop())&&((x?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++p||(f&&((i=(o=s[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]=[k,p]),s!==e)););return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||j.error("unsupported pseudo: "+e);return s[E]?s(o):1<s.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?q(function(e,t){for(var n,r=s(e,o),i=r.length;i--;)e[n=y(e,r[i])]=!(t[n]=r[i])}):function(e){return s(e,0,t)}):s}},pseudos:{not:q(function(e){var r=[],i=[],a=$(e.replace(m,"$1"));return a[E]?q(function(e,t,n,r){for(var i,o=a(e,null,r,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))}):function(e,t,n){return r[0]=e,a(r,null,n,i),r[0]=null,!i.pop()}}),has:q(function(t){return function(e){return 0<j(t,e).length}}),contains:q(function(t){return t=t.replace(N,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:q(function(n){return oe.test(n||"")||j.error("unsupported lang: "+n),n=n.replace(N,d).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=O.location&&O.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===n},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return le.test(e.nodeName)},input:function(e){return ae.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:M(function(){return[0]}),last:M(function(e,t){return[t-1]}),eq:M(function(e,t,n){return[n<0?n+t:n]}),even:M(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:M(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:M(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:M(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function me(){}function H(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(s,e,t){var a=e.dir,l=e.next,u=l||a,c=t&&"parentNode"===u,d=F++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||c)return s(e,t,n);return!1}:function(e,t,n){var r,i,o=[k,d];if(n){for(;e=e[a];)if((1===e.nodeType||c)&&s(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||c)if(i=(i=e[E]||(e[E]={}))[e.uniqueID]||(i[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[a]||e;else{if((r=i[u])&&r[0]===k&&r[1]===d)return o[2]=r[2];if((i[u]=o)[2]=s(e,t,n))return!0}return!1}}function xe(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function be(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)!(o=e[a])||n&&!n(o,r,i)||(s.push(o),u&&t.push(a));return s}function we(p,h,g,v,m,e){return v&&!v[E]&&(v=we(v)),m&&!m[E]&&(m=we(m,e)),q(function(e,t,n,r){var i,o,s,a=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)j(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!p||!e&&h?c:be(c,a,p,n,r),f=g?m||(e?p:u||v)?[]:t:d;if(g&&g(d,f,n,r),v)for(i=be(f,l),v(i,[],n,r),o=i.length;o--;)(s=i[o])&&(f[l[o]]=!(d[l[o]]=s));if(e){if(m||p){if(m){for(i=[],o=f.length;o--;)(s=f[o])&&i.push(d[o]=s);m(null,f=[],i,r)}for(o=f.length;o--;)(s=f[o])&&-1<(i=m?y(e,s):a[o])&&(e[i]=!(t[i]=s))}}else f=be(f===t?f.splice(u,f.length):f),m?m(null,t,f,r):A.apply(t,f)})}function Te(v,m){function e(e,t,n,r,i){var o,s,a,l=0,u="0",c=e&&[],d=[],f=w,p=e||x&&b.find.TAG("*",i),h=k+=null==f?1:Math.random()||.1,g=p.length;for(i&&(w=t==C||t||i);u!==g&&null!=(o=p[u]);u++){if(x&&o){for(s=0,t||o.ownerDocument==C||(T(o),n=!S);a=v[s++];)if(a(o,t||C,n)){r.push(o);break}i&&(k=h)}y&&((o=!a&&o)&&l--,e&&c.push(o))}if(l+=u,y&&u!==l){for(s=0;a=m[s++];)a(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=Y.call(r));d=be(d)}A.apply(r,d),i&&!e&&0<d.length&&1<l+m.length&&j.uniqueSort(r)}return i&&(k=h,w=f),c}var y=0<m.length,x=0<v.length;return y?q(e):e}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,p=j.tokenize=function(e,t){var n,r,i,o,s,a,l,u=z[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(o in n&&!(r=te.exec(s))||(r&&(s=s.slice(r[0].length)||s),a.push(i=[])),n=!1,(r=ne.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(m," ")}),s=s.slice(n.length)),b.filter)!(r=x[o].exec(s))||l[o]&&!(r=l[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?j.error(e):z(e,a).slice(0)},$=j.compile=function(e,t){var n,r=[],i=[],o=U[e+" "];if(!o){for(n=(t=t||p(e)).length;n--;)((o=function e(t){for(var r,n,i,o=t.length,s=b.relative[t[0].type],a=s||b.relative[" "],l=s?1:0,u=ye(function(e){return e===r},a,!0),c=ye(function(e){return-1<y(r,e)},a,!0),d=[function(e,t,n){return e=!s&&(n||t!==w)||((r=t).nodeType?u:c)(e,t,n),r=null,e}];l<o;l++)if(n=b.relative[t[l].type])d=[ye(xe(d),n)];else{if((n=b.filter[t[l].type].apply(null,t[l].matches))[E]){for(i=++l;i<o&&!b.relative[t[i].type];i++);return we(1<l&&xe(d),1<l&&H(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(m,"$1"),n,l<i&&e(t.slice(l,i)),i<o&&e(t=t.slice(i)),i<o&&H(t))}d.push(n)}return xe(d)}(t[n]))[E]?r:i).push(o);(o=U(e,Te(i,r))).selector=e}return o},W=j.select=function(e,t,n,r){var i,o,s,a,l,u="function"==typeof e&&e,c=!r&&p(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&S&&b.relative[o[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(N,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=x.needsContext.test(e)?0:o.length;i--&&(s=o[i],!b.relative[a=s.type]);)if((l=b.find[a])&&(r=l(s.matches[0].replace(N,d),ce.test(o[0].type)&&ve(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&H(o))break;return A.apply(n,r),n}}return(u||$(e,c))(r,t,!S,n,!t||ce.test(e)&&ve(t.parentNode)||t),n},f.sortStable=E.split("").sort(X).join("")===E,f.detectDuplicates=!!u,T(),f.sortDetached=P(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),P(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||pe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&P(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||pe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),P(function(e){return null==e.getAttribute("disabled")})||pe(J,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),j}(w),G=(C.find=e,C.expr=e.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=e.uniqueSort,C.text=e.getText,C.isXMLDoc=e.isXML,C.contains=e.contains,C.escapeSelector=e.escape,C.expr.match.needsContext);function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var J=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function K(e,n,r){return y(n)?C.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?C.grep(e,function(e){return e===n!==r}):"string"!=typeof n?C.grep(e,function(e){return-1<$.call(n,e)!==r}):C.filter(n,e,r)}C.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?C.find.matchesSelector(r,e)?[r]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<r;t++)if(C.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)C.find(e,i[t],n);return 1<r?C.uniqueSort(n):n},filter:function(e){return this.pushStack(K(this,e||[],!1))},not:function(e){return this.pushStack(K(this,e||[],!0))},is:function(e){return!!K(this,"string"==typeof e&&G.test(e)?C(e):e||[],!1).length}});var Z,ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,te=((C.fn.init=function(e,t,n){if(e){if(n=n||Z,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:ee.exec(e))||!r[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(r[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),J.test(r[1])&&C.isPlainObject(t))for(var r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r])}else(n=T.getElementById(r[2]))&&(this[0]=n,this.length=1)}return this}).prototype=C.fn,Z=C(T),/^(?:parents|prev(?:Until|All))/),ne={children:!0,contents:!0,next:!0,prev:!0};function re(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&C(e);if(!G.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?C.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?$.call(C(e),this[0]):$.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},parents:function(e){return r(e,"parentNode")},parentsUntil:function(e,t,n){return r(e,"parentNode",n)},next:function(e){return re(e,"nextSibling")},prev:function(e){return re(e,"previousSibling")},nextAll:function(e){return r(e,"nextSibling")},prevAll:function(e){return r(e,"previousSibling")},nextUntil:function(e,t,n){return r(e,"nextSibling",n)},prevUntil:function(e,t,n){return r(e,"previousSibling",n)},siblings:function(e){return Q((e.parentNode||{}).firstChild,e)},children:function(e){return Q(e.firstChild)},contents:function(e){return null!=e.contentDocument&&_(e.contentDocument)?e.contentDocument:(l(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(r,i){C.fn[r]=function(e,t){var n=C.map(this,i,e);return(t="Until"!==r.slice(-5)?e:t)&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(ne[r]||C.uniqueSort(n),te.test(r)&&n.reverse()),this.pushStack(n)}});var S=/[^\x20\t\r\n\f]+/g;function c(e){return e}function ie(e){throw e}function oe(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},C.each(e.match(S)||[],function(e,t){n[t]=!0}),n):C.extend({},r);function i(){for(a=a||r.once,s=o=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&r.stopOnFalse&&(c=l.length,t=!1);r.memory||(t=!1),o=!1,a&&(l=t?[]:"")}var o,t,s,a,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!o&&(c=l.length-1,u.push(t)),function n(e){C.each(e,function(e,t){y(t)?r.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==h(t)&&n(t)})}(arguments),t&&!o&&i()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<C.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=u=[],t||o||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),o||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},C.extend({Deferred:function(e){var o=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var i=arguments;return C.Deferred(function(r){C.each(o,function(e,t){var n=y(i[t[4]])&&i[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&y(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var l=0;function u(i,o,s,a){return function(){function e(){var e,t;if(!(i<l)){if((e=s.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,y(t)?a?t.call(e,u(l,o,c,a),u(l,o,ie,a)):(l++,t.call(e,u(l,o,c,a),u(l,o,ie,a),u(l,o,c,o.notifyWith))):(s!==c&&(n=void 0,r=[e]),(a||o.resolveWith)(n,r))}}var n=this,r=arguments,t=a?e:function(){try{e()}catch(e){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(s!==ie&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(C.Deferred.getStackHook&&(t.stackTrace=C.Deferred.getStackHook()),w.setTimeout(t))}}return C.Deferred(function(e){o[0][3].add(u(0,e,y(r)?r:c,e.notifyWith)),o[1][3].add(u(0,e,y(t)?t:c)),o[2][3].add(u(0,e,y(n)?n:ie))}).promise()},promise:function(e){return null!=e?C.extend(e,s):s}},a={};return C.each(o,function(e,t){var n=t[2],r=t[5];s[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=a.call(arguments),s=C.Deferred();if(n<=1&&(oe(e,s.done(t(r)).resolve,s.reject,!n),"pending"===s.state()||y(o[r]&&o[r].then)))return s.then();for(;r--;)oe(o[r],t(r),s.reject);return s.promise()}});var se=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,ae=(C.Deferred.exceptionHook=function(e,t){w.console&&w.console.warn&&e&&se.test(e.name)&&w.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){w.setTimeout(function(){throw e})},C.Deferred());function le(){T.removeEventListener("DOMContentLoaded",le),w.removeEventListener("load",le),C.ready()}C.fn.ready=function(e){return ae.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0)!==e&&0<--C.readyWait||ae.resolveWith(T,[C])}}),C.ready.then=ae.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?w.setTimeout(C.ready):(T.addEventListener("DOMContentLoaded",le),w.addEventListener("load",le));function d(e,t,n,r,i,o,s){var a=0,l=e.length,u=null==n;if("object"===h(n))for(a in i=!0,n)d(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,y(r)||(s=!0),t=u?s?(t.call(e,r),null):(u=t,function(e,t,n){return u.call(C(e),n)}):t))for(;a<l;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):l?t(e[0],n):o}var ue=/^-ms-/,ce=/-([a-z])/g;function de(e,t){return t.toUpperCase()}function x(e){return e.replace(ue,"ms-").replace(ce,de)}function m(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function fe(){this.expando=C.expando+fe.uid++}fe.uid=1,fe.prototype={cache:function(e){var t=e[this.expando];return t||(t={},m(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[x(t)]=n;else for(r in t)i[x(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][x(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(x):(t=x(t))in r?[t]:t.match(S)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!C.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!C.isEmptyObject(e)}};var b=new fe,u=new fe,pe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,he=/[A-Z]/g;function ge(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(he,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:pe.test(i)?JSON.parse(i):i)}catch(e){}u.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return u.hasData(e)||b.hasData(e)},data:function(e,t,n){return u.access(e,t,n)},removeData:function(e,t){u.remove(e,t)},_data:function(e,t,n){return b.access(e,t,n)},_removeData:function(e,t){b.remove(e,t)}}),C.fn.extend({data:function(n,e){var t,r,i,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){u.set(this,n)}):d(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=u.get(o,n))||void 0!==(t=ge(o,n))?t:void 0;this.each(function(){u.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=u.get(o),1===o.nodeType&&!b.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(r=s[t].name).indexOf("data-")&&(r=x(r.slice(5)),ge(o,r,i[r]));b.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){u.remove(this,e)})}}),C.extend({queue:function(e,t,n){var r;if(e)return r=b.get(e,t=(t||"fx")+"queue"),n&&(!r||Array.isArray(n)?r=b.access(e,t,C.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),r=n.length,i=n.shift(),o=C._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){C.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b.get(e,n)||b.access(e,n,{empty:C.Callbacks("once memory").add(function(){b.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(s,[s])}var r,i=1,o=C.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(r=b.get(s[a],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});function ve(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&k(e)&&"none"===C.css(e,"display")}var e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,me=new RegExp("^(?:([+-])=|)("+e+")([a-z%]*)$","i"),f=["Top","Right","Bottom","Left"],E=T.documentElement,k=function(e){return C.contains(e.ownerDocument,e)},ye={composed:!0};E.getRootNode&&(k=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});function xe(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return C.css(e,t,"")},l=a(),u=n&&n[3]||(C.cssNumber[t]?"":"px"),c=e.nodeType&&(C.cssNumber[t]||"px"!==u&&+l)&&me.exec(C.css(e,t));if(c&&c[3]!==u){for(u=u||c[3],c=+(l/=2)||1;s--;)C.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;C.style(e,t,(c*=2)+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var be={};function A(e,t){for(var n,r,i,o,s,a=[],l=0,u=e.length;l<u;l++)(r=e[l]).style&&(n=r.style.display,t?("none"===n&&(a[l]=b.get(r,"display")||null,a[l]||(r.style.display="")),""===r.style.display&&ve(r)&&(a[l]=(s=o=void 0,o=(i=r).ownerDocument,i=i.nodeName,(s=be[i])||(o=o.body.appendChild(o.createElement(i)),s=C.css(o,"display"),o.parentNode.removeChild(o),be[i]=s="none"===s?"block":s),s))):"none"!==n&&(a[l]="none",b.set(r,"display",n)));for(l=0;l<u;l++)null!=a[l]&&(e[l].style.display=a[l]);return e}C.fn.extend({show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ve(this)?C(this).show():C(this).hide()})}});var we=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ce=/^$|^module$|\/(?:java|ecma)script/i,D=(q=T.createDocumentFragment().appendChild(T.createElement("div")),(o=T.createElement("input")).setAttribute("type","radio"),o.setAttribute("checked","checked"),o.setAttribute("name","t"),q.appendChild(o),v.checkClone=q.cloneNode(!0).cloneNode(!0).lastChild.checked,q.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!q.cloneNode(!0).lastChild.defaultValue,q.innerHTML="<option></option>",v.option=!!q.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function N(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&l(e,t)?C.merge([e],n):n}function Se(e,t){for(var n=0,r=e.length;n<r;n++)b.set(e[n],"globalEval",!t||b.get(t[n],"globalEval"))}D.tbody=D.tfoot=D.colgroup=D.caption=D.thead,D.th=D.td,v.option||(D.optgroup=D.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function ke(e,t,n,r,i){for(var o,s,a,l,u,c=t.createDocumentFragment(),d=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===h(o))C.merge(d,o.nodeType?[o]:o);else if(Ee.test(o)){for(s=s||c.appendChild(t.createElement("div")),a=(Te.exec(o)||["",""])[1].toLowerCase(),a=D[a]||D._default,s.innerHTML=a[1]+C.htmlPrefilter(o)+a[2],u=a[0];u--;)s=s.lastChild;C.merge(d,s.childNodes),(s=c.firstChild).textContent=""}else d.push(t.createTextNode(o));for(c.textContent="",f=0;o=d[f++];)if(r&&-1<C.inArray(o,r))i&&i.push(o);else if(l=k(o),s=N(c.appendChild(o),"script"),l&&Se(s),n)for(u=0;o=s[u++];)Ce.test(o.type||"")&&n.push(o);return c}var Ae=/^([^.]*)(?:\.(.+)|)/;function n(){return!0}function p(){return!1}function De(e,t){return e===function(){try{return T.activeElement}catch(e){}}()==("focus"===t)}function Ne(e,t,n,r,i,o){var s,a;if("object"===_typeof(t)){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Ne(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=p;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,i,r,n)})}function je(e,i,o){o?(b.set(e,i,!1),C.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=b.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(C.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=a.call(arguments),b.set(this,i,r),t=o(this,i),this[i](),r!==(n=b.get(this,i))||t?b.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(b.set(this,i,{value:C.event.trigger(C.extend(r[0],C.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===b.get(e,i)&&C.event.add(e,i,n)}C.event={global:{},add:function(t,e,n,r,i){var o,s,a,l,u,c,d,f,p,h=b.get(t);if(m(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&C.find.matchesSelector(E,i),n.guid||(n.guid=C.guid++),(a=h.events)||(a=h.events=Object.create(null)),(s=h.handle)||(s=h.handle=function(e){return void 0!==C&&C.event.triggered!==e.type?C.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(S)||[""]).length;l--;)d=p=(f=Ae.exec(e[l])||[])[1],f=(f[2]||"").split(".").sort(),d&&(u=C.event.special[d]||{},d=(i?u.delegateType:u.bindType)||d,u=C.event.special[d]||{},p=C.extend({type:d,origType:p,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&C.expr.match.needsContext.test(i),namespace:f.join(".")},o),(c=a[d])||((c=a[d]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,r,f,s)||t.addEventListener&&t.addEventListener(d,s)),u.add&&(u.add.call(t,p),p.handler.guid||(p.handler.guid=n.guid)),i?c.splice(c.delegateCount++,0,p):c.push(p),C.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,u,c,d,f,p,h,g,v=b.hasData(e)&&b.get(e);if(v&&(l=v.events)){for(u=(t=(t||"").match(S)||[""]).length;u--;)if(p=g=(a=Ae.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),p){for(d=C.event.special[p]||{},f=l[p=(r?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));s&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||C.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)C.event.remove(e,p+t[u],n,r,!0);C.isEmptyObject(l)&&b.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s=new Array(arguments.length),a=C.event.fix(e),e=(b.get(this,"events")||Object.create(null))[a.type]||[],l=C.event.special[a.type]||{};for(s[0]=a,t=1;t<arguments.length;t++)s[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(o=C.event.handlers.call(this,a,e),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==i.namespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(i=((C.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,s))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?-1<C(i,this).index(u):C.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(C.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&je(e,"click",n),!1},trigger:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&je(e,"click"),!0},_default:function(e){e=e.target;return we.test(e.type)&&e.click&&l(e,"input")&&b.get(e,"click")||l(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?n:p,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=n,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=n,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=n,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},function(t,e){C.event.special[t]={setup:function(){return je(this,t,De),!1},trigger:function(){return je(this,t),!0},_default:function(e){return b.get(e.target,t)},delegateType:e}}),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){C.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),C.fn.extend({on:function(e,t,n,r){return Ne(this,e,t,n,r)},one:function(e,t,n,r){return Ne(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)r=e.handleObj,C(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler);else{if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=p),this.each(function(){C.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i])}return this}});var Le=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Me(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function _e(e,t){var n,r,i,o;if(1===t.nodeType){if(b.hasData(e)&&(o=b.get(e).events))for(i in b.remove(t,"handle events"),o)for(n=0,r=o[i].length;n<r;n++)C.event.add(t,i,o[i][n]);u.hasData(e)&&(e=u.access(e),e=C.extend({},e),u.set(t,e))}}function j(n,r,i,o){r=I(r);var e,t,s,a,l,u,c=0,d=n.length,f=d-1,p=r[0],h=y(p);if(h||1<d&&"string"==typeof p&&!v.checkClone&&qe.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),j(t,r,i,o)});if(d&&(t=(e=ke(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=C.map(N(e,"script"),He)).length;c<d;c++)l=e,c!==f&&(l=C.clone(l,!0,!0),a&&C.merge(s,N(l,"script"))),i.call(n[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,C.map(s,Oe),c=0;c<a;c++)l=s[c],Ce.test(l.type||"")&&!b.access(l,"globalEval")&&C.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?C._evalUrl&&!l.noModule&&C._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):V(l.textContent.replace(Pe,""),l,u))}return n}function Ie(e,t,n){for(var r,i=t?C.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||C.cleanData(N(r)),r.parentNode&&(n&&k(r)&&Se(N(r,"script")),r.parentNode.removeChild(r));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,s,a,l,u,c=e.cloneNode(!0),d=k(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=N(c),r=0,i=(o=N(e)).length;r<i;r++)a=o[r],l=s[r],u=void 0,"input"===(u=l.nodeName.toLowerCase())&&we.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||N(e),s=s||N(c),r=0,i=o.length;r<i;r++)_e(o[r],s[r]);else _e(e,c);return 0<(s=N(c,"script")).length&&Se(s,!d&&N(e,"script")),c},cleanData:function(e){for(var t,n,r,i=C.event.special,o=0;void 0!==(n=e[o]);o++)if(m(n)){if(t=n[b.expando]){if(t.events)for(r in t.events)i[r]?C.event.remove(n,r):C.removeEvent(n,r,t.handle);n[b.expando]=void 0}n[u.expando]&&(n[u.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return d(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return j(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return j(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Me(this,e)).insertBefore(e,t.firstChild)})},before:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(N(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return d(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!D[(Te.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(N(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return j(this,arguments,function(e){var t=this.parentNode;C.inArray(this,n)<0&&(C.cleanData(N(this)),t&&t.replaceChild(e,this))},n)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){C.fn[e]=function(e){for(var t,n=[],r=C(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),C(r[o])[s](t),R.apply(n,t.get());return this.pushStack(n)}});function Re(e){var t=e.ownerDocument.defaultView;return(t=t&&t.opener?t:w).getComputedStyle(e)}function $e(e,t,n){var r,i={};for(r in t)i[r]=e.style[r],e.style[r]=t[r];for(r in n=n.call(e),t)e.style[r]=i[r];return n}var We,Fe,Be,ze,Ue,Xe,Ve,i,Ye=new RegExp("^("+e+")(?!px)[a-z%]+$","i"),Qe=/^--/,Ge=new RegExp(f.join("|"),"i"),o="[\\x20\\t\\r\\n\\f]",Je=new RegExp("^"+o+"+|((?:^|[^\\\\])(?:\\\\.)*)"+o+"+$","g");function Ke(){var e;i&&(Ve.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",i.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",E.appendChild(Ve).appendChild(i),e=w.getComputedStyle(i),We="1%"!==e.top,Xe=12===Ze(e.marginLeft),i.style.right="60%",ze=36===Ze(e.right),Fe=36===Ze(e.width),i.style.position="absolute",Be=12===Ze(i.offsetWidth/3),E.removeChild(Ve),i=null)}function Ze(e){return Math.round(parseFloat(e))}function et(e,t,n){var r,i=Qe.test(t),o=e.style;return(n=n||Re(e))&&(r=n.getPropertyValue(t)||n[t],""!==(r=i?r.replace(Je,"$1"):r)||k(e)||(r=C.style(e,t)),!v.pixelBoxStyles()&&Ye.test(r)&&Ge.test(t)&&(i=o.width,e=o.minWidth,t=o.maxWidth,o.minWidth=o.maxWidth=o.width=r,r=n.width,o.width=i,o.minWidth=e,o.maxWidth=t)),void 0!==r?r+"":r}function tt(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ve=T.createElement("div"),(i=T.createElement("div")).style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===i.style.backgroundClip,C.extend(v,{boxSizingReliable:function(){return Ke(),Fe},pixelBoxStyles:function(){return Ke(),ze},pixelPosition:function(){return Ke(),We},reliableMarginLeft:function(){return Ke(),Xe},scrollboxSize:function(){return Ke(),Be},reliableTrDimensions:function(){var e,t,n;return null==Ue&&(e=T.createElement("table"),t=T.createElement("tr"),n=T.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",E.appendChild(e).appendChild(t).appendChild(n),n=w.getComputedStyle(t),Ue=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===t.offsetHeight,E.removeChild(e)),Ue}}));var nt=["Webkit","Moz","ms"],rt=T.createElement("div").style,it={};function ot(e){var t=C.cssProps[e]||it[e];return t||(e in rt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if((e=nt[n]+t)in rt)return e}(e)||e)}var st=/^(none|table(?!-c[ea]).+)/,at={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"};function ut(e,t,n){var r=me.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function ct(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=C.css(e,n+f[s],!0,i)),r?("content"===n&&(l-=C.css(e,"padding"+f[s],!0,i)),"margin"!==n&&(l-=C.css(e,"border"+f[s]+"Width",!0,i))):(l+=C.css(e,"padding"+f[s],!0,i),"padding"!==n?l+=C.css(e,"border"+f[s]+"Width",!0,i):a+=C.css(e,"border"+f[s]+"Width",!0,i));return!r&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function dt(e,t,n){var r=Re(e),i=(!v.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,r),o=i,s=et(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&l(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===C.css(e,"boxSizing",!1,r),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ct(e,t,n||(i?"border":"content"),o,r,s)+"px"}function s(e,t,n,r,i){return new s.prototype.init(e,t,n,r,i)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t)return""===(t=et(e,"opacity"))?"1":t}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x(t),l=Qe.test(t),u=e.style;if(l||(t=ot(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"===(o=_typeof(n))&&(i=me.exec(n))&&i[1]&&(n=xe(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(C.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o=x(t);return Qe.test(t)||(t=ot(o)),"normal"===(i=void 0===(i=(o=C.cssHooks[t]||C.cssHooks[o])&&"get"in o?o.get(e,!0,n):i)?et(e,t,r):i)&&t in lt&&(i=lt[t]),(""===n||n)&&(o=parseFloat(i),!0===n||isFinite(o))?o||0:i}}),C.each(["height","width"],function(e,s){C.cssHooks[s]={get:function(e,t,n){if(t)return!st.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,s,n):$e(e,at,function(){return dt(e,s,n)})},set:function(e,t,n){var r=Re(e),i=!v.scrollboxSize()&&"absolute"===r.position,o=(i||n)&&"border-box"===C.css(e,"boxSizing",!1,r),n=n?ct(e,s,n,o,r):0;return o&&i&&(n-=Math.ceil(e["offset"+s[0].toUpperCase()+s.slice(1)]-parseFloat(r[s])-ct(e,s,"border",!1,r)-.5)),n&&(o=me.exec(t))&&"px"!==(o[3]||"px")&&(e.style[s]=t,t=C.css(e,s)),ut(0,t,n)}}}),C.cssHooks.marginLeft=tt(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(et(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(i,o){C.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+f[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(C.cssHooks[i+o].set=ut)}),C.fn.extend({css:function(e,t){return d(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=Re(e),i=t.length;s<i;s++)o[t[s]]=C.css(e,t[s],!1,r);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)}}),((C.Tween=s).prototype={constructor:s,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=s.propHooks[this.prop];return(e&&e.get?e:s.propHooks._default).get(this)},run:function(e){var t,n=s.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:s.propHooks._default).set(this),this}}).init.prototype=s.prototype,(s.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=C.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[ot(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=s.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=s.prototype.init,C.fx.step={};var L,ft,q,pt=/^(?:toggle|show|hide)$/,ht=/queueHooks$/;function gt(){ft&&(!1===T.hidden&&w.requestAnimationFrame?w.requestAnimationFrame(gt):w.setTimeout(gt,C.fx.interval),C.fx.tick())}function vt(){return w.setTimeout(function(){L=void 0}),L=Date.now()}function mt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=f[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function yt(e,t,n){for(var r,i=(P.tweeners[t]||[]).concat(P.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function P(i,e,t){var n,o,r,s,a,l,u,c=0,d=P.prefilters.length,f=C.Deferred().always(function(){delete p.elem}),p=function(){if(!o){for(var e=L||vt(),e=Math.max(0,h.startTime+h.duration-e),t=1-(e/h.duration||0),n=0,r=h.tweens.length;n<r;n++)h.tweens[n].run(t);if(f.notifyWith(i,[h,t,e]),t<1&&r)return e;r||f.notifyWith(i,[h,1,0]),f.resolveWith(i,[h])}return!1},h=f.promise({elem:i,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},t),originalProperties:e,originalOptions:t,startTime:L||vt(),duration:t.duration,tweens:[],createTween:function(e,t){t=C.Tween(i,h.opts,e,t,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(t),t},stop:function(e){var t=0,n=e?h.tweens.length:0;if(!o){for(o=!0;t<n;t++)h.tweens[t].run(1);e?(f.notifyWith(i,[h,1,0]),f.resolveWith(i,[h,e])):f.rejectWith(i,[h,e])}return this}}),g=h.props,v=g,m=h.opts.specialEasing;for(r in v)if(a=m[s=x(r)],l=v[r],Array.isArray(l)&&(a=l[1],l=v[r]=l[0]),r!==s&&(v[s]=l,delete v[r]),(u=C.cssHooks[s])&&"expand"in u)for(r in l=u.expand(l),delete v[s],l)r in v||(v[r]=l[r],m[r]=a);else m[s]=a;for(;c<d;c++)if(n=P.prefilters[c].call(h,i,g,h.opts))return y(n.stop)&&(C._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return C.map(g,yt,h),y(h.opts.start)&&h.opts.start.call(i,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),C.fx.timer(C.extend(p,{elem:i,anim:h,queue:h.opts.queue})),h}C.Animation=C.extend(P,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return xe(n.elem,e,me.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,i=(e=y(e)?(t=e,["*"]):e.match(S)).length;r<i;r++)n=e[r],P.tweeners[n]=P.tweeners[n]||[],P.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,l,u,c="width"in t||"height"in t,d=this,f={},p=e.style,h=e.nodeType&&ve(e),g=b.get(e,"fxshow");for(r in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[r],pt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}f[r]=g&&g[r]||C.style(e,r)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(r in c&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=g&&g.display)&&(u=b.get(e,"display")),"none"===(c=C.css(e,"display"))&&(u?c=u:(A([e],!0),u=e.style.display||u,c=C.css(e,"display"),A([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===C.css(e,"float")&&(l||(d.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(h=g.hidden):g=b.access(e,"fxshow",{display:u}),o&&(g.hidden=!h),h&&A([e],!0),d.done(function(){for(r in h||A([e]),b.remove(e,"fxshow"),f)C.style(e,r,f[r])})),l=yt(h?g[r]:0,r,d),r in g||(g[r]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?P.prefilters.unshift(e):P.prefilters.push(e)}}),C.speed=function(e,t,n){var r=e&&"object"===_typeof(e)?C.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return C.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in C.fx.speeds?r.duration=C.fx.speeds[r.duration]:r.duration=C.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&C.dequeue(this,r.queue)},r},C.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ve).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function i(){var e=P(this,C.extend({},t),s);(o||b.get(this,"finish"))&&e.stop(!0)}var o=C.isEmptyObject(t),s=C.speed(e,n,r);return i.finish=i,o||!1===s.queue?this.each(i):this.queue(s.queue,i)},stop:function(i,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=C.timers,r=b.get(this);if(t)r[t]&&r[t].stop&&s(r[t]);else for(t in r)r[t]&&r[t].stop&&ht.test(t)&&s(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||C.dequeue(this,i)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=b.get(this),n=t[s+"queue"],r=t[s+"queueHooks"],i=C.timers,o=n?n.length:0;for(t.finish=!0,C.queue(this,s,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===s&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,r){var i=C.fn[r];C.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(mt(r,!0),e,t,n)}}),C.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){C.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(L=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),L=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){ft||(ft=!0,gt())},C.fx.stop=function(){ft=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(r,e){return r=C.fx&&C.fx.speeds[r]||r,this.queue(e=e||"fx",function(e,t){var n=w.setTimeout(e,r);t.stop=function(){w.clearTimeout(n)}})},q=T.createElement("input"),e=T.createElement("select").appendChild(T.createElement("option")),q.type="checkbox",v.checkOn=""!==q.value,v.optSelected=e.selected,(q=T.createElement("input")).value="t",q.type="radio",v.radioValue="t"===q.value;var xt,bt=C.expr.attrHandle,wt=(C.fn.extend({attr:function(e,t){return d(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(i=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?xt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):!(i&&"get"in i&&null!==(r=i.get(e,t)))&&null==(r=C.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){var n;if(!v.radioValue&&"radio"===t&&l(e,"input"))return n=e.value,e.setAttribute("type",t),n&&(e.value=n),t}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(S);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),xt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var s=bt[t]||C.find.attr;bt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=bt[o],bt[o]=r,r=null!=s(e,t,n)?o:null,bt[o]=i),r}}),/^(?:input|select|textarea|button)$/i),Tt=/^(?:a|area)$/i;function M(e){return(e.match(S)||[]).join(" ")}function H(e){return e.getAttribute&&e.getAttribute("class")||""}function Ct(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(S)||[]}C.fn.extend({prop:function(e,t){return d(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(e)||(t=C.propFix[t]||t,i=C.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(C.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(t){var e,n,r,i,o,s;return y(t)?this.each(function(e){C(this).addClass(t.call(this,e,H(this)))}):(e=Ct(t)).length?this.each(function(){if(r=H(this),n=1===this.nodeType&&" "+M(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");s=M(n),r!==s&&this.setAttribute("class",s)}}):this},removeClass:function(t){var e,n,r,i,o,s;return y(t)?this.each(function(e){C(this).removeClass(t.call(this,e,H(this)))}):arguments.length?(e=Ct(t)).length?this.each(function(){if(r=H(this),n=1===this.nodeType&&" "+M(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];-1<n.indexOf(" "+i+" ");)n=n.replace(" "+i+" "," ");s=M(n),r!==s&&this.setAttribute("class",s)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,r,i,o,s=_typeof(t),a="string"===s||Array.isArray(t);return y(t)?this.each(function(e){C(this).toggleClass(t.call(this,e,H(this),n),n)}):"boolean"==typeof n&&a?n?this.addClass(t):this.removeClass(t):(e=Ct(t),this.each(function(){if(a)for(o=C(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==s||((r=H(this))&&b.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",!r&&!1!==t&&b.get(this,"__className__")||""))}))},hasClass:function(e){for(var t,n=0,r=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+M(H(t))+" ").indexOf(r))return!0;return!1}});function St(e){e.stopPropagation()}var Et=/\r/g,kt=(C.fn.extend({val:function(t){var n,e,r,i=this[0];return arguments.length?(r=y(t),this.each(function(e){1===this.nodeType&&(null==(e=r?t.call(this,e,C(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=C.map(e,function(e){return null==e?"":e+""})),(n=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):i?(n=C.valHooks[i.type]||C.valHooks[i.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(i,"value"))?e:"string"==typeof(e=i.value)?e.replace(Et,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:M(C.text(e))}},select:{get:function(e){for(var t,n=e.options,r=e.selectedIndex,i="select-one"===e.type,o=i?null:[],s=i?r+1:n.length,a=r<0?s:i?r:0;a<s;a++)if(((t=n[a]).selected||a===r)&&!t.disabled&&(!t.parentNode.disabled||!l(t.parentNode,"optgroup"))){if(t=C(t).val(),i)return t;o.push(t)}return o},set:function(e,t){for(var n,r,i=e.options,o=C.makeArray(t),s=i.length;s--;)((r=i[s]).selected=-1<C.inArray(C.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<C.inArray(C(e).val(),t)}},v.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in w,/^(?:focusinfocus|focusoutblur)$/),At=(C.extend(C.event,{trigger:function(e,t,n,r){var i,o,s,a,l,u,c,d=[n||T],f=B.call(e,"type")?e.type:e,p=B.call(e,"namespace")?e.namespace.split("."):[],h=c=o=n=n||T;if(3!==n.nodeType&&8!==n.nodeType&&!kt.test(f+C.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),a=f.indexOf(":")<0&&"on"+f,(e=e[C.expando]?e:new C.Event(f,"object"===_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),u=C.event.special[f]||{},r||!u.trigger||!1!==u.trigger.apply(n,t))){if(!r&&!u.noBubble&&!g(n)){for(s=u.delegateType||f,kt.test(s+f)||(h=h.parentNode);h;h=h.parentNode)d.push(h),o=h;o===(n.ownerDocument||T)&&d.push(o.defaultView||o.parentWindow||w)}for(i=0;(h=d[i++])&&!e.isPropagationStopped();)c=h,e.type=1<i?s:u.bindType||f,(l=(b.get(h,"events")||Object.create(null))[e.type]&&b.get(h,"handle"))&&l.apply(h,t),(l=a&&h[a])&&l.apply&&m(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!m(n)||a&&y(n[f])&&!g(n)&&((o=n[a])&&(n[a]=null),C.event.triggered=f,e.isPropagationStopped()&&c.addEventListener(f,St),n[f](),e.isPropagationStopped()&&c.removeEventListener(f,St),C.event.triggered=void 0,o&&(n[a]=o)),e.result}},simulate:function(e,t,n){n=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(n,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),v.focusin||C.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){C.event.simulate(r,e.target,C.event.fix(e))}C.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,r);t||e.addEventListener(n,i,!0),b.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,r)-1;t?b.access(e,r,t):(e.removeEventListener(n,i,!0),b.remove(e,r))}}}),w.location),Dt={guid:Date.now()},Nt=/\?/,jt=(C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new w.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t},/\[\]$/),Lt=/\r?\n/g,qt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;C.param=function(e,t){function n(e,t){t=y(t)?t():t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var r,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(r in e)!function n(r,e,i,o){if(Array.isArray(e))C.each(e,function(e,t){i||jt.test(r)?o(r,t):n(r+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,i,o)});else if(i||"object"!==h(e))o(r,e);else for(var t in e)n(r+"["+t+"]",e[t],i,o)}(r,e[r],t,n);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Pt.test(this.nodeName)&&!qt.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}}):{name:t.name,value:n.replace(Lt,"\r\n")}}).get()}});var Mt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,_t=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Rt=/^\/\//,$t={},Wt={},Ft="*/".concat("*"),Bt=T.createElement("a");function zt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(S)||[];if(y(t))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Ut(t,r,i,o){var s={},a=t===Wt;function l(e){var n;return s[e]=!0,C.each(t[e]||[],function(e,t){t=t(r,i,o);return"string"!=typeof t||a||s[t]?a?!(n=t):void 0:(r.dataTypes.unshift(t),l(t),!1)}),n}return l(r.dataTypes[0])||!s["*"]&&l("*")}function Xt(e,t){var n,r,i=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r=r||{})[n]=t[n]);return r&&C.extend(!0,e,r),e}Bt.href=At.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:At.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(At.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ft,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Xt(Xt(e,C.ajaxSettings),t):Xt(C.ajaxSettings,e)},ajaxPrefilter:zt($t),ajaxTransport:zt(Wt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0);var l,u,c,n,d,f,p,r,h=C.ajaxSetup({},t=t||{}),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?C(g):C.event,m=C.Deferred(),y=C.Callbacks("once memory"),x=h.statusCode||{},i={},o={},s="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(f){if(!n)for(n={};t=_t.exec(c);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?c:null},setRequestHeader:function(e,t){return null==f&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,i[e]=t),this},overrideMimeType:function(e){return null==f&&(h.mimeType=e),this},statusCode:function(e){if(e)if(f)b.always(e[b.status]);else for(var t in e)x[t]=[x[t],e[t]];return this},abort:function(e){e=e||s;return l&&l.abort(e),a(0,e),this}};if(m.promise(b),h.url=((e||h.url||At.href)+"").replace(Rt,At.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(S)||[""],null==h.crossDomain){e=T.createElement("a");try{e.href=h.url,e.href=e.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=e.protocol+"//"+e.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=C.param(h.data,h.traditional)),Ut($t,h,t,b),!f){for(r in(p=C.event&&h.global)&&0==C.active++&&C.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!It.test(h.type),u=h.url.replace(Ht,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Mt,"+")):(e=h.url.slice(u.length),h.data&&(h.processData||"string"==typeof h.data)&&(u+=(Nt.test(u)?"&":"?")+h.data,delete h.data),!1===h.cache&&(u=u.replace(Ot,"$1"),e=(Nt.test(u)?"&":"?")+"_="+Dt.guid+++e),h.url=u+e),h.ifModified&&(C.lastModified[u]&&b.setRequestHeader("If-Modified-Since",C.lastModified[u]),C.etag[u]&&b.setRequestHeader("If-None-Match",C.etag[u])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&b.setRequestHeader("Content-Type",h.contentType),b.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ft+"; q=0.01":""):h.accepts["*"]),h.headers)b.setRequestHeader(r,h.headers[r]);if(h.beforeSend&&(!1===h.beforeSend.call(g,b,h)||f))return b.abort();if(s="abort",y.add(h.complete),b.done(h.success),b.fail(h.error),l=Ut(Wt,h,t,b)){if(b.readyState=1,p&&v.trigger("ajaxSend",[b,h]),f)return b;h.async&&0<h.timeout&&(d=w.setTimeout(function(){b.abort("timeout")},h.timeout));try{f=!1,l.send(i,a)}catch(e){if(f)throw e;a(-1,e)}}else a(-1,"No Transport")}return b;function a(e,t,n,r){var i,o,s,a=t;f||(f=!0,d&&w.clearTimeout(d),l=void 0,c=r||"",b.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s=s||i}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,b,n)),!r&&-1<C.inArray("script",h.dataTypes)&&C.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),s=function(e,t,n,r){var i,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(i in u)if((a=i.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[i]:!0!==u[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,s,b,r),r?(h.ifModified&&((n=b.getResponseHeader("Last-Modified"))&&(C.lastModified[u]=n),(n=b.getResponseHeader("etag"))&&(C.etag[u]=n)),204===e||"HEAD"===h.type?a="nocontent":304===e?a="notmodified":(a=s.state,i=s.data,r=!(o=s.error))):(o=a,!e&&a||(a="error",e<0&&(e=0))),b.status=e,b.statusText=(t||a)+"",r?m.resolveWith(g,[i,a,b]):m.rejectWith(g,[b,a,o]),b.statusCode(x),x=void 0,p&&v.trigger(r?"ajaxSuccess":"ajaxError",[b,h,r?i:o]),y.fireWith(g,[b,a]),p&&(v.trigger("ajaxComplete",[b,h]),--C.active||C.event.trigger("ajaxStop")))}},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,i){C[i]=function(e,t,n,r){return y(t)&&(r=r||n,n=t,t=void 0),C.ajax(C.extend({url:e,type:i,dataType:r,data:t,success:n},C.isPlainObject(e)&&e))}}),C.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){return this[0]&&(y(e)&&(e=e.call(this[0])),e=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=y(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new w.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Yt=C.ajaxSettings.xhr(),Qt=(v.cors=!!Yt&&"withCredentials"in Yt,v.ajax=Yt=!!Yt,C.ajaxTransport(function(i){var o,s;if(v.cors||Yt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Vt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),s=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=s:r.onreadystatechange=function(){4===r.readyState&&w.setTimeout(function(){o&&s()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=C("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(r[0])},abort:function(){i&&i()}}}),[]),Gt=/(=)\?(?=&|$)|\?\?/,Jt=(C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||C.expando+"_"+Dt.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,s=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Gt,"$1"+r):!1!==e.jsonp&&(e.url+=(Nt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||C.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=w[r],w[r]=function(){o=arguments},n.always(function(){void 0===i?C(w).removeProp(r):w[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(r)),o&&y(i)&&i(o[0]),o=i=void 0}),"script"}),v.createHTMLDocument=((o=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===o.childNodes.length),C.parseHTML=function(e,t,n){var r;return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(r)):t=T),r=!n&&[],(n=J.exec(e))?[t.createElement(n[1])]:(n=ke([e],t,r),r&&r.length&&C(r).remove(),C.merge([],n.childNodes)))},C.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return-1<a&&(r=M(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(i="POST"),0<s.length&&C.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?C("<div>").append(C.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},C.expr.pseudos.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length},C.offset={setOffset:function(e,t,n){var r,i,o,s,a=C.css(e,"position"),l=C(e),u={};"static"===a&&(e.style.position="relative"),o=l.offset(),r=C.css(e,"top"),s=C.css(e,"left"),a=("absolute"===a||"fixed"===a)&&-1<(r+s).indexOf("auto")?(i=(a=l.position()).top,a.left):(i=parseFloat(r)||0,parseFloat(s)||0),null!=(t=y(t)?t.call(e,n,C.extend({},o)):t).top&&(u.top=t.top-o.top+i),null!=t.left&&(u.left=t.left-o.left+a),"using"in t?t.using.call(e,u):l.css(u)}},C.fn.extend({offset:function(t){var e,n;return arguments.length?void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)}):(n=this[0])?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===C.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),i.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-C.css(r,"marginTop",!0),left:t.left-i.left-C.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||E})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;C.fn[t]=function(e){return d(this,function(e,t,n){var r;if(g(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=tt(v.pixelPosition,function(e,t){if(t)return t=et(e,n),Ye.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(s,a){C.each({padding:"inner"+s,content:a,"":"outer"+s},function(r,o){C.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return d(this,function(e,t,n){var r;return g(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+s],r["scroll"+s],e.body["offset"+s],r["offset"+s],r["client"+s])):void 0===n?C.css(e,t,i):C.style(e,t,n,i)},a,n?e:void 0,n)}})}),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g),Kt=(C.proxy=function(e,t){var n,r;if("string"==typeof t&&(r=e[t],t=e,e=r),y(e))return n=a.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||C.guid++,r},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=l,C.isFunction=y,C.isWindow=g,C.camelCase=x,C.type=h,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Jt,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return C}),w.jQuery),Zt=w.$;return C.noConflict=function(e){return w.$===C&&(w.$=Zt),e&&w.jQuery===C&&(w.jQuery=Kt),C},void 0===O&&(w.jQuery=w.$=C),C});var myMap,openItem=function(e){var e=e.closest(".team__member"),t=e.find(".team__member-content"),n=t.find(".team__member-content-block").height();e.addClass("active"),t.height(n)},closeEveryItem=function(e){var t=e.find(".team__member-content");e.find(".team__member").removeClass("active"),t.height(0)},FullMenu=($(".team__member-link").click(function(e){var e=$(e.currentTarget),t=e.closest(".team__list");e.closest(".team__member").hasClass("active")?closeEveryItem(t):(closeEveryItem(t),openItem(e))}),function(){function n(e){var t=this;_classCallCheck(this,n),this.menu=document.querySelector(e),document.addEventListener("click",function(e){var e=e.target.closest("[data-menu]");e&&(e=e.dataset.menu,t[e]())})}return _createClass(n,[{key:"open",value:function(){this.menu.classList.add("open"),document.body.style.overflow="hidden"}},{key:"close",value:function(){this.menu.classList.remove("open"),document.body.style.overflow="auto"}}]),n}()),menu=new FullMenu("#full-menu"),findBlockByAlias=function(n){return $(".reviews__item").filter(function(e,t){return $(t).attr("data-linked-with")===n})},init=($(".reviews__switcher-link").click(function(e){e.preventDefault();var e=$(e.currentTarget),t=e.attr("data-open"),t=findBlockByAlias(t),e=e.closest(".reviews__switcher-item");t.addClass("active").siblings().removeClass("active"),e.addClass("active").siblings().removeClass("active")}),!function(z){var U={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0}};z.fn.bxSlider=function(t){var u,c,o,s,n,e,r,a,l,d,f,p,h,g,v,m,y,x,b,w,T,C,S,E,k,_,A,D,N,j,I,R,L,$,q,W,F,B,P,M,H,O;return 0===this.length?this:1<this.length?(this.each(function(){z(this).bxSlider(t)}),this):(u={},c=this,o=z(window).width(),s=z(window).height(),z(c).data("bxSlider")?void 0:(n=function(){z(c).data("bxSlider")||(u.settings=z.extend({},U,t),u.settings.slideWidth=parseInt(u.settings.slideWidth),u.children=c.children(u.settings.slideSelector),u.children.length<u.settings.minSlides&&(u.settings.minSlides=u.children.length),u.children.length<u.settings.maxSlides&&(u.settings.maxSlides=u.children.length),u.settings.randomStart&&(u.settings.startSlide=Math.floor(Math.random()*u.children.length)),u.active={index:u.settings.startSlide},u.carousel=1<u.settings.minSlides||1<u.settings.maxSlides,u.carousel&&(u.settings.preloadImages="all"),u.minThreshold=u.settings.minSlides*u.settings.slideWidth+(u.settings.minSlides-1)*u.settings.slideMargin,u.maxThreshold=u.settings.maxSlides*u.settings.slideWidth+(u.settings.maxSlides-1)*u.settings.slideMargin,u.working=!1,u.controls={},u.interval=null,u.animProp="vertical"===u.settings.mode?"top":"left",u.usingCSS=u.settings.useCSS&&"fade"!==u.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return u.cssPrefix=t[n].replace("Perspective","").toLowerCase(),u.animProp="-"+u.cssPrefix+"-transform",!0;return!1}(),"vertical"===u.settings.mode&&(u.settings.maxSlides=u.settings.minSlides),c.data("origStyle",c.attr("style")),c.children(u.settings.slideSelector).each(function(){z(this).data("origStyle",z(this).attr("style"))}),e())},e=function(){var e=u.children.eq(u.settings.startSlide);c.wrap('<div class="'+u.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),u.viewport=c.parent(),u.settings.ariaLive&&!u.settings.ticker&&u.viewport.attr("aria-live","polite"),u.loader=z('<div class="bx-loading" />'),u.viewport.prepend(u.loader),c.css({width:"horizontal"===u.settings.mode?1e3*u.children.length+215+"%":"auto",position:"relative"}),u.usingCSS&&u.settings.easing?c.css("-"+u.cssPrefix+"-transition-timing-function",u.settings.easing):u.settings.easing||(u.settings.easing="swing"),u.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),u.viewport.parent().css({maxWidth:d()}),u.children.css({float:"horizontal"===u.settings.mode?"left":"none",listStyle:"none",position:"relative"}),u.children.css("width",f()),"horizontal"===u.settings.mode&&0<u.settings.slideMargin&&u.children.css("marginRight",u.settings.slideMargin),"vertical"===u.settings.mode&&0<u.settings.slideMargin&&u.children.css("marginBottom",u.settings.slideMargin),"fade"===u.settings.mode&&(u.children.css({position:"absolute",zIndex:0,display:"none"}),u.children.eq(u.settings.startSlide).css({zIndex:u.settings.slideZIndex,display:"block"})),u.controls.el=z('<div class="bx-controls" />'),u.settings.captions&&T(),u.active.last=u.settings.startSlide===h()-1,u.settings.video&&c.fitVids(),"all"!==u.settings.preloadImages&&!u.settings.ticker||(e=u.children),u.settings.ticker?u.settings.pager=!1:(u.settings.controls&&b(),u.settings.auto&&u.settings.autoControls&&w(),u.settings.pager&&x(),(u.settings.controls||u.settings.autoControls||u.settings.pager)&&u.viewport.after(u.controls.el)),r(e,a)},r=function(e,t){var n=e.find('img:not([src=""]), iframe').length,r=0;0===n?t():e.find('img:not([src=""]), iframe').each(function(){z(this).one("load error",function(){++r===n&&t()}).each(function(){this.complete&&z(this).trigger("load")})})},a=function(){var e,t;u.settings.infiniteLoop&&"fade"!==u.settings.mode&&!u.settings.ticker&&(t="vertical"===u.settings.mode?u.settings.minSlides:u.settings.maxSlides,e=u.children.slice(0,t).clone(!0).addClass("bx-clone"),t=u.children.slice(-t).clone(!0).addClass("bx-clone"),u.settings.ariaHidden&&(e.attr("aria-hidden",!0),t.attr("aria-hidden",!0)),c.append(e).prepend(t)),u.loader.remove(),v(),"vertical"===u.settings.mode&&(u.settings.adaptiveHeight=!0),u.viewport.height(l()),c.redrawSlider(),u.settings.onSliderLoad.call(c,u.active.index),u.initialized=!0,u.settings.responsive&&z(window).bind("resize",H),u.settings.auto&&u.settings.autoStart&&(1<h()||u.settings.autoSlideForOnePage)&&I(),u.settings.ticker&&R(),u.settings.pager&&A(u.settings.startSlide),u.settings.controls&&j(),u.settings.touchEnabled&&!u.settings.ticker&&W(),u.settings.keyboardEnabled&&!u.settings.ticker&&z(document).keydown(q)},l=function(){var t=0,e=z();if("vertical"===u.settings.mode||u.settings.adaptiveHeight)if(u.carousel){var n=1===u.settings.moveSlides?u.active.index:u.active.index*g(),e=u.children.eq(n);for(i=1;i<=u.settings.maxSlides-1;i++)e=n+i>=u.children.length?e.add(u.children.eq(i-1)):e.add(u.children.eq(n+i))}else e=u.children.eq(u.active.index);else e=u.children;return"vertical"===u.settings.mode?(e.each(function(e){t+=z(this).outerHeight()}),0<u.settings.slideMargin&&(t+=u.settings.slideMargin*(u.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return z(this).outerHeight(!1)}).get()),"border-box"===u.viewport.css("box-sizing")?t+=parseFloat(u.viewport.css("padding-top"))+parseFloat(u.viewport.css("padding-bottom"))+parseFloat(u.viewport.css("border-top-width"))+parseFloat(u.viewport.css("border-bottom-width")):"padding-box"===u.viewport.css("box-sizing")&&(t+=parseFloat(u.viewport.css("padding-top"))+parseFloat(u.viewport.css("padding-bottom"))),t},d=function(){var e="100%";return e=0<u.settings.slideWidth?"horizontal"===u.settings.mode?u.settings.maxSlides*u.settings.slideWidth+(u.settings.maxSlides-1)*u.settings.slideMargin:u.settings.slideWidth:e},f=function(){var e=u.settings.slideWidth,t=u.viewport.width();if(0===u.settings.slideWidth||u.settings.slideWidth>t&&!u.carousel||"vertical"===u.settings.mode)e=t;else if(1<u.settings.maxSlides&&"horizontal"===u.settings.mode){if(t>u.maxThreshold)return e;t<u.minThreshold?e=(t-u.settings.slideMargin*(u.settings.minSlides-1))/u.settings.minSlides:u.settings.shrinkItems&&(e=Math.floor((t+u.settings.slideMargin)/Math.ceil((t+u.settings.slideMargin)/(e+u.settings.slideMargin))-u.settings.slideMargin))}return e},p=function(){var e,t=1;return"horizontal"===u.settings.mode&&0<u.settings.slideWidth?t=u.viewport.width()<u.minThreshold?u.settings.minSlides:u.viewport.width()>u.maxThreshold?u.settings.maxSlides:(e=u.children.first().width()+u.settings.slideMargin,Math.floor((u.viewport.width()+u.settings.slideMargin)/e)):"vertical"===u.settings.mode&&(t=u.settings.minSlides),t},h=function(){var e=0,t=0,n=0;if(0<u.settings.moveSlides)if(u.settings.infiniteLoop)e=Math.ceil(u.children.length/g());else for(;t<u.children.length;)++e,t=n+p(),n+=u.settings.moveSlides<=p()?u.settings.moveSlides:p();else e=Math.ceil(u.children.length/p());return e},g=function(){return 0<u.settings.moveSlides&&u.settings.moveSlides<=p()?u.settings.moveSlides:p()},v=function(){var e,t;u.children.length>u.settings.maxSlides&&u.active.last&&!u.settings.infiniteLoop?"horizontal"===u.settings.mode?(e=(t=u.children.last()).position(),m(-(e.left-(u.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===u.settings.mode&&(t=u.children.length-u.settings.minSlides,e=u.children.eq(t).position(),m(-e.top,"reset",0)):(e=u.children.eq(u.active.index*g()).position(),u.active.index===h()-1&&(u.active.last=!0),void 0!==e&&("horizontal"===u.settings.mode?m(-e.left,"reset",0):"vertical"===u.settings.mode&&m(-e.top,"reset",0)))},m=function t(e,n,r,i){var o;u.usingCSS?(o="vertical"===u.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",c.css("-"+u.cssPrefix+"-transition-duration",r/1e3+"s"),"slide"===n?(c.css(u.animProp,o),0!==r?c.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){z(e.target).is(c)&&(c.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),D())}):D()):"reset"===n?c.css(u.animProp,o):"ticker"===n&&(c.css("-"+u.cssPrefix+"-transition-timing-function","linear"),c.css(u.animProp,o),0!==r?c.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){z(e.target).is(c)&&(c.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),t(i.resetValue,"reset",0),L())}):(t(i.resetValue,"reset",0),L()))):((o={})[u.animProp]=e,"slide"===n?c.animate(o,r,u.settings.easing,function(){D()}):"reset"===n?c.css(u.animProp,e):"ticker"===n&&c.animate(o,r,"linear",function(){t(i.resetValue,"reset",0),L()}))},y=function(){for(var e="",t="",n=h(),r=0;r<n;r++)t="",u.settings.buildPager&&z.isFunction(u.settings.buildPager)||u.settings.pagerCustom?(t=u.settings.buildPager(r),u.pagerEl.addClass("bx-custom-pager")):(t=r+1,u.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+r+'" class="bx-pager-link">'+t+"</a></div>";u.pagerEl.html(e)},x=function(){u.settings.pagerCustom?u.pagerEl=z(u.settings.pagerCustom):(u.pagerEl=z('<div class="bx-pager" />'),u.settings.pagerSelector?z(u.settings.pagerSelector).html(u.pagerEl):u.controls.el.addClass("bx-has-pager").append(u.pagerEl),y()),u.pagerEl.on("click touchend","a",_)},b=function(){u.controls.next=z('<a class="bx-next" href="">'+u.settings.nextText+"</a>"),u.controls.prev=z('<a class="bx-prev" href="">'+u.settings.prevText+"</a>"),u.controls.next.bind("click touchend",C),u.controls.prev.bind("click touchend",S),u.settings.nextSelector&&z(u.settings.nextSelector).append(u.controls.next),u.settings.prevSelector&&z(u.settings.prevSelector).append(u.controls.prev),u.settings.nextSelector||u.settings.prevSelector||(u.controls.directionEl=z('<div class="bx-controls-direction" />'),u.controls.directionEl.append(u.controls.prev).append(u.controls.next),u.controls.el.addClass("bx-has-controls-direction").append(u.controls.directionEl))},w=function(){u.controls.start=z('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+u.settings.startText+"</a></div>"),u.controls.stop=z('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+u.settings.stopText+"</a></div>"),u.controls.autoEl=z('<div class="bx-controls-auto" />'),u.controls.autoEl.on("click",".bx-start",E),u.controls.autoEl.on("click",".bx-stop",k),u.settings.autoControlsCombine?u.controls.autoEl.append(u.controls.start):u.controls.autoEl.append(u.controls.start).append(u.controls.stop),u.settings.autoControlsSelector?z(u.settings.autoControlsSelector).html(u.controls.autoEl):u.controls.el.addClass("bx-has-controls-auto").append(u.controls.autoEl),N(u.settings.autoStart?"stop":"start")},T=function(){u.children.each(function(e){var t=z(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&z(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},C=function(e){e.preventDefault(),u.controls.el.hasClass("disabled")||(u.settings.auto&&u.settings.stopAutoOnClick&&c.stopAuto(),c.goToNextSlide())},S=function(e){e.preventDefault(),u.controls.el.hasClass("disabled")||(u.settings.auto&&u.settings.stopAutoOnClick&&c.stopAuto(),c.goToPrevSlide())},E=function(e){c.startAuto(),e.preventDefault()},k=function(e){c.stopAuto(),e.preventDefault()},_=function(e){e.preventDefault(),u.controls.el.hasClass("disabled")||(u.settings.auto&&u.settings.stopAutoOnClick&&c.stopAuto(),void 0!==(e=z(e.currentTarget)).attr("data-slide-index")&&(e=parseInt(e.attr("data-slide-index")))!==u.active.index&&c.goToSlide(e))},A=function(n){var e=u.children.length;"short"===u.settings.pagerType?(1<u.settings.maxSlides&&(e=Math.ceil(u.children.length/u.settings.maxSlides)),u.pagerEl.html(n+1+u.settings.pagerShortSeparator+e)):(u.pagerEl.find("a").removeClass("active"),u.pagerEl.each(function(e,t){z(t).find("a").eq(n).addClass("active")}))},D=function(){var e;u.settings.infiniteLoop&&(e="",0===u.active.index?e=u.children.eq(0).position():u.active.index===h()-1&&u.carousel?e=u.children.eq((h()-1)*g()).position():u.active.index===u.children.length-1&&(e=u.children.eq(u.children.length-1).position()),e&&("horizontal"===u.settings.mode?m(-e.left,"reset",0):"vertical"===u.settings.mode&&m(-e.top,"reset",0))),u.working=!1,u.settings.onSlideAfter.call(c,u.children.eq(u.active.index),u.oldIndex,u.active.index)},N=function(e){u.settings.autoControlsCombine?u.controls.autoEl.html(u.controls[e]):(u.controls.autoEl.find("a").removeClass("active"),u.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},j=function(){1===h()?(u.controls.prev.addClass("disabled"),u.controls.next.addClass("disabled")):!u.settings.infiniteLoop&&u.settings.hideControlOnEnd&&(0===u.active.index?(u.controls.prev.addClass("disabled"),u.controls.next):u.active.index===h()-1?(u.controls.next.addClass("disabled"),u.controls.prev):(u.controls.prev.removeClass("disabled"),u.controls.next)).removeClass("disabled")},I=function(){0<u.settings.autoDelay?setTimeout(c.startAuto,u.settings.autoDelay):(c.startAuto(),z(window).focus(function(){c.startAuto()}).blur(function(){c.stopAuto()})),u.settings.autoHover&&c.hover(function(){u.interval&&(c.stopAuto(!0),u.autoPaused=!0)},function(){u.autoPaused&&(c.startAuto(!0),u.autoPaused=null)})},R=function(){var e,t,n,r,i,o,s,a,l=0;"next"===u.settings.autoDirection?c.append(u.children.clone().addClass("bx-clone")):(c.prepend(u.children.clone().addClass("bx-clone")),e=u.children.first().position(),l="horizontal"===u.settings.mode?-e.left:-e.top),m(l,"reset",0),u.settings.pager=!1,u.settings.controls=!1,u.settings.autoControls=!1,u.settings.tickerHover&&(u.usingCSS?(r="horizontal"===u.settings.mode?4:5,u.viewport.hover(function(){t=c.css("-"+u.cssPrefix+"-transform"),n=parseFloat(t.split(",")[r]),m(n,"reset",0)},function(){a=0,u.children.each(function(e){a+="horizontal"===u.settings.mode?z(this).outerWidth(!0):z(this).outerHeight(!0)}),i=u.settings.speed/a,o="horizontal"===u.settings.mode?"left":"top",s=i*(a-Math.abs(parseInt(n))),L(s)})):u.viewport.hover(function(){c.stop()},function(){a=0,u.children.each(function(e){a+="horizontal"===u.settings.mode?z(this).outerWidth(!0):z(this).outerHeight(!0)}),i=u.settings.speed/a,o="horizontal"===u.settings.mode?"left":"top",s=i*(a-Math.abs(parseInt(c.css(o)))),L(s)})),L()},L=function(e){var e=e||u.settings.speed,t={left:0,top:0},n={left:0,top:0};"next"===u.settings.autoDirection?t=c.find(".bx-clone").first().position():n=u.children.first().position(),t="horizontal"===u.settings.mode?-t.left:-t.top,n="horizontal"===u.settings.mode?-n.left:-n.top,m(t,"ticker",e,{resetValue:n})},$=function(e){var t=z(window),n={top:t.scrollTop(),left:t.scrollLeft()},r=e.offset();return n.right=n.left+t.width(),n.bottom=n.top+t.height(),r.right=r.left+e.outerWidth(),r.bottom=r.top+e.outerHeight(),!(n.right<r.left||n.left>r.right||n.bottom<r.top||n.top>r.bottom)},q=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&$(c))return 39===e.keyCode?(C(e),!1):37===e.keyCode?(S(e),!1):void 0},W=function(){u.touch={start:{x:0,y:0},end:{x:0,y:0}},u.viewport.bind("touchstart MSPointerDown pointerdown",F),u.viewport.on("click",".bxslider a",function(e){u.viewport.hasClass("click-disabled")&&(e.preventDefault(),u.viewport.removeClass("click-disabled"))})},F=function(e){var t;u.controls.el.addClass("disabled"),u.working?(e.preventDefault(),u.controls.el.removeClass("disabled")):(u.touch.originalPos=c.position(),t=void 0!==(e=e.originalEvent).changedTouches?e.changedTouches:[e],u.touch.start.x=t[0].pageX,u.touch.start.y=t[0].pageY,u.viewport.get(0).setPointerCapture&&(u.pointerId=e.pointerId,u.viewport.get(0).setPointerCapture(u.pointerId)),u.viewport.bind("touchmove MSPointerMove pointermove",P),u.viewport.bind("touchend MSPointerUp pointerup",M),u.viewport.bind("MSPointerCancel pointercancel",B))},B=function e(t){m(u.touch.originalPos.left,"reset",0),u.controls.el.removeClass("disabled"),u.viewport.unbind("MSPointerCancel pointercancel",e),u.viewport.unbind("touchmove MSPointerMove pointermove",P),u.viewport.unbind("touchend MSPointerUp pointerup",M),u.viewport.get(0).releasePointerCapture&&u.viewport.get(0).releasePointerCapture(u.pointerId)},P=function(e){var t=e.originalEvent,t=void 0!==t.changedTouches?t.changedTouches:[t],n=Math.abs(t[0].pageX-u.touch.start.x),r=Math.abs(t[0].pageY-u.touch.start.y),i=0,o=0;(r<3*n&&u.settings.preventDefaultSwipeX||n<3*r&&u.settings.preventDefaultSwipeY)&&e.preventDefault(),"fade"!==u.settings.mode&&u.settings.oneToOneTouch&&(i="horizontal"===u.settings.mode?(o=t[0].pageX-u.touch.start.x,u.touch.originalPos.left+o):(o=t[0].pageY-u.touch.start.y,u.touch.originalPos.top+o),m(i,"reset",0))},M=function e(t){u.viewport.unbind("touchmove MSPointerMove pointermove",P),u.controls.el.removeClass("disabled");var t=t.originalEvent,t=void 0!==t.changedTouches?t.changedTouches:[t],n=0,r=0;u.touch.end.x=t[0].pageX,u.touch.end.y=t[0].pageY,"fade"===u.settings.mode?(r=Math.abs(u.touch.start.x-u.touch.end.x))>=u.settings.swipeThreshold&&(u.touch.start.x>u.touch.end.x?c.goToNextSlide():c.goToPrevSlide(),c.stopAuto()):(n="horizontal"===u.settings.mode?(r=u.touch.end.x-u.touch.start.x,u.touch.originalPos.left):(r=u.touch.end.y-u.touch.start.y,u.touch.originalPos.top),(u.settings.infiniteLoop||!(0===u.active.index&&0<r||u.active.last&&r<0))&&Math.abs(r)>=u.settings.swipeThreshold?(r<0?c.goToNextSlide():c.goToPrevSlide(),c.stopAuto()):m(n,"reset",200)),u.viewport.unbind("touchend MSPointerUp pointerup",e),u.viewport.get(0).releasePointerCapture&&u.viewport.get(0).releasePointerCapture(u.pointerId)},H=function e(t){var n,r;u.initialized&&(u.working?window.setTimeout(e,10):(n=z(window).width(),r=z(window).height(),o===n&&s===r||(o=n,s=r,c.redrawSlider(),u.settings.onSliderResize.call(c,u.active.index))))},O=function(e){var t=p();u.settings.ariaHidden&&!u.settings.ticker&&(u.children.attr("aria-hidden","true"),u.children.slice(e,e+t).attr("aria-hidden","false"))},c.goToSlide=function(e,t){var n,r=!0,i=0,o={left:0,top:0},s=null;u.oldIndex=u.active.index,u.active.index=(n=e)<0?u.settings.infiniteLoop?h()-1:u.active.index:n>=h()?u.settings.infiniteLoop?0:u.active.index:n,u.working||u.active.index===u.oldIndex||(u.working=!0,void 0===(r=u.settings.onSlideBefore.call(c,u.children.eq(u.active.index),u.oldIndex,u.active.index))||r?("next"===t?u.settings.onSlideNext.call(c,u.children.eq(u.active.index),u.oldIndex,u.active.index)||(r=!1):"prev"!==t||u.settings.onSlidePrev.call(c,u.children.eq(u.active.index),u.oldIndex,u.active.index)||(r=!1),u.active.last=u.active.index>=h()-1,(u.settings.pager||u.settings.pagerCustom)&&A(u.active.index),u.settings.controls&&j(),"fade"===u.settings.mode?(u.settings.adaptiveHeight&&u.viewport.height()!==l()&&u.viewport.animate({height:l()},u.settings.adaptiveHeightSpeed),u.children.filter(":visible").fadeOut(u.settings.speed).css({zIndex:0}),u.children.eq(u.active.index).css("zIndex",u.settings.slideZIndex+1).fadeIn(u.settings.speed,function(){z(this).css("zIndex",u.settings.slideZIndex),D()})):(u.settings.adaptiveHeight&&u.viewport.height()!==l()&&u.viewport.animate({height:l()},u.settings.adaptiveHeightSpeed),!u.settings.infiniteLoop&&u.carousel&&u.active.last?"horizontal"===u.settings.mode?(o=(s=u.children.eq(u.children.length-1)).position(),i=u.viewport.width()-s.outerWidth()):(n=u.children.length-u.settings.minSlides,o=u.children.eq(n).position()):u.carousel&&u.active.last&&"prev"===t?(r=1===u.settings.moveSlides?u.settings.maxSlides-g():(h()-1)*g()-(u.children.length-u.settings.maxSlides),o=(s=c.children(".bx-clone").eq(r)).position()):"next"===t&&0===u.active.index?(o=c.find("> .bx-clone").eq(u.settings.maxSlides).position(),u.active.last=!1):0<=e&&(n=e*parseInt(g()),o=u.children.eq(n).position()),void 0!==o?(r="horizontal"===u.settings.mode?-(o.left-i):-o.top,m(r,"slide",u.settings.speed)):u.working=!1),u.settings.ariaHidden&&O(u.active.index*g())):(u.active.index=u.oldIndex,u.working=!1))},c.goToNextSlide=function(){var e;!u.settings.infiniteLoop&&u.active.last||(e=parseInt(u.active.index)+1,c.goToSlide(e,"next"))},c.goToPrevSlide=function(){var e;!u.settings.infiniteLoop&&0===u.active.index||(e=parseInt(u.active.index)-1,c.goToSlide(e,"prev"))},c.startAuto=function(e){u.interval||(u.interval=setInterval(function(){"next"===u.settings.autoDirection?c.goToNextSlide():c.goToPrevSlide()},u.settings.pause),u.settings.autoControls&&!0!==e&&N("stop"))},c.stopAuto=function(e){u.interval&&(clearInterval(u.interval),u.interval=null,u.settings.autoControls&&!0!==e&&N("start"))},c.getCurrentSlide=function(){return u.active.index},c.getCurrentSlideElement=function(){return u.children.eq(u.active.index)},c.getSlideElement=function(e){return u.children.eq(e)},c.getSlideCount=function(){return u.children.length},c.isWorking=function(){return u.working},c.redrawSlider=function(){u.children.add(c.find(".bx-clone")).outerWidth(f()),u.viewport.css("height",l()),u.settings.ticker||v(),u.active.last&&(u.active.index=h()-1),u.active.index>=h()&&(u.active.last=!0),u.settings.pager&&!u.settings.pagerCustom&&(y(),A(u.active.index)),u.settings.ariaHidden&&O(u.active.index*g())},c.destroySlider=function(){u.initialized&&(u.initialized=!1,z(".bx-clone",this).remove(),u.children.each(function(){void 0!==z(this).data("origStyle")?z(this).attr("style",z(this).data("origStyle")):z(this).removeAttr("style")}),void 0!==z(this).data("origStyle")?this.attr("style",z(this).data("origStyle")):z(this).removeAttr("style"),z(this).unwrap().unwrap(),u.controls.el&&u.controls.el.remove(),u.controls.next&&u.controls.next.remove(),u.controls.prev&&u.controls.prev.remove(),u.pagerEl&&u.settings.controls&&!u.settings.pagerCustom&&u.pagerEl.remove(),z(".bx-caption",this).remove(),u.controls.autoEl&&u.controls.autoEl.remove(),clearInterval(u.interval),u.settings.responsive&&z(window).unbind("resize",H),u.settings.keyboardEnabled&&z(document).unbind("keydown",q),z(this).removeData("bxSlider"))},c.reloadSlider=function(e){void 0!==e&&(t=e),c.destroySlider(),n(),z(c).data("bxSlider",this)},n(),z(c).data("bxSlider",this),this))}}(jQuery),!function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):e("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function(ae){function r(O,l){function e(e){if(!(!0===A.data(qe+"_intouch")||0<ae(e.target).closest(l.excludedElements,A).length)){var t,n,r,i=e.originalEvent||e;if(!i.pointerType||"mouse"!=i.pointerType||0!=l.fallbackToMouseEvents)return r=(n=i.touches)?n[0]:i,D=Ee,n?N=n.length:!1!==l.preventDefaultEvents&&e.preventDefault(),E=x=y=null,C=1,S=T=w=b=m=0,(e={})[le]=a(le),e[ue]=a(ue),e[ce]=a(ce),e[de]=a(de),k=e,J(),f(0,r),!n||N===l.fingers||l.fingers===Ce||c()?(oe=p(),2==N&&(f(1,n[1]),w=T=te(j[0].start,j[1].start)),(l.swipeStatus||l.pinchStatus)&&(t=u(i,D))):t=!1,!1===t?(u(i,D=De),t):(l.hold&&(H=setTimeout(ae.proxy(function(){A.trigger("hold",[i.target]),l.hold&&(t=l.hold.call(A,i,i.target))},this),l.longTapThreshold)),s(!0),null)}}function t(e){var t=e.originalEvent||e;if(D!==Ae&&D!==De&&!d()){var n,r=t.touches,i=K(r?r[0]:t);if(L=p(),r&&(N=r.length),l.hold&&clearTimeout(H),D=ke,2==N&&(0==w?(f(1,r[1]),w=T=te(j[0].start,j[1].start)):(K(r[1]),T=te(j[0].end,j[1].end),j[0].end,j[1].end,E=C<1?pe:fe),C=(T/w*1).toFixed(2),S=Math.abs(w-T)),N===l.fingers||l.fingers===Ce||!r||c()){y=ne(i.start,i.end),x=ne(i.last,i.end);var o,s=e,r=x;if(!1!==l.preventDefaultEvents)if(l.allowPageScroll===he)s.preventDefault();else{var a=l.allowPageScroll===ge;switch(r){case le:(l.swipeLeft&&a||!a&&l.allowPageScroll!=we)&&s.preventDefault();break;case ue:(l.swipeRight&&a||!a&&l.allowPageScroll!=we)&&s.preventDefault();break;case ce:(l.swipeUp&&a||!a&&l.allowPageScroll!=Te)&&s.preventDefault();break;case de:(l.swipeDown&&a||!a&&l.allowPageScroll!=Te)&&s.preventDefault()}}e=i.start,r=i.end,m=Math.round(Math.sqrt(Math.pow(r.x-e.x,2)+Math.pow(r.y-e.y,2))),b=ee(),r=m,(e=y)!=he&&(r=Math.max(r,Z(e)),k[e].distance=r),n=u(t,D),l.triggerOnTouchEnd&&!l.triggerOnTouchLeave||(e=!0,l.triggerOnTouchLeave&&(o={left:(o=(r=ae(r=this)).offset()).left,right:o.left+r.outerWidth(),top:o.top,bottom:o.top+r.outerHeight()},r=i.end,i=o,e=r.x>i.left&&r.x<i.right&&r.y>i.top&&r.y<i.bottom),!l.triggerOnTouchEnd&&e?D=R(ke):l.triggerOnTouchLeave&&!e&&(D=R(Ae)),D!=De&&D!=Ae||u(t,D))}else u(t,D=De);!1===n&&u(t,D=De)}}function n(e){var t,n=e.originalEvent||e,r=n.touches;if(r){if(r.length&&!d())return t=n,q=p(),se=t.touches.length+1,!0;if(r.length&&d())return!0}return d()&&(N=se),L=p(),b=ee(),W()||!$()?u(n,D=De):l.triggerOnTouchEnd||!1===l.triggerOnTouchEnd&&D===ke?(!1!==l.preventDefaultEvents&&e.preventDefault(),u(n,D=Ae)):!l.triggerOnTouchEnd&&Y()?o(n,D=Ae,ye):D===ke&&u(n,D=De),s(!1),null}function i(){T=w=oe=L=N=0,J(),s(!(C=1))}function _(e){e=e.originalEvent||e;l.triggerOnTouchLeave&&u(e,D=R(Ae))}function I(){A.unbind(h,e),A.unbind(v,i),A.unbind(re,t),A.unbind(ie,n),g&&A.unbind(g,_),s(!1)}function R(e){var t=e,n=F(),r=$(),i=W();return!n||i?t=De:!r||e!=ke||l.triggerOnTouchEnd&&!l.triggerOnTouchLeave?!r&&e==Ae&&l.triggerOnTouchLeave&&(t=De):t=Ae,t}function u(e,t){var n,r=e.touches;return(z()&&U()||U())&&(n=o(e,t,ve)),(B()&&c()||c())&&!1!==n&&(n=o(e,t,me)),G()&&Q()&&!1!==n?n=o(e,t,xe):b>l.longTapThreshold&&m<Se&&l.longTap&&!1!==n?n=o(e,t,be):1!==N&&Ne||!(isNaN(m)||m<l.threshold)||!Y()||!1===n||(n=o(e,t,ye)),t===De&&i(),t!==Ae||r&&r.length||i(),n}function o(e,t,n){var r;if(n==ve){if(A.trigger("swipeStatus",[t,y||null,m||0,b||0,N,j,x]),l.swipeStatus&&!1===(r=l.swipeStatus.call(A,e,t,y||null,m||0,b||0,N,j,x)))return!1;if(t==Ae&&z()){if(clearTimeout(M),clearTimeout(H),A.trigger("swipe",[y,m,b,N,j,x]),l.swipe&&!1===(r=l.swipe.call(A,e,y,m,b,N,j,x)))return!1;switch(y){case le:A.trigger("swipeLeft",[y,m,b,N,j,x]),l.swipeLeft&&(r=l.swipeLeft.call(A,e,y,m,b,N,j,x));break;case ue:A.trigger("swipeRight",[y,m,b,N,j,x]),l.swipeRight&&(r=l.swipeRight.call(A,e,y,m,b,N,j,x));break;case ce:A.trigger("swipeUp",[y,m,b,N,j,x]),l.swipeUp&&(r=l.swipeUp.call(A,e,y,m,b,N,j,x));break;case de:A.trigger("swipeDown",[y,m,b,N,j,x]),l.swipeDown&&(r=l.swipeDown.call(A,e,y,m,b,N,j,x))}}}if(n==me){if(A.trigger("pinchStatus",[t,E||null,S||0,b||0,N,C,j]),l.pinchStatus&&!1===(r=l.pinchStatus.call(A,e,t,E||null,S||0,b||0,N,C,j)))return!1;if(t==Ae&&B())switch(E){case fe:A.trigger("pinchIn",[E||null,S||0,b||0,N,C,j]),l.pinchIn&&(r=l.pinchIn.call(A,e,E||null,S||0,b||0,N,C,j));break;case pe:A.trigger("pinchOut",[E||null,S||0,b||0,N,C,j]),l.pinchOut&&(r=l.pinchOut.call(A,e,E||null,S||0,b||0,N,C,j))}}return n==ye?t!==De&&t!==Ae||(clearTimeout(M),clearTimeout(H),Q()&&!G()?(P=p(),M=setTimeout(ae.proxy(function(){P=null,A.trigger("tap",[e.target]),l.tap&&(r=l.tap.call(A,e,e.target))},this),l.doubleTapThreshold)):(P=null,A.trigger("tap",[e.target]),l.tap&&(r=l.tap.call(A,e,e.target)))):n==xe?t!==De&&t!==Ae||(clearTimeout(M),clearTimeout(H),P=null,A.trigger("doubletap",[e.target]),l.doubleTap&&(r=l.doubleTap.call(A,e,e.target))):n!=be||t!==De&&t!==Ae||(clearTimeout(M),P=null,A.trigger("longtap",[e.target]),l.longTap&&(r=l.longTap.call(A,e,e.target))),r}function $(){var e=!0;return e=null!==l.threshold?m>=l.threshold:e}function W(){var e=!1;return e=null!==l.cancelThreshold&&null!==y?Z(y)-m>=l.cancelThreshold:e}function F(){return!(l.maxTimeThreshold&&b>=l.maxTimeThreshold)}function B(){var e=X(),t=V(),n=null===l.pinchThreshold||S>=l.pinchThreshold;return e&&t&&n}function c(){return l.pinchStatus||l.pinchIn||l.pinchOut}function z(){var e=F(),t=$(),n=X(),r=V();return!W()&&r&&n&&t&&e}function U(){return l.swipe||l.swipeStatus||l.swipeLeft||l.swipeRight||l.swipeUp||l.swipeDown}function X(){return N===l.fingers||l.fingers===Ce||!Ne}function V(){return 0!==j[0].end.x}function Y(){return l.tap}function Q(){return!!l.doubleTap}function G(){var e;return null!=P&&(e=p(),Q()&&e-P<=l.doubleTapThreshold)}function J(){se=q=0}function d(){var e=!1;return e=q&&p()-q<=l.fingerReleaseThreshold?!0:e}function s(e){A&&(!0===e?(A.bind(re,t),A.bind(ie,n),g&&A.bind(g,_)):(A.unbind(re,t,!1),A.unbind(ie,n,!1),g&&A.unbind(g,_,!1)),A.data(qe+"_intouch",!0===e))}function f(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,j[e]=n}function K(e){var t=void 0!==e.identifier?e.identifier:0,n=j[t]||null;return(n=null===n?f(t,e):n).last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function Z(e){if(k[e])return k[e].distance}function a(e){return{direction:e,distance:0}}function ee(){return L-oe}function te(e,t){var n=Math.abs(e.x-t.x),e=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+e*e))}function ne(e,t){var n,r;return n=t,(r=e).x==n.x&&r.y==n.y?he:(r=t,t=(n=e).x-r.x,r=r.y-e.y,n=Math.atan2(r,t),r=(r=Math.round(180*n/Math.PI))<0?360-Math.abs(r):r,r<=45&&0<=r||r<=360&&315<=r?le:135<=r&&r<=225?ue:45<r&&r<135?de:ce)}function p(){return(new Date).getTime()}var l=ae.extend({},l),r=Ne||Le||!l.fallbackToMouseEvents,h=r?Le?je?"MSPointerDown":"pointerdown":"touchstart":"mousedown",re=r?Le?je?"MSPointerMove":"pointermove":"touchmove":"mousemove",ie=r?Le?je?"MSPointerUp":"pointerup":"touchend":"mouseup",g=!r||Le?"mouseleave":null,v=Le?je?"MSPointerCancel":"pointercancel":"touchcancel",m=0,y=null,x=null,b=0,w=0,T=0,C=1,S=0,E=0,k=null,A=ae(O),D="start",N=0,j={},oe=0,L=0,q=0,se=0,P=0,M=null,H=null;try{A.bind(h,e),A.bind(v,i)}catch(e){ae.error("events not supported "+h+","+v+" on jQuery.swipe")}this.enable=function(){return this.disable(),A.bind(h,e),A.bind(v,i),A},this.disable=function(){return I(),A},this.destroy=function(){I(),A.data(qe,null),A=null},this.option=function(e,t){if("object"==_typeof(e))l=ae.extend(l,e);else if(void 0!==l[e]){if(void 0===t)return l[e];l[e]=t}else{if(!e)return l;ae.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}var le="left",ue="right",ce="up",de="down",fe="in",pe="out",he="none",ge="auto",ve="swipe",me="pinch",ye="tap",xe="doubletap",be="longtap",we="horizontal",Te="vertical",Ce="all",Se=10,Ee="start",ke="move",Ae="end",De="cancel",Ne="ontouchstart"in window,je=window.navigator.msPointerEnabled&&!window.PointerEvent&&!Ne,Le=(window.PointerEvent||window.navigator.msPointerEnabled)&&!Ne,qe="TouchSwipe";ae.fn.swipe=function(e){var t=ae(this),n=t.data(qe);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));ae.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"==_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!=_typeof(e)&&e))return function(n){return!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=he),void 0!==n.click&&void 0===n.tap&&(n.tap=n.click),n=n||{},n=ae.extend({},ae.fn.swipe.defaults,n),this.each(function(){var e,t=ae(this);t.data(qe)||(e=new r(this,n),t.data(qe,e))})}.apply(this,arguments);return t},ae.fn.swipe.version="1.6.18",ae.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},ae.fn.swipe.phases={PHASE_START:Ee,PHASE_MOVE:ke,PHASE_END:Ae,PHASE_CANCEL:De},ae.fn.swipe.directions={LEFT:le,RIGHT:ue,UP:ce,DOWN:de,IN:fe,OUT:pe},ae.fn.swipe.pageScroll={NONE:he,HORIZONTAL:we,VERTICAL:Te,AUTO:ge},ae.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:Ce}}),!function(e,t){"object"==("undefined"==typeof module?"undefined":_typeof(module))&&"object"==_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(e.document)return t(e);throw new Error("jQuery requires a window with a document")}:t(e)}("undefined"!=typeof window?window:void 0,function(T,O){function y(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}function g(e){return null!=e&&e===e.window}var t=[],_=Object.getPrototypeOf,a=t.slice,I=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},R=t.push,$=t.indexOf,W={},F=W.toString,B=W.hasOwnProperty,z=B.toString,U=z.call(Object),v={},C=T.document,X={type:!0,src:!0,nonce:!0,noModule:!0};function V(e,t,n){var r,i,o=(n=n||C).createElement("script");if(o.text=e,t)for(r in X)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function h(e){return null==e?e+"":"object"==_typeof(e)||"function"==typeof e?W[F.call(e)]||"object":_typeof(e)}var S=function e(t,n){return new e.fn.init(t,n)};function Y(e){var t=!!e&&"length"in e&&e.length,n=h(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:"3.6.0",constructor:S,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=S.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return S.each(this,e)},map:function(n){return this.pushStack(S.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:R,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,n,r,i,o=arguments[0]||{},s=1,a=arguments.length,l=!1;for("boolean"==typeof o&&(l=o,o=arguments[s]||{},s++),"object"==_typeof(o)||y(o)||(o={}),s===a&&(o=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(t in e)n=e[t],"__proto__"!==t&&o!==n&&(l&&n&&(S.isPlainObject(n)||(r=Array.isArray(n)))?(i=o[t],i=r&&!Array.isArray(i)?[]:r||S.isPlainObject(i)?i:{},r=!1,o[t]=S.extend(l,i,n)):void 0!==n&&(o[t]=n));return o},S.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==F.call(e)||(e=_(e))&&("function"!=typeof(e=B.call(e,"constructor")&&e.constructor)||z.call(e)!==U))},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){V(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(Y(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(Y(Object(e))?S.merge(t,"string"==typeof e?[e]:e):R.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:$.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!=s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(Y(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return I(s)},guid:1,support:v}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){W["[object "+t+"]"]=t.toLowerCase()});function r(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&S(e).is(n))break;r.push(e)}return r}function Q(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var e=function(O){function d(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function _(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function I(){T()}var e,f,b,o,R,p,$,W,w,l,u,T,C,n,S,h,r,i,g,E="sizzle"+ +new Date,c=O.document,k=0,F=0,B=L(),z=L(),U=L(),v=L(),X=function(e,t){return e===t&&(u=!0),0},V={}.hasOwnProperty,t=[],Y=t.pop,Q=t.push,A=t.push,G=t.slice,y=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",s="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",K="\\["+s+"*("+a+")(?:"+s+"*([*^$|!~]?=)"+s+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+s+"*\\]",Z=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+K+")*)|.*)\\)|)",ee=new RegExp(s+"+","g"),m=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g"),te=new RegExp("^"+s+"*,"+s+"*"),ne=new RegExp("^"+s+"*([>+~]|"+s+")"+s+"*"),re=new RegExp(s+"|>"),ie=new RegExp(Z),oe=new RegExp("^"+a+"$"),x={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+K),PSEUDO:new RegExp("^"+Z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+s+"*(even|odd|(([+-]|)(\\d*)n|)"+s+"*(?:([+-]|)"+s+"*(\\d+)|))"+s+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+s+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+s+"*((?:-\\d)?\\d*)"+s+"*\\)|)(?=[^-]|$)","i")},se=/HTML$/i,ae=/^(?:input|select|textarea|button)$/i,le=/^h\d$/i,D=/^[^{]+\{\s*\[native \w/,ue=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ce=/[+~]/,N=new RegExp("\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\([^\\r\\n\\f])","g"),de=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,fe=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{A.apply(t=G.call(c.childNodes),c.childNodes),t[c.childNodes.length].nodeType}catch(e){A={apply:t.length?function(e,t){Q.apply(e,G.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function j(e,t,n,r){var i,o,s,a,l,u,c=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!r&&(T(t),t=t||C,S)){if(11!==d&&(a=ue.exec(e)))if(i=a[1]){if(9===d){if(!(u=t.getElementById(i)))return n;if(u.id===i)return n.push(u),n}else if(c&&(u=c.getElementById(i))&&g(t,u)&&u.id===i)return n.push(u),n}else{if(a[2])return A.apply(n,t.getElementsByTagName(e)),n;if((i=a[3])&&f.getElementsByClassName&&t.getElementsByClassName)return A.apply(n,t.getElementsByClassName(i)),n}if(f.qsa&&!v[e+" "]&&(!h||!h.test(e))&&(1!==d||"object"!==t.nodeName.toLowerCase())){if(u=e,c=t,1===d&&(re.test(e)||ne.test(e))){for((c=ce.test(e)&&ve(t.parentNode)||t)===t&&f.scope||((s=t.getAttribute("id"))?s=s.replace(de,_):t.setAttribute("id",s=E)),o=(l=p(e)).length;o--;)l[o]=(s?"#"+s:":scope")+" "+H(l[o]);u=l.join(",")}try{return A.apply(n,c.querySelectorAll(u)),n}catch(t){v(e,!0)}finally{s===E&&t.removeAttribute("id")}}}return W(e.replace(m,"$1"),t,n,r)}function L(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function q(e){return e[E]=!0,e}function P(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function pe(e,t){for(var n=e.split("|"),r=n.length;r--;)b.attrHandle[n[r]]=t}function he(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&fe(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function M(s){return q(function(o){return o=+o,q(function(e,t){for(var n,r=s([],e.length,o),i=r.length;i--;)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=j.support={},R=j.isXML=function(e){var t=e&&e.namespaceURI,e=e&&(e.ownerDocument||e).documentElement;return!se.test(t||e&&e.nodeName||"HTML")},T=j.setDocument=function(e){var e=e?e.ownerDocument||e:c;return e!=C&&9===e.nodeType&&e.documentElement&&(n=(C=e).documentElement,S=!R(C),c!=C&&(e=C.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",I,!1):e.attachEvent&&e.attachEvent("onunload",I)),f.scope=P(function(e){return n.appendChild(e).appendChild(C.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=P(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=P(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=D.test(C.getElementsByClassName),f.getById=P(function(e){return n.appendChild(e).id=E,!C.getElementsByName||!C.getElementsByName(E).length}),f.getById?(b.filter.ID=function(e){var t=e.replace(N,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&S)return(t=t.getElementById(e))?[t]:[]}):(b.filter.ID=function(e){var t=e.replace(N,d);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},b.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},r=[],h=[],(f.qsa=D.test(C.querySelectorAll))&&(P(function(e){var t;n.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+s+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\["+s+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+E+"-]").length||h.push("~="),(t=C.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\["+s+"*name"+s+"*="+s+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")}),P(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name"+s+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),n.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(f.matchesSelector=D.test(i=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&P(function(e){f.disconnectedMatch=i.call(e,"*"),i.call(e,"[s!='']:x"),r.push("!=",Z)}),h=h.length&&new RegExp(h.join("|")),r=r.length&&new RegExp(r.join("|")),e=D.test(n.compareDocumentPosition),g=e||D.test(n.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},X=e?function(e,t){var n;return e===t?(u=!0,0):!e.compareDocumentPosition-!t.compareDocumentPosition||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==C||e.ownerDocument==c&&g(c,e)?-1:t==C||t.ownerDocument==c&&g(c,t)?1:l?y(l,e)-y(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e==C?-1:t==C?1:i?-1:o?1:l?y(l,e)-y(l,t):0;if(i===o)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?he(s[r],a[r]):s[r]==c?-1:a[r]==c?1:0}),C},j.matches=function(e,t){return j(e,null,null,t)},j.matchesSelector=function(e,t){if(T(e),f.matchesSelector&&S&&!v[t+" "]&&(!r||!r.test(t))&&(!h||!h.test(t)))try{var n=i.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){v(t,!0)}return 0<j(t,C,null,[e]).length},j.contains=function(e,t){return(e.ownerDocument||e)!=C&&T(e),g(e,t)},j.attr=function(e,t){(e.ownerDocument||e)!=C&&T(e);var n=b.attrHandle[t.toLowerCase()],n=n&&V.call(b.attrHandle,t.toLowerCase())?n(e,t,!S):void 0;return void 0!==n?n:f.attributes||!S?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},j.escape=function(e){return(e+"").replace(de,_)},j.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},j.uniqueSort=function(e){var t,n=[],r=0,i=0;if(u=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(X),u){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return l=null,e},o=j.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(b=j.selectors={cacheLength:50,createPseudo:q,match:x,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(N,d),e[3]=(e[3]||e[4]||e[5]||"").replace(N,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||j.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&j.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return x.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ie.test(n)&&(t=p(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(N,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=B[e+" "];return t||(t=new RegExp("(^|"+s+")"+e+"("+s+"|$)"))&&B(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(e){e=j.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===r:"!="===n?e!==r:"^="===n?r&&0===e.indexOf(r):"*="===n?r&&-1<e.indexOf(r):"$="===n?r&&e.slice(-r.length)===r:"~="===n?-1<(" "+e.replace(ee," ")+" ").indexOf(r):"|="===n&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,s,a,l,u=m!=y?"nextSibling":"previousSibling",c=e.parentNode,d=x&&e.nodeName.toLowerCase(),f=!n&&!x,p=!1;if(c){if(m){for(;u;){for(s=e;s=s[u];)if(x?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&f){for(p=(a=(r=(i=(o=(s=c)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&r[1])&&r[2],s=a&&c.childNodes[a];s=++a&&s&&s[u]||(p=a=0)||l.pop();)if(1===s.nodeType&&++p&&s===e){i[h]=[k,a,p];break}}else if(!1===(p=f?a=(r=(i=(o=(s=e)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&r[1]:p))for(;(s=++a&&s&&s[u]||(p=a=0)||l.pop())&&((x?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++p||(f&&((i=(o=s[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]=[k,p]),s!==e)););return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||j.error("unsupported pseudo: "+e);return s[E]?s(o):1<s.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?q(function(e,t){for(var n,r=s(e,o),i=r.length;i--;)e[n=y(e,r[i])]=!(t[n]=r[i])}):function(e){return s(e,0,t)}):s}},pseudos:{not:q(function(e){var r=[],i=[],a=$(e.replace(m,"$1"));return a[E]?q(function(e,t,n,r){for(var i,o=a(e,null,r,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))}):function(e,t,n){return r[0]=e,a(r,null,n,i),r[0]=null,!i.pop()}}),has:q(function(t){return function(e){return 0<j(t,e).length}}),contains:q(function(t){return t=t.replace(N,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:q(function(n){return oe.test(n||"")||j.error("unsupported lang: "+n),n=n.replace(N,d).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=O.location&&O.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===n},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return le.test(e.nodeName)},input:function(e){return ae.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:M(function(){return[0]}),last:M(function(e,t){return[t-1]}),eq:M(function(e,t,n){return[n<0?n+t:n]}),even:M(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:M(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:M(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:M(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function me(){}function H(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(s,e,t){var a=e.dir,l=e.next,u=l||a,c=t&&"parentNode"===u,d=F++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||c)return s(e,t,n);return!1}:function(e,t,n){var r,i,o=[k,d];if(n){for(;e=e[a];)if((1===e.nodeType||c)&&s(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||c)if(i=(i=e[E]||(e[E]={}))[e.uniqueID]||(i[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[a]||e;else{if((r=i[u])&&r[0]===k&&r[1]===d)return o[2]=r[2];if((i[u]=o)[2]=s(e,t,n))return!0}return!1}}function xe(i){return 1<i.length?function(e,t,n){for(var r=i.length;r--;)if(!i[r](e,t,n))return!1;return!0}:i[0]}function be(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)!(o=e[a])||n&&!n(o,r,i)||(s.push(o),u&&t.push(a));return s}function we(e){for(var r,t,n,i=e.length,o=b.relative[e[0].type],s=o||b.relative[" "],a=o?1:0,l=ye(function(e){return e===r},s,!0),u=ye(function(e){return-1<y(r,e)},s,!0),c=[function(e,t,n){e=!o&&(n||t!==w)||((r=t).nodeType?l:u)(e,t,n);return r=null,e}];a<i;a++)if(t=b.relative[e[a].type])c=[ye(xe(c),t)];else{if((t=b.filter[e[a].type].apply(null,e[a].matches))[E]){for(n=++a;n<i&&!b.relative[e[n].type];n++);return function e(p,h,g,v,m,t){return v&&!v[E]&&(v=e(v)),m&&!m[E]&&(m=e(m,t)),q(function(e,t,n,r){var i,o,s,a=[],l=[],u=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)j(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!p||!e&&h?c:be(c,a,p,n,r),f=g?m||(e?p:u||v)?[]:t:d;if(g&&g(d,f,n,r),v)for(i=be(f,l),v(i,[],n,r),o=i.length;o--;)(s=i[o])&&(f[l[o]]=!(d[l[o]]=s));if(e){if(m||p){if(m){for(i=[],o=f.length;o--;)(s=f[o])&&i.push(d[o]=s);m(null,f=[],i,r)}for(o=f.length;o--;)(s=f[o])&&-1<(i=m?y(e,s):a[o])&&(e[i]=!(t[i]=s))}}else f=be(f===t?f.splice(u,f.length):f),m?m(null,t,f,r):A.apply(t,f)})}(1<a&&xe(c),1<a&&H(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(m,"$1"),t,a<n&&we(e.slice(a,n)),n<i&&we(e=e.slice(n)),n<i&&H(e))}c.push(t)}return xe(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,p=j.tokenize=function(e,t){var n,r,i,o,s,a,l,u=z[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(o in n&&!(r=te.exec(s))||(r&&(s=s.slice(r[0].length)||s),a.push(i=[])),n=!1,(r=ne.exec(s))&&(n=r.shift(),i.push({value:n,type:r[0].replace(m," ")}),s=s.slice(n.length)),b.filter)!(r=x[o].exec(s))||l[o]&&!(r=l[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?j.error(e):z(e,a).slice(0)},$=j.compile=function(e,t){var n,v,m,y,x,r,i=[],o=[],s=U[e+" "];if(!s){for(n=(t=t||p(e)).length;n--;)((s=we(t[n]))[E]?i:o).push(s);(s=U(e,(y=0<(m=i).length,x=0<(v=o).length,r=function(e,t,n,r,i){var o,s,a,l=0,u="0",c=e&&[],d=[],f=w,p=e||x&&b.find.TAG("*",i),h=k+=null==f?1:Math.random()||.1,g=p.length;for(i&&(w=t==C||t||i);u!==g&&null!=(o=p[u]);u++){if(x&&o){for(s=0,t||o.ownerDocument==C||(T(o),n=!S);a=v[s++];)if(a(o,t||C,n)){r.push(o);break}i&&(k=h)}y&&((o=!a&&o)&&l--,e&&c.push(o))}if(l+=u,y&&u!==l){for(s=0;a=m[s++];)a(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=Y.call(r));d=be(d)}A.apply(r,d),i&&!e&&0<d.length&&1<l+m.length&&j.uniqueSort(r)}return i&&(k=h,w=f),c},y?q(r):r))).selector=e}return s},W=j.select=function(e,t,n,r){var i,o,s,a,l,u="function"==typeof e&&e,c=!r&&p(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&S&&b.relative[o[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(N,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=x.needsContext.test(e)?0:o.length;i--&&(s=o[i],!b.relative[a=s.type]);)if((l=b.find[a])&&(r=l(s.matches[0].replace(N,d),ce.test(o[0].type)&&ve(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&H(o))break;return A.apply(n,r),n}}return(u||$(e,c))(r,t,!S,n,!t||ce.test(e)&&ve(t.parentNode)||t),n},f.sortStable=E.split("").sort(X).join("")===E,f.detectDuplicates=!!u,T(),f.sortDetached=P(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),P(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||pe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&P(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||pe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),P(function(e){return null==e.getAttribute("disabled")})||pe(J,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),j}(T),G=(S.find=e,S.expr=e.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=e.uniqueSort,S.text=e.getText,S.isXMLDoc=e.isXML,S.contains=e.contains,S.escapeSelector=e.escape,S.expr.match.needsContext);function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var J=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function K(e,n,r){return y(n)?S.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?S.grep(e,function(e){return e===n!==r}):"string"!=typeof n?S.grep(e,function(e){return-1<$.call(n,e)!==r}):S.filter(n,e,r)}S.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<r;t++)if(S.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,i[t],n);return 1<r?S.uniqueSort(n):n},filter:function(e){return this.pushStack(K(this,e||[],!1))},not:function(e){return this.pushStack(K(this,e||[],!0))},is:function(e){return!!K(this,"string"==typeof e&&G.test(e)?S(e):e||[],!1).length}});var Z,ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,te=((S.fn.init=function(e,t,n){if(e){if(n=n||Z,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:ee.exec(e))||!r[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:C,!0)),J.test(r[1])&&S.isPlainObject(t))for(var r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r])}else(n=C.getElementById(r[2]))&&(this[0]=n,this.length=1)}return this}).prototype=S.fn,Z=S(C),/^(?:parents|prev(?:Until|All))/),ne={children:!0,contents:!0,next:!0,prev:!0};function re(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&S(e);if(!G.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?S.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?$.call(S(e),this[0]):$.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){e=e.parentNode;return e&&11!==e.nodeType?e:null},parents:function(e){return r(e,"parentNode")},parentsUntil:function(e,t,n){return r(e,"parentNode",n)},next:function(e){return re(e,"nextSibling")},prev:function(e){return re(e,"previousSibling")},nextAll:function(e){return r(e,"nextSibling")},prevAll:function(e){return r(e,"previousSibling")},nextUntil:function(e,t,n){return r(e,"nextSibling",n)},prevUntil:function(e,t,n){return r(e,"previousSibling",n)},siblings:function(e){return Q((e.parentNode||{}).firstChild,e)},children:function(e){return Q(e.firstChild)},contents:function(e){return null!=e.contentDocument&&_(e.contentDocument)?e.contentDocument:(l(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(r,i){S.fn[r]=function(e,t){var n=S.map(this,i,e);return(t="Until"!==r.slice(-5)?e:t)&&"string"==typeof t&&(n=S.filter(t,n)),1<this.length&&(ne[r]||S.uniqueSort(n),te.test(r)&&n.reverse()),this.pushStack(n)}});var E=/[^\x20\t\r\n\f]+/g;function c(e){return e}function ie(e){throw e}function oe(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},S.each(e.match(E)||[],function(e,t){n[t]=!0}),n):S.extend({},r);function i(){for(a=a||r.once,s=o=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&r.stopOnFalse&&(c=l.length,t=!1);r.memory||(t=!1),o=!1,a&&(l=t?[]:"")}var o,t,s,a,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!o&&(c=l.length-1,u.push(t)),function n(e){S.each(e,function(e,t){y(t)?r.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==h(t)&&n(t)})}(arguments),t&&!o&&i()),this},remove:function(){return S.each(arguments,function(e,t){for(var n;-1<(n=S.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<S.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=u=[],t||o||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),o||i()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},S.extend({Deferred:function(e){var o=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],i="pending",s={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var i=arguments;return S.Deferred(function(r){S.each(o,function(e,t){var n=y(i[t[4]])&&i[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&y(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var l=0;function u(i,o,s,a){return function(){function e(){var e,t;if(!(i<l)){if((e=s.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==_typeof(e)||"function"==typeof e)&&e.then,y(t)?a?t.call(e,u(l,o,c,a),u(l,o,ie,a)):(l++,t.call(e,u(l,o,c,a),u(l,o,ie,a),u(l,o,c,o.notifyWith))):(s!==c&&(n=void 0,r=[e]),(a||o.resolveWith)(n,r))}}var n=this,r=arguments,t=a?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),l<=i+1&&(s!==ie&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),T.setTimeout(t))}}return S.Deferred(function(e){o[0][3].add(u(0,e,y(r)?r:c,e.notifyWith)),o[1][3].add(u(0,e,y(t)?t:c)),o[2][3].add(u(0,e,y(n)?n:ie))}).promise()},promise:function(e){return null!=e?S.extend(e,s):s}},a={};return S.each(o,function(e,t){var n=t[2],r=t[5];s[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){i[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(i,o)}}var n=arguments.length,r=n,i=Array(r),o=a.call(arguments),s=S.Deferred();if(n<=1&&(oe(e,s.done(t(r)).resolve,s.reject,!n),"pending"===s.state()||y(o[r]&&o[r].then)))return s.then();for(;r--;)oe(o[r],t(r),s.reject);return s.promise()}});var se=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,ae=(S.Deferred.exceptionHook=function(e,t){T.console&&T.console.warn&&e&&se.test(e.name)&&T.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){T.setTimeout(function(){throw e})},S.Deferred());function le(){C.removeEventListener("DOMContentLoaded",le),T.removeEventListener("load",le),S.ready()}S.fn.ready=function(e){return ae.then(e).catch(function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||ae.resolveWith(C,[S])}}),S.ready.then=ae.then,"complete"===C.readyState||"loading"!==C.readyState&&!C.documentElement.doScroll?T.setTimeout(S.ready):(C.addEventListener("DOMContentLoaded",le),T.addEventListener("load",le));function d(e,t,n,r,i,o,s){var a=0,l=e.length,u=null==n;if("object"===h(n))for(a in i=!0,n)d(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,y(r)||(s=!0),t=u?s?(t.call(e,r),null):(u=t,function(e,t,n){return u.call(S(e),n)}):t))for(;a<l;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:u?t.call(e):l?t(e[0],n):o}var ue=/^-ms-/,ce=/-([a-z])/g;function de(e,t){return t.toUpperCase()}function x(e){return e.replace(ue,"ms-").replace(ce,de)}function m(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function fe(){this.expando=S.expando+fe.uid++}fe.uid=1,fe.prototype={cache:function(e){var t=e[this.expando];return t||(t={},m(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[x(t)]=n;else for(r in t)i[x(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][x(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(x):(t=x(t))in r?[t]:t.match(E)||[]).length;for(;n--;)delete r[t[n]]}void 0!==t&&!S.isEmptyObject(r)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var b=new fe,u=new fe,pe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,he=/[A-Z]/g;function ge(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(he,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:pe.test(i)?JSON.parse(i):i)}catch(e){}u.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return u.hasData(e)||b.hasData(e)},data:function(e,t,n){return u.access(e,t,n)},removeData:function(e,t){u.remove(e,t)},_data:function(e,t,n){return b.access(e,t,n)},_removeData:function(e,t){b.remove(e,t)}}),S.fn.extend({data:function(n,e){var t,r,i,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"==_typeof(n)?this.each(function(){u.set(this,n)}):d(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=u.get(o,n))||void 0!==(t=ge(o,n))?t:void 0;this.each(function(){u.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(i=u.get(o),1===o.nodeType&&!b.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(r=s[t].name).indexOf("data-")&&(r=x(r.slice(5)),ge(o,r,i[r]));b.set(o,"hasDataAttrs",!0)}return i},removeData:function(e){return this.each(function(){u.remove(this,e)})}}),S.extend({queue:function(e,t,n){var r;if(e)return r=b.get(e,t=(t||"fx")+"queue"),n&&(!r||Array.isArray(n)?r=b.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),r=n.length,i=n.shift(),o=S._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){S.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b.get(e,n)||b.access(e,n,{empty:S.Callbacks("once memory").add(function(){b.remove(e,[t+"queue",n])})})}}),S.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===n?this:this.each(function(){var e=S.queue(this,t,n);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--i||o.resolveWith(s,[s])}var r,i=1,o=S.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(r=b.get(s[a],e+"queueHooks"))&&r.empty&&(i++,r.empty.add(n));return n(),o.promise(t)}});function ve(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&k(e)&&"none"===S.css(e,"display")}var e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,me=new RegExp("^(?:([+-])=|)("+e+")([a-z%]*)$","i"),f=["Top","Right","Bottom","Left"],w=C.documentElement,k=function(e){return S.contains(e.ownerDocument,e)},ye={composed:!0};w.getRootNode&&(k=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});function xe(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return S.css(e,t,"")},l=a(),u=n&&n[3]||(S.cssNumber[t]?"":"px"),c=e.nodeType&&(S.cssNumber[t]||"px"!==u&&+l)&&me.exec(S.css(e,t));if(c&&c[3]!==u){for(u=u||c[3],c=+(l/=2)||1;s--;)S.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;S.style(e,t,(c*=2)+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var be={};function A(e,t){for(var n,r,i,o,s,a,l=[],u=0,c=e.length;u<c;u++)(r=e[u]).style&&(n=r.style.display,t?("none"===n&&(l[u]=b.get(r,"display")||null,l[u]||(r.style.display="")),""===r.style.display&&ve(r)&&(l[u]=(a=o=i=void 0,o=r.ownerDocument,s=r.nodeName,(a=be[s])||(i=o.body.appendChild(o.createElement(s)),a=S.css(i,"display"),i.parentNode.removeChild(i),be[s]=a="none"===a?"block":a)))):"none"!==n&&(l[u]="none",b.set(r,"display",n)));for(u=0;u<c;u++)null!=l[u]&&(e[u].style.display=l[u]);return e}S.fn.extend({show:function(){return A(this,!0)},hide:function(){return A(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ve(this)?S(this).show():S(this).hide()})}});var we=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ce=/^$|^module$|\/(?:java|ecma)script/i,n=C.createDocumentFragment().appendChild(C.createElement("div")),D=((q=C.createElement("input")).setAttribute("type","radio"),q.setAttribute("checked","checked"),q.setAttribute("name","t"),n.appendChild(q),v.checkClone=n.cloneNode(!0).cloneNode(!0).lastChild.checked,n.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!n.cloneNode(!0).lastChild.defaultValue,n.innerHTML="<option></option>",v.option=!!n.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function N(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&l(e,t)?S.merge([e],n):n}function Se(e,t){for(var n=0,r=e.length;n<r;n++)b.set(e[n],"globalEval",!t||b.get(t[n],"globalEval"))}D.tbody=D.tfoot=D.colgroup=D.caption=D.thead,D.th=D.td,v.option||(D.optgroup=D.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function ke(e,t,n,r,i){for(var o,s,a,l,u,c=t.createDocumentFragment(),d=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===h(o))S.merge(d,o.nodeType?[o]:o);else if(Ee.test(o)){for(s=s||c.appendChild(t.createElement("div")),a=(Te.exec(o)||["",""])[1].toLowerCase(),a=D[a]||D._default,s.innerHTML=a[1]+S.htmlPrefilter(o)+a[2],u=a[0];u--;)s=s.lastChild;S.merge(d,s.childNodes),(s=c.firstChild).textContent=""}else d.push(t.createTextNode(o));for(c.textContent="",f=0;o=d[f++];)if(r&&-1<S.inArray(o,r))i&&i.push(o);else if(l=k(o),s=N(c.appendChild(o),"script"),l&&Se(s),n)for(u=0;o=s[u++];)Ce.test(o.type||"")&&n.push(o);return c}var Ae=/^([^.]*)(?:\.(.+)|)/;function s(){return!0}function p(){return!1}function De(e,t){return e===function(){try{return C.activeElement}catch(e){}}()==("focus"===t)}function Ne(e,t,n,r,i,o){var s,a;if("object"==_typeof(t)){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Ne(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=p;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return S().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),e.each(function(){S.event.add(this,t,i,r,n)})}function je(e,i,o){o?(b.set(e,i,!1),S.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=b.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(S.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=a.call(arguments),b.set(this,i,r),t=o(this,i),this[i](),r!==(n=b.get(this,i))||t?b.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(b.set(this,i,{value:S.event.trigger(S.extend(r[0],S.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===b.get(e,i)&&S.event.add(e,i,s)}S.event={global:{},add:function(t,e,n,r,i){var o,s,a,l,u,c,d,f,p,h=b.get(t);if(m(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(w,i),n.guid||(n.guid=S.guid++),(a=h.events)||(a=h.events=Object.create(null)),(s=h.handle)||(s=h.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(E)||[""]).length;l--;)d=p=(f=Ae.exec(e[l])||[])[1],f=(f[2]||"").split(".").sort(),d&&(u=S.event.special[d]||{},d=(i?u.delegateType:u.bindType)||d,u=S.event.special[d]||{},p=S.extend({type:d,origType:p,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:f.join(".")},o),(c=a[d])||((c=a[d]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,r,f,s)||t.addEventListener&&t.addEventListener(d,s)),u.add&&(u.add.call(t,p),p.handler.guid||(p.handler.guid=n.guid)),i?c.splice(c.delegateCount++,0,p):c.push(p),S.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,u,c,d,f,p,h,g,v=b.hasData(e)&&b.get(e);if(v&&(l=v.events)){for(u=(t=(t||"").match(E)||[""]).length;u--;)if(p=g=(a=Ae.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),p){for(d=S.event.special[p]||{},f=l[p=(r?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(e,c));s&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||S.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)S.event.remove(e,p+t[u],n,r,!0);S.isEmptyObject(l)&&b.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s=new Array(arguments.length),a=S.event.fix(e),e=(b.get(this,"events")||Object.create(null))[a.type]||[],l=S.event.special[a.type]||{};for(s[0]=a,t=1;t<arguments.length;t++)s[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(o=S.event.handlers.call(this,a,e),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(i=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==i.namespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(i=((S.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,s))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?-1<S(i,this).index(u):S.find(i,this,null,[u]).length),s[i]&&o.push(r);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&je(e,"click",s),!1},trigger:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&je(e,"click"),!0},_default:function(e){e=e.target;return we.test(e.type)&&e.click&&l(e,"input")&&b.get(e,"click")||l(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?s:p,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=s,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=s,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=s,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(e,t){S.event.special[e]={setup:function(){return je(this,e,De),!1},trigger:function(){return je(this,e),!0},_default:function(){return!0},delegateType:t}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){S.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||S.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),S.fn.extend({on:function(e,t,n,r){return Ne(this,e,t,n,r)},one:function(e,t,n,r){return Ne(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler);else{if("object"!=_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=p),this.each(function(){S.event.remove(this,e,n,t)});for(i in e)this.off(i,t,e[i])}return this}});var Le=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function _e(e,t){var n,r,i,o;if(1===t.nodeType){if(b.hasData(e)&&(o=b.get(e).events))for(i in b.remove(t,"handle events"),o)for(n=0,r=o[i].length;n<r;n++)S.event.add(t,i,o[i][n]);u.hasData(e)&&(e=u.access(e),e=S.extend({},e),u.set(t,e))}}function j(n,r,i,o){r=I(r);var e,t,s,a,l,u,c=0,d=n.length,f=d-1,p=r[0],h=y(p);if(h||1<d&&"string"==typeof p&&!v.checkClone&&qe.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),j(t,r,i,o)});if(d&&(t=(e=ke(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=S.map(N(e,"script"),He)).length;c<d;c++)l=e,c!==f&&(l=S.clone(l,!0,!0),a&&S.merge(s,N(l,"script"))),i.call(n[c],l,c);if(a)for(u=s[s.length-1].ownerDocument,S.map(s,Oe),c=0;c<a;c++)l=s[c],Ce.test(l.type||"")&&!b.access(l,"globalEval")&&S.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):V(l.textContent.replace(Pe,""),l,u))}return n}function Ie(e,t,n){for(var r,i=t?S.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(N(r)),r.parentNode&&(n&&k(r)&&Se(N(r,"script")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,s,a,l,u,c=e.cloneNode(!0),d=k(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(s=N(c),r=0,i=(o=N(e)).length;r<i;r++)a=o[r],"input"===(u=(l=s[r]).nodeName.toLowerCase())&&we.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||N(e),s=s||N(c),r=0,i=o.length;r<i;r++)_e(o[r],s[r]);else _e(e,c);return 0<(s=N(c,"script")).length&&Se(s,!d&&N(e,"script")),c},cleanData:function(e){for(var t,n,r,i=S.event.special,o=0;void 0!==(n=e[o]);o++)if(m(n)){if(t=n[b.expando]){if(t.events)for(r in t.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[b.expando]=void 0}n[u.expando]&&(n[u.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return d(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return j(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return j(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Me(this,e)).insertBefore(e,t.firstChild)})},before:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(N(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return d(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Le.test(e)&&!D[(Te.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(N(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return j(this,arguments,function(e){var t=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(N(this)),t&&t.replaceChild(e,this))},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){S.fn[e]=function(e){for(var t,n=[],r=S(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),S(r[o])[s](t),R.apply(n,t.get());return this.pushStack(n)}});function Re(e){var t=e.ownerDocument.defaultView;return(t=t&&t.opener?t:T).getComputedStyle(e)}function $e(e,t,n){var r,i={};for(r in t)i[r]=e.style[r],e.style[r]=t[r];for(r in n=n.call(e),t)e.style[r]=i[r];return n}var We,Fe,Be,ze,Ue,Xe,Ve,i,Ye=new RegExp("^("+e+")(?!px)[a-z%]+$","i"),Qe=new RegExp(f.join("|"),"i");function Ge(e,t,n){var r,i,o=e.style;return(n=n||Re(e))&&(""!==(i=n.getPropertyValue(t)||n[t])||k(e)||(i=S.style(e,t)),!v.pixelBoxStyles()&&Ye.test(i)&&Qe.test(t)&&(e=o.width,t=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=i,i=n.width,o.width=e,o.minWidth=t,o.maxWidth=r)),void 0!==i?i+"":i}function Je(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function Ke(){var e;i&&(Ve.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",i.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",w.appendChild(Ve).appendChild(i),e=T.getComputedStyle(i),We="1%"!==e.top,Xe=12===Ze(e.marginLeft),i.style.right="60%",ze=36===Ze(e.right),Fe=36===Ze(e.width),i.style.position="absolute",Be=12===Ze(i.offsetWidth/3),w.removeChild(Ve),i=null)}function Ze(e){return Math.round(parseFloat(e))}Ve=C.createElement("div"),(i=C.createElement("div")).style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===i.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return Ke(),Fe},pixelBoxStyles:function(){return Ke(),ze},pixelPosition:function(){return Ke(),We},reliableMarginLeft:function(){return Ke(),Xe},scrollboxSize:function(){return Ke(),Be},reliableTrDimensions:function(){var e,t,n;return null==Ue&&(e=C.createElement("table"),t=C.createElement("tr"),n=C.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",w.appendChild(e).appendChild(t).appendChild(n),n=T.getComputedStyle(t),Ue=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===t.offsetHeight,w.removeChild(e)),Ue}}));var et=["Webkit","Moz","ms"],tt=C.createElement("div").style,nt={};function rt(e){return S.cssProps[e]||nt[e]||(e in tt?e:nt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=et.length;n--;)if((e=et[n]+t)in tt)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,ot=/^--/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var r=me.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function ut(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=S.css(e,n+f[s],!0,i)),r?("content"===n&&(l-=S.css(e,"padding"+f[s],!0,i)),"margin"!==n&&(l-=S.css(e,"border"+f[s]+"Width",!0,i))):(l+=S.css(e,"padding"+f[s],!0,i),"padding"!==n?l+=S.css(e,"border"+f[s]+"Width",!0,i):a+=S.css(e,"border"+f[s]+"Width",!0,i));return!r&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function ct(e,t,n){var r=Re(e),i=(!v.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,r),o=i,s=Ge(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&i||!v.reliableTrDimensions()&&l(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===S.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===S.css(e,"boxSizing",!1,r),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,n||(i?"border":"content"),o,r,s)+"px"}function o(e,t,n,r,i){return new o.prototype.init(e,t,n,r,i)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t)return""===(t=Ge(e,"opacity"))?"1":t}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x(t),l=ot.test(t),u=e.style;if(l||(t=rt(a)),s=S.cssHooks[t]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"===(o=_typeof(n))&&(i=me.exec(n))&&i[1]&&(n=xe(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(S.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o=x(t);return ot.test(t)||(t=rt(o)),"normal"===(i=void 0===(i=(o=S.cssHooks[t]||S.cssHooks[o])&&"get"in o?o.get(e,!0,n):i)?Ge(e,t,r):i)&&t in at&&(i=at[t]),(""===n||n)&&(o=parseFloat(i),!0===n||isFinite(o))?o||0:i}}),S.each(["height","width"],function(e,s){S.cssHooks[s]={get:function(e,t,n){if(t)return!it.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ct(e,s,n):$e(e,st,function(){return ct(e,s,n)})},set:function(e,t,n){var r=Re(e),i=!v.scrollboxSize()&&"absolute"===r.position,o=(i||n)&&"border-box"===S.css(e,"boxSizing",!1,r),n=n?ut(e,s,n,o,r):0;return o&&i&&(n-=Math.ceil(e["offset"+s[0].toUpperCase()+s.slice(1)]-parseFloat(r[s])-ut(e,s,"border",!1,r)-.5)),n&&(o=me.exec(t))&&"px"!==(o[3]||"px")&&(e.style[s]=t,t=S.css(e,s)),lt(0,t,n)}}}),S.cssHooks.marginLeft=Je(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(i,o){S.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+f[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(S.cssHooks[i+o].set=lt)}),S.fn.extend({css:function(e,t){return d(this,function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=Re(e),i=t.length;s<i;s++)o[t[s]]=S.css(e,t[s],!1,r);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,1<arguments.length)}}),((S.Tween=o).prototype={constructor:o,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var e=o.propHooks[this.prop];return(e&&e.get?e:o.propHooks._default).get(this)},run:function(e){var t,n=o.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:o.propHooks._default).set(this),this}}).init.prototype=o.prototype,(o.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=S.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[rt(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=o.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=o.prototype.init,S.fx.step={};var L,dt,q,ft=/^(?:toggle|show|hide)$/,pt=/queueHooks$/;function ht(){dt&&(!1===C.hidden&&T.requestAnimationFrame?T.requestAnimationFrame(ht):T.setTimeout(ht,S.fx.interval),S.fx.tick())}function gt(){return T.setTimeout(function(){L=void 0}),L=Date.now()}function vt(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=f[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function mt(e,t,n){for(var r,i=(P.tweeners[t]||[]).concat(P.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function P(i,e,t){var n,o,r,s,a,l,u,c=0,d=P.prefilters.length,f=S.Deferred().always(function(){delete p.elem}),p=function(){if(o)return!1;for(var e=L||gt(),e=Math.max(0,h.startTime+h.duration-e),t=1-(e/h.duration||0),n=0,r=h.tweens.length;n<r;n++)h.tweens[n].run(t);return f.notifyWith(i,[h,t,e]),t<1&&r?e:(r||f.notifyWith(i,[h,1,0]),f.resolveWith(i,[h]),!1)},h=f.promise({elem:i,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:L||gt(),duration:t.duration,tweens:[],createTween:function(e,t){t=S.Tween(i,h.opts,e,t,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(t),t},stop:function(e){var t=0,n=e?h.tweens.length:0;if(!o){for(o=!0;t<n;t++)h.tweens[t].run(1);e?(f.notifyWith(i,[h,1,0]),f.resolveWith(i,[h,e])):f.rejectWith(i,[h,e])}return this}}),g=h.props,v=g,m=h.opts.specialEasing;for(r in v)if(a=m[s=x(r)],l=v[r],Array.isArray(l)&&(a=l[1],l=v[r]=l[0]),r!==s&&(v[s]=l,delete v[r]),(u=S.cssHooks[s])&&"expand"in u)for(r in l=u.expand(l),delete v[s],l)r in v||(v[r]=l[r],m[r]=a);else m[s]=a;for(;c<d;c++)if(n=P.prefilters[c].call(h,i,g,h.opts))return y(n.stop)&&(S._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return S.map(g,mt,h),y(h.opts.start)&&h.opts.start.call(i,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),S.fx.timer(S.extend(p,{elem:i,anim:h,queue:h.opts.queue})),h}S.Animation=S.extend(P,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return xe(n.elem,e,me.exec(t),n),n}]},tweener:function(e,t){for(var n,r=0,i=(e=y(e)?(t=e,["*"]):e.match(E)).length;r<i;r++)n=e[r],P.tweeners[n]=P.tweeners[n]||[],P.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,l,u,c="width"in t||"height"in t,d=this,f={},p=e.style,h=e.nodeType&&ve(e),g=b.get(e,"fxshow");for(r in n.queue||(null==(s=S._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,S.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[r],ft.test(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}f[r]=g&&g[r]||S.style(e,r)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(f))for(r in c&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=g&&g.display)&&(u=b.get(e,"display")),"none"===(c=S.css(e,"display"))&&(u?c=u:(A([e],!0),u=e.style.display||u,c=S.css(e,"display"),A([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===S.css(e,"float")&&(l||(d.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(h=g.hidden):g=b.access(e,"fxshow",{display:u}),o&&(g.hidden=!h),h&&A([e],!0),d.done(function(){for(r in h||A([e]),b.remove(e,"fxshow"),f)S.style(e,r,f[r])})),l=mt(h?g[r]:0,r,d),r in g||(g[r]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?P.prefilters.unshift(e):P.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&"object"==_typeof(e)?S.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ve).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){function i(){var e=P(this,S.extend({},t),s);(o||b.get(this,"finish"))&&e.stop(!0)}var o=S.isEmptyObject(t),s=S.speed(e,n,r);return i.finish=i,o||!1===s.queue?this.each(i):this.queue(s.queue,i)},stop:function(i,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=S.timers,r=b.get(this);if(t)r[t]&&r[t].stop&&s(r[t]);else for(t in r)r[t]&&r[t].stop&&pt.test(t)&&s(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||S.dequeue(this,i)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=b.get(this),n=t[s+"queue"],r=t[s+"queueHooks"],i=S.timers,o=n?n.length:0;for(t.finish=!0,S.queue(this,s,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===s&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,r){var i=S.fn[r];S.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(vt(r,!0),e,t,n)}}),S.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){S.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(L=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),L=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){dt||(dt=!0,ht())},S.fx.stop=function(){dt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(r,e){return r=S.fx&&S.fx.speeds[r]||r,this.queue(e=e||"fx",function(e,t){var n=T.setTimeout(e,r);t.stop=function(){T.clearTimeout(n)}})},q=C.createElement("input"),n=C.createElement("select").appendChild(C.createElement("option")),q.type="checkbox",v.checkOn=""!==q.value,v.optSelected=n.selected,(q=C.createElement("input")).value="t",q.type="radio",v.radioValue="t"===q.value;var yt,xt=S.expr.attrHandle,bt=(S.fn.extend({attr:function(e,t){return d(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(i=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?yt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):!(i&&"get"in i&&null!==(r=i.get(e,t)))&&null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){var n;if(!v.radioValue&&"radio"===t&&l(e,"input"))return n=e.value,e.setAttribute("type",t),n&&(e.value=n),t}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(E);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),yt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var s=xt[t]||S.find.attr;xt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=xt[o],xt[o]=r,r=null!=s(e,t,n)?o:null,xt[o]=i),r}}),/^(?:input|select|textarea|button)$/i),wt=/^(?:a|area)$/i;function M(e){return(e.match(E)||[]).join(" ")}function H(e){return e.getAttribute&&e.getAttribute("class")||""}function Tt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(E)||[]}S.fn.extend({prop:function(e,t){return d(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,i=S.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(S.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,r,i,o,s,a=0;if(y(t))return this.each(function(e){S(this).addClass(t.call(this,e,H(this)))});if((e=Tt(t)).length)for(;n=this[a++];)if(s=H(n),r=1===n.nodeType&&" "+M(s)+" "){for(o=0;i=e[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s!==(s=M(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,s,a=0;if(y(t))return this.each(function(e){S(this).removeClass(t.call(this,e,H(this)))});if(!arguments.length)return this.attr("class","");if((e=Tt(t)).length)for(;n=this[a++];)if(s=H(n),r=1===n.nodeType&&" "+M(s)+" "){for(o=0;i=e[o++];)for(;-1<r.indexOf(" "+i+" ");)r=r.replace(" "+i+" "," ");s!==(s=M(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=_typeof(i),s="string"===o||Array.isArray(i);return"boolean"==typeof t&&s?t?this.addClass(i):this.removeClass(i):y(i)?this.each(function(e){S(this).toggleClass(i.call(this,e,H(this),t),t)}):this.each(function(){var e,t,n,r;if(s)for(t=0,n=S(this),r=Tt(i);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==i&&"boolean"!==o||((e=H(this))&&b.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==i&&b.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,r=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+M(H(t))+" ").indexOf(r))return!0;return!1}});function Ct(e){e.stopPropagation()}var St=/\r/g,Et=(S.fn.extend({val:function(t){var n,e,r,i=this[0];return arguments.length?(r=y(t),this.each(function(e){1===this.nodeType&&(null==(e=r?t.call(this,e,S(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=S.map(e,function(e){return null==e?"":e+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):i?(n=S.valHooks[i.type]||S.valHooks[i.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(i,"value"))?e:"string"==typeof(e=i.value)?e.replace(St,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:M(S.text(e))}},select:{get:function(e){for(var t,n=e.options,r=e.selectedIndex,i="select-one"===e.type,o=i?null:[],s=i?r+1:n.length,a=r<0?s:i?r:0;a<s;a++)if(((t=n[a]).selected||a===r)&&!t.disabled&&(!t.parentNode.disabled||!l(t.parentNode,"optgroup"))){if(t=S(t).val(),i)return t;o.push(t)}return o},set:function(e,t){for(var n,r,i=e.options,o=S.makeArray(t),s=i.length;s--;)((r=i[s]).selected=-1<S.inArray(S.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in T,/^(?:focusinfocus|focusoutblur)$/),kt=(S.extend(S.event,{trigger:function(e,t,n,r){var i,o,s,a,l,u,c,d=[n||C],f=B.call(e,"type")?e.type:e,p=B.call(e,"namespace")?e.namespace.split("."):[],h=c=o=n=n||C;if(3!==n.nodeType&&8!==n.nodeType&&!Et.test(f+S.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),a=f.indexOf(":")<0&&"on"+f,(e=e[S.expando]?e:new S.Event(f,"object"==_typeof(e)&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),u=S.event.special[f]||{},r||!u.trigger||!1!==u.trigger.apply(n,t))){if(!r&&!u.noBubble&&!g(n)){for(s=u.delegateType||f,Et.test(s+f)||(h=h.parentNode);h;h=h.parentNode)d.push(h),o=h;o===(n.ownerDocument||C)&&d.push(o.defaultView||o.parentWindow||T)}for(i=0;(h=d[i++])&&!e.isPropagationStopped();)c=h,e.type=1<i?s:u.bindType||f,(l=(b.get(h,"events")||Object.create(null))[e.type]&&b.get(h,"handle"))&&l.apply(h,t),(l=a&&h[a])&&l.apply&&m(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!m(n)||a&&y(n[f])&&!g(n)&&((o=n[a])&&(n[a]=null),S.event.triggered=f,e.isPropagationStopped()&&c.addEventListener(f,Ct),n[f](),e.isPropagationStopped()&&c.removeEventListener(f,Ct),S.event.triggered=void 0,o&&(n[a]=o)),e.result}},simulate:function(e,t,n){n=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(n,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,r){function i(e){S.event.simulate(r,e.target,S.event.fix(e))}S.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,r);t||e.addEventListener(n,i,!0),b.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,r)-1;t?b.access(e,r,t):(e.removeEventListener(n,i,!0),b.remove(e,r))}}}),T.location),At={guid:Date.now()},Dt=/\?/,Nt=(S.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new T.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t},/\[\]$/),jt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,qt=/^(?:input|select|textarea|keygen)/i;S.param=function(e,t){function n(e,t){t=y(t)?t():t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var r,i=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){n(this.name,this.value)});else for(r in e)!function n(r,e,i,o){if(Array.isArray(e))S.each(e,function(e,t){i||Nt.test(r)?o(r,t):n(r+"["+("object"==_typeof(t)&&null!=t?e:"")+"]",t,i,o)});else if(i||"object"!==h(e))o(r,e);else for(var t in e)n(r+"["+t+"]",e[t],i,o)}(r,e[r],t,n);return i.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&qt.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(jt,"\r\n")}}):{name:t.name,value:n.replace(jt,"\r\n")}}).get()}});var Pt=/%20/g,Mt=/#.*$/,Ht=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,_t=/^(?:GET|HEAD)$/,It=/^\/\//,Rt={},$t={},Wt="*/".concat("*"),Ft=C.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(E)||[];if(y(t))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function zt(t,r,i,o){var s={},a=t===$t;function l(e){var n;return s[e]=!0,S.each(t[e]||[],function(e,t){t=t(r,i,o);return"string"!=typeof t||a||s[t]?a?!(n=t):void 0:(r.dataTypes.unshift(t),l(t),!1)}),n}return l(r.dataTypes[0])||!s["*"]&&l("*")}function Ut(e,t){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r=r||{})[n]=t[n]);return r&&S.extend(!0,e,r),e}Ft.href=kt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,S.ajaxSettings),t):Ut(S.ajaxSettings,e)},ajaxPrefilter:Bt(Rt),ajaxTransport:Bt($t),ajax:function(e,t){"object"==_typeof(e)&&(t=e,e=void 0);var l,u,c,n,d,f,p,r,i,h=S.ajaxSetup({},t=t||{}),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?S(g):S.event,m=S.Deferred(),y=S.Callbacks("once memory"),x=h.statusCode||{},o={},s={},a="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(f){if(!n)for(n={};t=Ot.exec(c);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?c:null},setRequestHeader:function(e,t){return null==f&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,o[e]=t),this},overrideMimeType:function(e){return null==f&&(h.mimeType=e),this},statusCode:function(e){if(e)if(f)b.always(e[b.status]);else for(var t in e)x[t]=[x[t],e[t]];return this},abort:function(e){e=e||a;return l&&l.abort(e),w(0,e),this}};if(m.promise(b),h.url=((e||h.url||kt.href)+"").replace(It,kt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(E)||[""],null==h.crossDomain){i=C.createElement("a");try{i.href=h.url,i.href=i.href,h.crossDomain=Ft.protocol+"//"+Ft.host!=i.protocol+"//"+i.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=S.param(h.data,h.traditional)),zt(Rt,h,t,b),!f){for(r in(p=S.event&&h.global)&&0==S.active++&&S.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!_t.test(h.type),u=h.url.replace(Mt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pt,"+")):(i=h.url.slice(u.length),h.data&&(h.processData||"string"==typeof h.data)&&(u+=(Dt.test(u)?"&":"?")+h.data,delete h.data),!1===h.cache&&(u=u.replace(Ht,"$1"),i=(Dt.test(u)?"&":"?")+"_="+At.guid+++i),h.url=u+i),h.ifModified&&(S.lastModified[u]&&b.setRequestHeader("If-Modified-Since",S.lastModified[u]),S.etag[u]&&b.setRequestHeader("If-None-Match",S.etag[u])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&b.setRequestHeader("Content-Type",h.contentType),b.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Wt+"; q=0.01":""):h.accepts["*"]),h.headers)b.setRequestHeader(r,h.headers[r]);if(h.beforeSend&&(!1===h.beforeSend.call(g,b,h)||f))return b.abort();if(a="abort",y.add(h.complete),b.done(h.success),b.fail(h.error),l=zt($t,h,t,b)){if(b.readyState=1,p&&v.trigger("ajaxSend",[b,h]),f)return b;h.async&&0<h.timeout&&(d=T.setTimeout(function(){b.abort("timeout")},h.timeout));try{f=!1,l.send(o,w)}catch(e){if(f)throw e;w(-1,e)}}else w(-1,"No Transport")}return b;function w(e,t,n,r){var i,o,s,a=t;f||(f=!0,d&&T.clearTimeout(d),l=void 0,c=r||"",b.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s=s||i}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,b,n)),!r&&-1<S.inArray("script",h.dataTypes)&&S.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),s=function(e,t,n,r){var i,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(i in u)if((a=i.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[i]:!0!==u[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,s,b,r),r?(h.ifModified&&((n=b.getResponseHeader("Last-Modified"))&&(S.lastModified[u]=n),(n=b.getResponseHeader("etag"))&&(S.etag[u]=n)),204===e||"HEAD"===h.type?a="nocontent":304===e?a="notmodified":(a=s.state,i=s.data,r=!(o=s.error))):(o=a,!e&&a||(a="error",e<0&&(e=0))),b.status=e,b.statusText=(t||a)+"",r?m.resolveWith(g,[i,a,b]):m.rejectWith(g,[b,a,o]),b.statusCode(x),x=void 0,p&&v.trigger(r?"ajaxSuccess":"ajaxError",[b,h,r?i:o]),y.fireWith(g,[b,a]),p&&(v.trigger("ajaxComplete",[b,h]),--S.active||S.event.trigger("ajaxStop")))}},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,i){S[i]=function(e,t,n,r){return y(t)&&(r=r||n,n=t,t=void 0),S.ajax(S.extend({url:e,type:i,dataType:r,data:t,success:n},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){return this[0]&&(y(e)&&(e=e.call(this[0])),e=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(e){S(this).wrapInner(n.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=y(t);return this.each(function(e){S(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new T.XMLHttpRequest}catch(e){}};var Xt={0:200,1223:204},Vt=S.ajaxSettings.xhr();v.cors=!!Vt&&"withCredentials"in Vt,v.ajax=Vt=!!Vt,S.ajaxTransport(function(i){var o,s;if(v.cors||Vt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Xt[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),s=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=s:r.onreadystatechange=function(){4===r.readyState&&T.setTimeout(function(){o&&s()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(i){var o,s;if(i.crossDomain||i.scriptAttrs)return{send:function(e,t){function n(e){return r.apply(this,arguments)}var r;o=S("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",(r=function(e){o.remove(),s=null,e&&t("error"===e.type?404:200,e.type)},n.toString=function(){return r.toString()},s=n)),C.head.appendChild(o[0])},abort:function(){s&&s()}}});var Yt=[],Qt=/(=)\?(?=&|$)|\?\?/,Gt=(S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||S.expando+"_"+At.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,s=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Qt,"$1"+r):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||S.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=T[r],T[r]=function(){o=arguments},n.always(function(){void 0===i?S(T).removeProp(r):T[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(r)),o&&y(i)&&i(o[0]),o=i=void 0}),"script"}),v.createHTMLDocument=((e=C.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===e.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=C.implementation.createHTMLDocument("")).createElement("base")).href=C.location.href,t.head.appendChild(r)):t=C),r=!n&&[],(n=J.exec(e))?[t.createElement(n[1])]:(n=ke([e],t,r),r&&r.length&&S(r).remove(),S.merge([],n.childNodes)));var r},S.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return-1<a&&(r=M(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==_typeof(t)&&(i="POST"),0<s.length&&S.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(r?S("<div>").append(S.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,n){var r,i,o,s,a=S.css(e,"position"),l=S(e),u={};"static"===a&&(e.style.position="relative"),o=l.offset(),r=S.css(e,"top"),s=S.css(e,"left"),a=("absolute"===a||"fixed"===a)&&-1<(r+s).indexOf("auto")?(i=(a=l.position()).top,a.left):(i=parseFloat(r)||0,parseFloat(s)||0),null!=(t=y(t)?t.call(e,n,S.extend({},o)):t).top&&(u.top=t.top-o.top+i),null!=t.left&&(u.left=t.left-o.left+a),"using"in t?t.using.call(e,u):l.css(u)}},S.fn.extend({offset:function(t){var e,n;return arguments.length?void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)}):(n=this[0])?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===S.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),i.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-S.css(r,"marginTop",!0),left:t.left-i.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||w})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;S.fn[t]=function(e){return d(this,function(e,t,n){var r;if(g(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),S.each(["top","left"],function(e,n){S.cssHooks[n]=Je(v.pixelPosition,function(e,t){if(t)return t=Ge(e,n),Ye.test(t)?S(e).position()[n]+"px":t})}),S.each({Height:"height",Width:"width"},function(s,a){S.each({padding:"inner"+s,content:a,"":"outer"+s},function(r,o){S.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return d(this,function(e,t,n){var r;return g(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+s],r["scroll"+s],e.body["offset"+s],r["offset"+s],r["client"+s])):void 0===n?S.css(e,t,i):S.style(e,t,n,i)},a,n?e:void 0,n)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){S.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g),Jt=(S.proxy=function(e,t){var n,r;if("string"==typeof t&&(r=e[t],t=e,e=r),y(e))return n=a.call(arguments,2),(r=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||S.guid++,r},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=l,S.isFunction=y,S.isWindow=g,S.camelCase=x,S.type=h,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Gt,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S}),T.jQuery),Kt=T.$;return S.noConflict=function(e){return T.$===S&&(T.$=Kt),e&&T.jQuery===S&&(T.jQuery=Jt),S},void 0===O&&(T.jQuery=T.$=S),S}),function(){myMap=new ymaps.Map("map",{center:[55.751226,37.61652],zoom:14.02,controls:[]});var e=new ymaps.Placemark([55.751203,37.6061],{},{iconLayout:"default#image",iconImageHref:"./img/map-marker.svg",iconImageSize:[58,73],iconImageOffset:[-3,-42]});myMap.geoObjects.add(e)}),mesureWidth=(ymaps.ready(init),function(e){var t=0,n=$(window).width(),r=3*e.closest(".products-menu__item").find(".products-menu__title").width(),e=e.find(".products-menu__container"),i=parseInt(e.css("padding-left")),e=parseInt(e.css("padding-right"));return{container:t=window.matchMedia("(max-width: 768px)").matches?n-r:500,textContainer:t-e-i}}),closeEveryItemInContainer=function(e){var t=e.find(".products-menu__item"),e=e.find(".products-menu__content");t.removeClass("active"),e.width(0)},openAcc=function(e){var t=e.find(".products-menu__content"),n=mesureWidth(e),r=e.find(".products-menu__container");e.addClass("active"),t.width(n.container),r.width(n.textContainer),console.log(n.container)},validateFields=($(".products-menu__title").on("click",function(e){e.preventDefault();var e=$(e.currentTarget),t=e.closest(".products-menu__item"),n=t.hasClass("active");e.closest(".products-menu__item");n?($(".products-menu__item").removeClass("active"),$(".products-menu__content").width(0)):($(".products-menu__item").removeClass("active"),$(".products-menu__content").width(0),openAcc(t))}),function(e,t){return t.forEach(function(e){e.removeClass("input-error"),""===e.val().trim()&&e.addClass("input-error")}),0===e.find(".input-error").length}),sections=($(".form").submit(function(e){e.preventDefault();var e=$(e.currentTarget),t=e.find("[name='name']"),n=e.find("[name='phone']"),r=e.find("[name='comment']"),i=e.find("[name='to']"),o=$("#modal"),s=o.find(".modal__content");o.removeClass("error-modal"),validateFields(e,[t,n,r,i])&&$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:t.val(),phone:n.val(),comment:r.val(),to:i.val()},success:function(e){s.text(e.message),$.fancybox.open({src:"#modal",type:"inline"})},error:function(e){s.text(e.message),o.addClass("error-modal"),$.fancybox.oopen({scr:"#modal",type:"inline"})}})}),$(".modal__button").on("click",function(e){e.preventDefault(),$.fancybox.close()}),$("section")),display=$(".maincontent"),mobileDetect=new MobileDetect(window.navigator.userAgent),isMobile=mobileDetect.mobile(),inScroll=!1,performTransition=(sections.first().addClass("active"),function(e){var t,n,r;!1===inScroll&&(inScroll=!0,t=-100*e,n=sections.eq(e).attr("data-sidemenu-theme"),r=$(".fixed-menu"),"black"===n?r.addClass("fixed-menu--shadowed"):r.removeClass("fixed-menu--shadowed"),display.css({transform:"translateY(".concat(t,"%)")}),sections.eq(e).addClass("active").siblings().removeClass("active"),setTimeout(function(){inScroll=!1,r.find(".fixed-menu__item").eq(e).addClass("fixed-menu__item--active").siblings().removeClass("fixed-menu__item--active")},1300))}),scrollViewport=function(e){var t=sections.filter(".active"),n=t.next(),t=t.prev();"next"===e&&n.length&&performTransition(n.index()),"prev"===e&&t.length&&performTransition(t.index())},form=($(window).on("wheel",function(e){e=e.originalEvent.deltaY;0<e&&scrollViewport("next"),e<0&&scrollViewport("prev")}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase();if("input"!==t&&"textarea"!==t)switch(e.keyCode){case 38:scrollViewport("prev");break;case 40:scrollViewport("next")}}),$(".wrapper").on("touchmove",function(e){return e.preventDefault()}),$("[data-scroll-to]").click(function(e){e.preventDefault();e=$(e.currentTarget).attr("data-scroll-to"),e=$("[data-section-id=".concat(e,"]"));performTransition(e.index())}),$(window).on("load",function(e){function r(e){var e=Math.round(e),t=n(Math.floor(e/60)),e=n(e-60*t);function n(e){return(e<10?"0":"").concat(e)}return"".concat(t,":").concat(e)}var i,t,o,n,s=$(".player");i=document.getElementById("video"),$(".player__start").on("click",function(e){e.preventDefault(),s.hasClass("paused")?(s.removeClass("paused"),i.pause()):(s.addClass("paused"),i.play()),s.hasClass("active")||s.addClass("active")}),$(".player__playback").on("click",function(e){var t=$(e.currentTarget),e=e.originalEvent.layerX/t.width()*100,t=i.duration/100*e;s.hasClass("active")||s.addClass("active"),s.hasClass("paused")||(s.addClass("paused"),i.play()),$(".player__playback-button").css("left","".concat(e,"%")),i.currentTime=t}),$(".player__video-btn").on("click",function(e){document.getElementById("videobtn").style.display="none",s.hasClass("active")?s.removeClass("active"):s.addClass("active"),s.hasClass("paused")?(s.removeClass("paused"),i.pause()):(s.addClass("paused"),i.play())}),$(".player__sound").on("click",function(e){var t=$(e.currentTarget),e=e.originalEvent.layerX/t.width()*100,t=.01*e;$(".player__sound-button").css("left","".concat(e,"%")),i.volume=t}),$(".player__mute").on("click",function(e){i.muted?(console.log("Ð£Ð±Ð¸ÑÐ°ÐµÐ¼ Ð¼ÑÑ"),$(".player__sound-button").removeClass("muted"),i.muted=!1):(console.log("ÐÑÑ Ð·Ð²ÑÐºÐ°"),$(".player__sound-button").addClass("muted"),i.muted=!0)}),o=i.duration,n=r(o),$(".player__duration-estimate").text(n),void 0!==t&&clearInterval(t),setInterval(function(e){var t=Math.trunc(i.currentTime),n=t/o*100;$(".player__playback-button").css("left","".concat(n,"%")),$(".player__duration-completed").text(r(t))},1e3)}),$(".proslider").bxSlider({pager:!1}),document.querySelector("#order_form")),sendBtn=document.querySelector("#send-button");function isFormValid(e){var t=!0;return validation(e.elements.name)||(t=!1),validation(e.elements.phone)||(t=!1),t=validation(e.elements.comment)?t:!1}function validation(e){return e.checkValidity()?(e.nextElementSibling.textContent="",e.classList.remove("form__input-error"),!0):(e.nextElementSibling.textContent=e.validationMessage,e.classList.add("form__input-error"),!1)}sendBtn.addEventListener("click",function(e){e.preventDefault(),isFormValid(form)?console.log("Sending to server..."):console.log("Form is not valid!")});var phone=document.querySelector("#phone");phone&&phone.addEventListener("keydown",function(e){var t=!1,n=!1,r=!1,i=!1;(0<=e.key||e.key<=9)&&(t=!0),"+"===e.key&&(n=!0),"-"===e.key&&(r=!0),"ArrowRight"!==e.key&&"ArrowLeft"!==e.key&&"Backspace"!==e.key||(i=!0),t||n||r||i||e.preventDefault()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
