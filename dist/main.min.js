"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(e.document)return t(e);throw new Error("jQuery requires a window with a document")}:t(e)}("undefined"!=typeof window?window:void 0,function(w,O){function y(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}function g(e){return null!=e&&e===e.window}var t=[],I=Object.getPrototypeOf,a=t.slice,H=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},$=t.push,R=t.indexOf,W={},F=W.toString,z=W.hasOwnProperty,B=z.toString,U=B.call(Object),v={},T=w.document,X={type:!0,src:!0,nonce:!0,noModule:!0};function V(e,t,n){var i,r,o=(n=n||T).createElement("script");if(o.text=e,t)for(i in X)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function h(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?W[F.call(e)]||"object":_typeof(e)}var e="3.6.1",S=function e(t,n){return new e.fn.init(t,n)};function Y(e){var t=!!e&&"length"in e&&e.length,n=h(e);return!y(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}S.fn=S.prototype={jquery:e,constructor:S,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=S.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return S.each(this,e)},map:function(n){return this.pushStack(S.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:$,sort:t.sort,splice:t.splice},S.extend=S.fn.extend=function(){var e,t,n,i,r,o=arguments[0]||{},s=1,a=arguments.length,l=!1;for("boolean"==typeof o&&(l=o,o=arguments[s]||{},s++),"object"===_typeof(o)||y(o)||(o={}),s===a&&(o=this,s--);s<a;s++)if(null!=(e=arguments[s]))for(t in e)n=e[t],"__proto__"!==t&&o!==n&&(l&&n&&(S.isPlainObject(n)||(i=Array.isArray(n)))?(r=o[t],r=i&&!Array.isArray(r)?[]:i||S.isPlainObject(r)?r:{},i=!1,o[t]=S.extend(l,r,n)):void 0!==n&&(o[t]=n));return o},S.extend({expando:"jQuery"+(e+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==F.call(e))&&(!(e=I(e))||"function"==typeof(e=z.call(e,"constructor")&&e.constructor)&&B.call(e)===U)},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){V(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(Y(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(Y(Object(e))?S.merge(t,"string"==typeof e?[e]:e):$.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:R.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!=s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(Y(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return H(s)},guid:1,support:v}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=t[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){W["[object "+t+"]"]=t.toLowerCase()});function i(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&S(e).is(n))break;i.push(e)}return i}function Q(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var e=function(O){function d(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function I(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function H(){T()}var e,p,b,o,$,f,R,W,w,l,c,T,S,n,C,h,i,r,g,E="sizzle"+ +new Date,u=O.document,k=0,F=0,z=P(),B=P(),U=P(),v=P(),X=function(e,t){return e===t&&(c=!0),0},V={}.hasOwnProperty,t=[],Y=t.pop,Q=t.push,D=t.push,G=t.slice,y=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",s="[\\x20\\t\\r\\n\\f]",a="(?:\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",Z="\\["+s+"*("+a+")(?:"+s+"*([*^$|!~]?=)"+s+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+a+"))|)"+s+"*\\]",K=":("+a+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Z+")*)|.*)\\)|)",ee=new RegExp(s+"+","g"),m=new RegExp("^"+s+"+|((?:^|[^\\\\])(?:\\\\.)*)"+s+"+$","g"),te=new RegExp("^"+s+"*,"+s+"*"),ne=new RegExp("^"+s+"*([>+~]|"+s+")"+s+"*"),ie=new RegExp(s+"|>"),re=new RegExp(K),oe=new RegExp("^"+a+"$"),x={ID:new RegExp("^#("+a+")"),CLASS:new RegExp("^\\.("+a+")"),TAG:new RegExp("^("+a+"|[*])"),ATTR:new RegExp("^"+Z),PSEUDO:new RegExp("^"+K),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+s+"*(even|odd|(([+-]|)(\\d*)n|)"+s+"*(?:([+-]|)"+s+"*(\\d+)|))"+s+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+s+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+s+"*((?:-\\d)?\\d*)"+s+"*\\)|)(?=[^-]|$)","i")},se=/HTML$/i,ae=/^(?:input|select|textarea|button)$/i,le=/^h\d$/i,A=/^[^{]+\{\s*\[native \w/,ce=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ue=/[+~]/,N=new RegExp("\\\\[\\da-fA-F]{1,6}"+s+"?|\\\\([^\\r\\n\\f])","g"),de=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,pe=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{D.apply(t=G.call(u.childNodes),u.childNodes),t[u.childNodes.length].nodeType}catch(e){D={apply:t.length?function(e,t){Q.apply(e,G.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function j(t,e,n,i){var r,o,s,a,l,c,u=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!i&&(T(e),e=e||S,C)){if(11!==d&&(a=ce.exec(t)))if(r=a[1]){if(9===d){if(!(c=e.getElementById(r)))return n;if(c.id===r)return n.push(c),n}else if(u&&(c=u.getElementById(r))&&g(e,c)&&c.id===r)return n.push(c),n}else{if(a[2])return D.apply(n,e.getElementsByTagName(t)),n;if((r=a[3])&&p.getElementsByClassName&&e.getElementsByClassName)return D.apply(n,e.getElementsByClassName(r)),n}if(p.qsa&&!v[t+" "]&&(!h||!h.test(t))&&(1!==d||"object"!==e.nodeName.toLowerCase())){if(c=t,u=e,1===d&&(ie.test(t)||ne.test(t))){for((u=ue.test(t)&&ve(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute("id"))?s=s.replace(de,I):e.setAttribute("id",s=E)),o=(l=f(t)).length;o--;)l[o]=(s?"#"+s:":scope")+" "+q(l[o]);c=l.join(",")}try{return D.apply(n,u.querySelectorAll(c)),n}catch(e){v(t,!0)}finally{s===E&&e.removeAttribute("id")}}}return W(t.replace(m,"$1"),e,n,i)}function P(){var n=[];function i(e,t){return n.push(e+" ")>b.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function L(e){return e[E]=!0,e}function _(e){var t=S.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t)}}function fe(e,t){for(var n=e.split("|"),i=n.length;i--;)b.attrHandle[n[i]]=t}function he(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&pe(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function M(s){return L(function(o){return o=+o,L(function(e,t){for(var n,i=s([],e.length,o),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in p=j.support={},$=j.isXML=function(e){var t=e&&e.namespaceURI,e=e&&(e.ownerDocument||e).documentElement;return!se.test(t||e&&e.nodeName||"HTML")},T=j.setDocument=function(e){var e=e?e.ownerDocument||e:u;return e!=S&&9===e.nodeType&&e.documentElement&&(n=(S=e).documentElement,C=!$(S),u!=S&&(e=S.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",H,!1):e.attachEvent&&e.attachEvent("onunload",H)),p.scope=_(function(e){return n.appendChild(e).appendChild(S.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),p.attributes=_(function(e){return e.className="i",!e.getAttribute("className")}),p.getElementsByTagName=_(function(e){return e.appendChild(S.createComment("")),!e.getElementsByTagName("*").length}),p.getElementsByClassName=A.test(S.getElementsByClassName),p.getById=_(function(e){return n.appendChild(e).id=E,!S.getElementsByName||!S.getElementsByName(E).length}),p.getById?(b.filter.ID=function(e){var t=e.replace(N,d);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&C)return(t=t.getElementById(e))?[t]:[]}):(b.filter.ID=function(e){var t=e.replace(N,d);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&C){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=p.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[r++];)1===n.nodeType&&i.push(n);return i},b.find.CLASS=p.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&C)return t.getElementsByClassName(e)},i=[],h=[],(p.qsa=A.test(S.querySelectorAll))&&(_(function(e){var t;n.appendChild(e).innerHTML="<a id='"+E+"'></a><select id='"+E+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]="+s+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||h.push("\\["+s+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+E+"-]").length||h.push("~="),(t=S.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||h.push("\\["+s+"*name"+s+"*="+s+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||h.push(":checked"),e.querySelectorAll("a#"+E+"+*").length||h.push(".#.+[+~]"),e.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")}),_(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=S.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&h.push("name"+s+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),n.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),h.push(",.*:")})),(p.matchesSelector=A.test(r=n.matches||n.webkitMatchesSelector||n.mozMatchesSelector||n.oMatchesSelector||n.msMatchesSelector))&&_(function(e){p.disconnectedMatch=r.call(e,"*"),r.call(e,"[s!='']:x"),i.push("!=",K)}),h=h.length&&new RegExp(h.join("|")),i=i.length&&new RegExp(i.join("|")),e=A.test(n.compareDocumentPosition),g=e||A.test(n.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},X=e?function(e,t){var n;return e===t?(c=!0,0):(n=!e.compareDocumentPosition-!t.compareDocumentPosition)||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==S||e.ownerDocument==u&&g(u,e)?-1:t==S||t.ownerDocument==u&&g(u,t)?1:l?y(l,e)-y(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e==S?-1:t==S?1:r?-1:o?1:l?y(l,e)-y(l,t):0;if(r===o)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?he(s[i],a[i]):s[i]==u?-1:a[i]==u?1:0}),S},j.matches=function(e,t){return j(e,null,null,t)},j.matchesSelector=function(e,t){if(T(e),p.matchesSelector&&C&&!v[t+" "]&&(!i||!i.test(t))&&(!h||!h.test(t)))try{var n=r.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){v(t,!0)}return 0<j(t,S,null,[e]).length},j.contains=function(e,t){return(e.ownerDocument||e)!=S&&T(e),g(e,t)},j.attr=function(e,t){(e.ownerDocument||e)!=S&&T(e);var n=b.attrHandle[t.toLowerCase()],n=n&&V.call(b.attrHandle,t.toLowerCase())?n(e,t,!C):void 0;return void 0!==n?n:p.attributes||!C?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},j.escape=function(e){return(e+"").replace(de,I)},j.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},j.uniqueSort=function(e){var t,n=[],i=0,r=0;if(c=!p.detectDuplicates,l=!p.sortStable&&e.slice(0),e.sort(X),c){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return l=null,e},o=j.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(b=j.selectors={cacheLength:50,createPseudo:L,match:x,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(N,d),e[3]=(e[3]||e[4]||e[5]||"").replace(N,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||j.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&j.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return x.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&re.test(n)&&(t=f(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(N,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+s+")"+e+"("+s+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(e){e=j.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===i:"!="===n?e!==i:"^="===n?i&&0===e.indexOf(i):"*="===n?i&&-1<e.indexOf(i):"$="===n?i&&e.slice(-i.length)===i:"~="===n?-1<(" "+e.replace(ee," ")+" ").indexOf(i):"|="===n&&(e===i||e.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var m="nth"!==h.slice(0,3),y="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var i,r,o,s,a,l,c=m!=y?"nextSibling":"previousSibling",u=e.parentNode,d=x&&e.nodeName.toLowerCase(),p=!n&&!x,f=!1;if(u){if(m){for(;c;){for(s=e;s=s[c];)if(x?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&p){for(f=(a=(i=(r=(o=(s=u)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===e){r[h]=[k,a,f];break}}else if(!1===(f=p?a=(i=(r=(o=(s=e)[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]||[])[0]===k&&i[1]:f))for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((x?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((r=(o=s[E]||(s[E]={}))[s.uniqueID]||(o[s.uniqueID]={}))[h]=[k,f]),s!==e)););return(f-=v)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,o){var t,s=b.pseudos[e]||b.setFilters[e.toLowerCase()]||j.error("unsupported pseudo: "+e);return s[E]?s(o):1<s.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?L(function(e,t){for(var n,i=s(e,o),r=i.length;r--;)e[n=y(e,i[r])]=!(t[n]=i[r])}):function(e){return s(e,0,t)}):s}},pseudos:{not:L(function(e){var i=[],r=[],a=R(e.replace(m,"$1"));return a[E]?L(function(e,t,n,i){for(var r,o=a(e,null,i,[]),s=e.length;s--;)(r=o[s])&&(e[s]=!(t[s]=r))}):function(e,t,n){return i[0]=e,a(i,null,n,r),i[0]=null,!r.pop()}}),has:L(function(t){return function(e){return 0<j(t,e).length}}),contains:L(function(t){return t=t.replace(N,d),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:L(function(n){return oe.test(n||"")||j.error("unsupported lang: "+n),n=n.replace(N,d).toLowerCase(),function(e){var t;do{if(t=C?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=O.location&&O.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===n},focus:function(e){return e===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return le.test(e.nodeName)},input:function(e){return ae.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:M(function(){return[0]}),last:M(function(e,t){return[t-1]}),eq:M(function(e,t,n){return[n<0?n+t:n]}),even:M(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:M(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:M(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:M(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function me(){}function q(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(s,e,t){var a=e.dir,l=e.next,c=l||a,u=t&&"parentNode"===c,d=F++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||u)return s(e,t,n);return!1}:function(e,t,n){var i,r,o=[k,d];if(n){for(;e=e[a];)if((1===e.nodeType||u)&&s(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||u)if(r=(r=e[E]||(e[E]={}))[e.uniqueID]||(r[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[a]||e;else{if((i=r[c])&&i[0]===k&&i[1]===d)return o[2]=i[2];if((r[c]=o)[2]=s(e,t,n))return!0}return!1}}function xe(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function be(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)!(o=e[a])||n&&!n(o,i,r)||(s.push(o),c&&t.push(a));return s}function we(f,h,g,v,m,e){return v&&!v[E]&&(v=we(v)),m&&!m[E]&&(m=we(m,e)),L(function(e,t,n,i){var r,o,s,a=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)j(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?u:be(u,a,f,n,i),p=g?m||(e?f:c||v)?[]:t:d;if(g&&g(d,p,n,i),v)for(r=be(p,l),v(r,[],n,i),o=r.length;o--;)(s=r[o])&&(p[l[o]]=!(d[l[o]]=s));if(e){if(m||f){if(m){for(r=[],o=p.length;o--;)(s=p[o])&&r.push(d[o]=s);m(null,p=[],r,i)}for(o=p.length;o--;)(s=p[o])&&-1<(r=m?y(e,s):a[o])&&(e[r]=!(t[r]=s))}}else p=be(p===t?p.splice(c,p.length):p),m?m(null,t,p,i):D.apply(t,p)})}function Te(v,m){function e(e,t,n,i,r){var o,s,a,l=0,c="0",u=e&&[],d=[],p=w,f=e||x&&b.find.TAG("*",r),h=k+=null==p?1:Math.random()||.1,g=f.length;for(r&&(w=t==S||t||r);c!==g&&null!=(o=f[c]);c++){if(x&&o){for(s=0,t||o.ownerDocument==S||(T(o),n=!C);a=v[s++];)if(a(o,t||S,n)){i.push(o);break}r&&(k=h)}y&&((o=!a&&o)&&l--,e&&u.push(o))}if(l+=c,y&&c!==l){for(s=0;a=m[s++];)a(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=Y.call(i));d=be(d)}D.apply(i,d),r&&!e&&0<d.length&&1<l+m.length&&j.uniqueSort(i)}return r&&(k=h,w=p),u}var y=0<m.length,x=0<v.length;return y?L(e):e}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,f=j.tokenize=function(e,t){var n,i,r,o,s,a,l,c=B[e+" "];if(c)return t?0:c.slice(0);for(s=e,a=[],l=b.preFilter;s;){for(o in n&&!(i=te.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(r=[])),n=!1,(i=ne.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace(m," ")}),s=s.slice(n.length)),b.filter)!(i=x[o].exec(s))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?j.error(e):B(e,a).slice(0)},R=j.compile=function(e,t){var n,i=[],r=[],o=U[e+" "];if(!o){for(n=(t=t||f(e)).length;n--;)((o=function e(t){for(var i,n,r,o=t.length,s=b.relative[t[0].type],a=s||b.relative[" "],l=s?1:0,c=ye(function(e){return e===i},a,!0),u=ye(function(e){return-1<y(i,e)},a,!0),d=[function(e,t,n){return e=!s&&(n||t!==w)||((i=t).nodeType?c:u)(e,t,n),i=null,e}];l<o;l++)if(n=b.relative[t[l].type])d=[ye(xe(d),n)];else{if((n=b.filter[t[l].type].apply(null,t[l].matches))[E]){for(r=++l;r<o&&!b.relative[t[r].type];r++);return we(1<l&&xe(d),1<l&&q(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(m,"$1"),n,l<r&&e(t.slice(l,r)),r<o&&e(t=t.slice(r)),r<o&&q(t))}d.push(n)}return xe(d)}(t[n]))[E]?i:r).push(o);(o=U(e,Te(r,i))).selector=e}return o},W=j.select=function(e,t,n,i){var r,o,s,a,l,c="function"==typeof e&&e,u=!i&&f(e=c.selector||e);if(n=n||[],1===u.length){if(2<(o=u[0]=u[0].slice(0)).length&&"ID"===(s=o[0]).type&&9===t.nodeType&&C&&b.relative[o[1].type]){if(!(t=(b.find.ID(s.matches[0].replace(N,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=x.needsContext.test(e)?0:o.length;r--&&(s=o[r],!b.relative[a=s.type]);)if((l=b.find[a])&&(i=l(s.matches[0].replace(N,d),ue.test(o[0].type)&&ve(t.parentNode)||t))){if(o.splice(r,1),e=i.length&&q(o))break;return D.apply(n,i),n}}return(c||R(e,u))(i,t,!C,n,!t||ue.test(e)&&ve(t.parentNode)||t),n},p.sortStable=E.split("").sort(X).join("")===E,p.detectDuplicates=!!c,T(),p.sortDetached=_(function(e){return 1&e.compareDocumentPosition(S.createElement("fieldset"))}),_(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),p.attributes&&_(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),_(function(e){return null==e.getAttribute("disabled")})||fe(J,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),j}(w),G=(S.find=e,S.expr=e.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=e.uniqueSort,S.text=e.getText,S.isXMLDoc=e.isXML,S.contains=e.contains,S.escapeSelector=e.escape,S.expr.match.needsContext);function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var J=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function Z(e,n,i){return y(n)?S.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?S.grep(e,function(e){return e===n!==i}):"string"!=typeof n?S.grep(e,function(e){return-1<R.call(n,e)!==i}):S.filter(n,e,i)}S.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?S.find.matchesSelector(i,e)?[i]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<i;t++)if(S.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)S.find(e,r[t],n);return 1<i?S.uniqueSort(n):n},filter:function(e){return this.pushStack(Z(this,e||[],!1))},not:function(e){return this.pushStack(Z(this,e||[],!0))},is:function(e){return!!Z(this,"string"==typeof e&&G.test(e)?S(e):e||[],!1).length}});var K,ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,te=((S.fn.init=function(e,t,n){if(e){if(n=n||K,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:ee.exec(e))||!i[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(i[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:T,!0)),J.test(i[1])&&S.isPlainObject(t))for(var i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i])}else(n=T.getElementById(i[2]))&&(this[0]=n,this.length=1)}return this}).prototype=S.fn,K=S(T),/^(?:parents|prev(?:Until|All))/),ne={children:!0,contents:!0,next:!0,prev:!0};function ie(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&S(e);if(!G.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?S.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?R.call(S(e),this[0]):R.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){return(e=e.parentNode)&&11!==e.nodeType?e:null},parents:function(e){return i(e,"parentNode")},parentsUntil:function(e,t,n){return i(e,"parentNode",n)},next:function(e){return ie(e,"nextSibling")},prev:function(e){return ie(e,"previousSibling")},nextAll:function(e){return i(e,"nextSibling")},prevAll:function(e){return i(e,"previousSibling")},nextUntil:function(e,t,n){return i(e,"nextSibling",n)},prevUntil:function(e,t,n){return i(e,"previousSibling",n)},siblings:function(e){return Q((e.parentNode||{}).firstChild,e)},children:function(e){return Q(e.firstChild)},contents:function(e){return null!=e.contentDocument&&I(e.contentDocument)?e.contentDocument:(l(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(i,r){S.fn[i]=function(e,t){var n=S.map(this,r,e);return(t="Until"!==i.slice(-5)?e:t)&&"string"==typeof t&&(n=S.filter(t,n)),1<this.length&&(ne[i]||S.uniqueSort(n),te.test(i)&&n.reverse()),this.pushStack(n)}});var C=/[^\x20\t\r\n\f]+/g;function u(e){return e}function re(e){throw e}function oe(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},S.each(e.match(C)||[],function(e,t){n[t]=!0}),n):S.extend({},i);function r(){for(a=a||i.once,s=o=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&i.stopOnFalse&&(u=l.length,t=!1);i.memory||(t=!1),o=!1,a&&(l=t?[]:"")}var o,t,s,a,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!o&&(u=l.length-1,c.push(t)),function n(e){S.each(e,function(e,t){y(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==h(t)&&n(t)})}(arguments),t&&!o&&r()),this},remove:function(){return S.each(arguments,function(e,t){for(var n;-1<(n=S.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<S.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return a=c=[],t||o||(l=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),o||r()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},S.extend({Deferred:function(e){var o=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],r="pending",s={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var r=arguments;return S.Deferred(function(i){S.each(o,function(e,t){var n=y(r[t[4]])&&r[t[4]];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&y(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),r=null}).promise()},then:function(t,n,i){var l=0;function c(r,o,s,a){return function(){function e(){var e,t;if(!(r<l)){if((e=s.apply(n,i))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,y(t)?a?t.call(e,c(l,o,u,a),c(l,o,re,a)):(l++,t.call(e,c(l,o,u,a),c(l,o,re,a),c(l,o,u,o.notifyWith))):(s!==u&&(n=void 0,i=[e]),(a||o.resolveWith)(n,i))}}var n=this,i=arguments,t=a?e:function(){try{e()}catch(e){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(s!==re&&(n=void 0,i=[e]),o.rejectWith(n,i))}};r?t():(S.Deferred.getStackHook&&(t.stackTrace=S.Deferred.getStackHook()),w.setTimeout(t))}}return S.Deferred(function(e){o[0][3].add(c(0,e,y(i)?i:u,e.notifyWith)),o[1][3].add(c(0,e,y(t)?t:u)),o[2][3].add(c(0,e,y(n)?n:re))}).promise()},promise:function(e){return null!=e?S.extend(e,s):s}},a={};return S.each(o,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){r=i},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),a[t[0]]=function(){return a[t[0]+"With"](this===a?void 0:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t){return function(e){r[t]=this,o[t]=1<arguments.length?a.call(arguments):e,--n||s.resolveWith(r,o)}}var n=arguments.length,i=n,r=Array(i),o=a.call(arguments),s=S.Deferred();if(n<=1&&(oe(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||y(o[i]&&o[i].then)))return s.then();for(;i--;)oe(o[i],t(i),s.reject);return s.promise()}});var se=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/,ae=(S.Deferred.exceptionHook=function(e,t){w.console&&w.console.warn&&e&&se.test(e.name)&&w.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){w.setTimeout(function(){throw e})},S.Deferred());function le(){T.removeEventListener("DOMContentLoaded",le),w.removeEventListener("load",le),S.ready()}S.fn.ready=function(e){return ae.then(e).catch(function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0)!==e&&0<--S.readyWait||ae.resolveWith(T,[S])}}),S.ready.then=ae.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?w.setTimeout(S.ready):(T.addEventListener("DOMContentLoaded",le),w.addEventListener("load",le));function d(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===h(n))for(a in r=!0,n)d(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,y(i)||(s=!0),t=c?s?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(S(e),n)}):t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o}var ce=/^-ms-/,ue=/-([a-z])/g;function de(e,t){return t.toUpperCase()}function x(e){return e.replace(ce,"ms-").replace(ue,de)}function m(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function pe(){this.expando=S.expando+pe.uid++}pe.uid=1,pe.prototype={cache:function(e){var t=e[this.expando];return t||(t={},m(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[x(t)]=n;else for(i in t)r[x(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][x(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(x):(t=x(t))in i?[t]:t.match(C)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!S.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var b=new pe,c=new pe,fe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,he=/[A-Z]/g;function ge(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(he,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:fe.test(r)?JSON.parse(r):r)}catch(e){}c.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return c.hasData(e)||b.hasData(e)},data:function(e,t,n){return c.access(e,t,n)},removeData:function(e,t){c.remove(e,t)},_data:function(e,t,n){return b.access(e,t,n)},_removeData:function(e,t){b.remove(e,t)}}),S.fn.extend({data:function(n,e){var t,i,r,o=this[0],s=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){c.set(this,n)}):d(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=c.get(o,n))||void 0!==(t=ge(o,n))?t:void 0;this.each(function(){c.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=c.get(o),1===o.nodeType&&!b.get(o,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=x(i.slice(5)),ge(o,i,r[i]));b.set(o,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){c.remove(this,e)})}}),S.extend({queue:function(e,t,n){var i;if(e)return i=b.get(e,t=(t||"fx")+"queue"),n&&(!i||Array.isArray(n)?i=b.access(e,t,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),i=n.length,r=n.shift(),o=S._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){S.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return b.get(e,n)||b.access(e,n,{empty:S.Callbacks("once memory").add(function(){b.remove(e,[t+"queue",n])})})}}),S.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?S.queue(this[0],t):void 0===n?this:this.each(function(){var e=S.queue(this,t,n);S._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&S.dequeue(this,t)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||o.resolveWith(s,[s])}var i,r=1,o=S.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=b.get(s[a],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),o.promise(t)}});function ve(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&k(e)&&"none"===S.css(e,"display")}var e=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,me=new RegExp("^(?:([+-])=|)("+e+")([a-z%]*)$","i"),p=["Top","Right","Bottom","Left"],E=T.documentElement,k=function(e){return S.contains(e.ownerDocument,e)},ye={composed:!0};E.getRootNode&&(k=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});function xe(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return S.css(e,t,"")},l=a(),c=n&&n[3]||(S.cssNumber[t]?"":"px"),u=e.nodeType&&(S.cssNumber[t]||"px"!==c&&+l)&&me.exec(S.css(e,t));if(u&&u[3]!==c){for(c=c||u[3],u=+(l/=2)||1;s--;)S.style(e,t,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;S.style(e,t,(u*=2)+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var be={};function D(e,t){for(var n,i,r,o,s,a=[],l=0,c=e.length;l<c;l++)(i=e[l]).style&&(n=i.style.display,t?("none"===n&&(a[l]=b.get(i,"display")||null,a[l]||(i.style.display="")),""===i.style.display&&ve(i)&&(a[l]=(s=o=void 0,o=(r=i).ownerDocument,r=r.nodeName,(s=be[r])||(o=o.body.appendChild(o.createElement(r)),s=S.css(o,"display"),o.parentNode.removeChild(o),be[r]=s="none"===s?"block":s),s))):"none"!==n&&(a[l]="none",b.set(i,"display",n)));for(l=0;l<c;l++)null!=a[l]&&(e[l].style.display=a[l]);return e}S.fn.extend({show:function(){return D(this,!0)},hide:function(){return D(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ve(this)?S(this).show():S(this).hide()})}});var we=/^(?:checkbox|radio)$/i,Te=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Se=/^$|^module$|\/(?:java|ecma)script/i,A=(L=T.createDocumentFragment().appendChild(T.createElement("div")),(o=T.createElement("input")).setAttribute("type","radio"),o.setAttribute("checked","checked"),o.setAttribute("name","t"),L.appendChild(o),v.checkClone=L.cloneNode(!0).cloneNode(!0).lastChild.checked,L.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!L.cloneNode(!0).lastChild.defaultValue,L.innerHTML="<option></option>",v.option=!!L.lastChild,{thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]});function N(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&l(e,t)?S.merge([e],n):n}function Ce(e,t){for(var n=0,i=e.length;n<i;n++)b.set(e[n],"globalEval",!t||b.get(t[n],"globalEval"))}A.tbody=A.tfoot=A.colgroup=A.caption=A.thead,A.th=A.td,v.option||(A.optgroup=A.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function ke(e,t,n,i,r){for(var o,s,a,l,c,u=t.createDocumentFragment(),d=[],p=0,f=e.length;p<f;p++)if((o=e[p])||0===o)if("object"===h(o))S.merge(d,o.nodeType?[o]:o);else if(Ee.test(o)){for(s=s||u.appendChild(t.createElement("div")),a=(Te.exec(o)||["",""])[1].toLowerCase(),a=A[a]||A._default,s.innerHTML=a[1]+S.htmlPrefilter(o)+a[2],c=a[0];c--;)s=s.lastChild;S.merge(d,s.childNodes),(s=u.firstChild).textContent=""}else d.push(t.createTextNode(o));for(u.textContent="",p=0;o=d[p++];)if(i&&-1<S.inArray(o,i))r&&r.push(o);else if(l=k(o),s=N(u.appendChild(o),"script"),l&&Ce(s),n)for(c=0;o=s[c++];)Se.test(o.type||"")&&n.push(o);return u}var De=/^([^.]*)(?:\.(.+)|)/;function n(){return!0}function f(){return!1}function Ae(e,t){return e===function(){try{return T.activeElement}catch(e){}}()==("focus"===t)}function Ne(e,t,n,i,r,o){var s,a;if("object"===_typeof(t)){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ne(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=f;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return S().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),e.each(function(){S.event.add(this,t,r,i,n)})}function je(e,r,o){o?(b.set(e,r,!1),S.event.add(e,r,{namespace:!1,handler:function(e){var t,n,i=b.get(this,r);if(1&e.isTrigger&&this[r]){if(i.length)(S.event.special[r]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),b.set(this,r,i),t=o(this,r),this[r](),i!==(n=b.get(this,r))||t?b.set(this,r,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else i.length&&(b.set(this,r,{value:S.event.trigger(S.extend(i[0],S.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===b.get(e,r)&&S.event.add(e,r,n)}S.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,d,p,f,h=b.get(t);if(m(t))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&S.find.matchesSelector(E,r),n.guid||(n.guid=S.guid++),(a=h.events)||(a=h.events=Object.create(null)),(s=h.handle)||(s=h.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(C)||[""]).length;l--;)d=f=(p=De.exec(e[l])||[])[1],p=(p[2]||"").split(".").sort(),d&&(c=S.event.special[d]||{},d=(r?c.delegateType:c.bindType)||d,c=S.event.special[d]||{},f=S.extend({type:d,origType:f,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&S.expr.match.needsContext.test(r),namespace:p.join(".")},o),(u=a[d])||((u=a[d]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(d,s)),c.add&&(c.add.call(t,f),f.handler.guid||(f.handler.guid=n.guid)),r?u.splice(u.delegateCount++,0,f):u.push(f),S.event.global[d]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,c,u,d,p,f,h,g,v=b.hasData(e)&&b.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(C)||[""]).length;c--;)if(f=g=(a=De.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=S.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,v.handle)||S.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)S.event.remove(e,f+t[c],n,i,!0);S.isEmptyObject(l)&&b.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s=new Array(arguments.length),a=S.event.fix(e),e=(b.get(this,"events")||Object.create(null))[a.type]||[],l=S.event.special[a.type]||{};for(s[0]=a,t=1;t<arguments.length;t++)s[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(o=S.event.handlers.call(this,a,e),t=0;(i=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(r=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==r.namespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(r=((S.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,s))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?-1<S(r,this).index(c):S.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&je(e,"click",n),!1},trigger:function(e){e=this||e;return we.test(e.type)&&e.click&&l(e,"input")&&je(e,"click"),!0},_default:function(e){e=e.target;return we.test(e.type)&&e.click&&l(e,"input")&&b.get(e,"click")||l(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?n:f,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:f,isPropagationStopped:f,isImmediatePropagationStopped:f,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=n,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=n,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=n,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},function(t,e){S.event.special[t]={setup:function(){return je(this,t,Ae),!1},trigger:function(){return je(this,t),!0},_default:function(e){return b.get(e.target,t)},delegateType:e}}),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){S.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||S.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),S.fn.extend({on:function(e,t,n,i){return Ne(this,e,t,n,i)},one:function(e,t,n,i){return Ne(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)i=e.handleObj,S(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler);else{if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=f),this.each(function(){S.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r])}return this}});var Pe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,_e=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Me(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var n,i,r,o;if(1===t.nodeType){if(b.hasData(e)&&(o=b.get(e).events))for(r in b.remove(t,"handle events"),o)for(n=0,i=o[r].length;n<i;n++)S.event.add(t,r,o[r][n]);c.hasData(e)&&(e=c.access(e),e=S.extend({},e),c.set(t,e))}}function j(n,i,r,o){i=H(i);var e,t,s,a,l,c,u=0,d=n.length,p=d-1,f=i[0],h=y(f);if(h||1<d&&"string"==typeof f&&!v.checkClone&&Le.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),j(t,i,r,o)});if(d&&(t=(e=ke(i,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(a=(s=S.map(N(e,"script"),qe)).length;u<d;u++)l=e,u!==p&&(l=S.clone(l,!0,!0),a&&S.merge(s,N(l,"script"))),r.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,S.map(s,Oe),u=0;u<a;u++)l=s[u],Se.test(l.type||"")&&!b.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):V(l.textContent.replace(_e,""),l,c))}return n}function He(e,t,n){for(var i,r=t?S.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||S.cleanData(N(i)),i.parentNode&&(n&&k(i)&&Ce(N(i,"script")),i.parentNode.removeChild(i));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,s,a,l,c,u=e.cloneNode(!0),d=k(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(s=N(u),i=0,r=(o=N(e)).length;i<r;i++)a=o[i],l=s[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&we.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||N(e),s=s||N(u),i=0,r=o.length;i<r;i++)Ie(o[i],s[i]);else Ie(e,u);return 0<(s=N(u,"script")).length&&Ce(s,!d&&N(e,"script")),u},cleanData:function(e){for(var t,n,i,r=S.event.special,o=0;void 0!==(n=e[o]);o++)if(m(n)){if(t=n[b.expando]){if(t.events)for(i in t.events)r[i]?S.event.remove(n,i):S.removeEvent(n,i,t.handle);n[b.expando]=void 0}n[c.expando]&&(n[c.expando]=void 0)}}}),S.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return d(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return j(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return j(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Me(this,e)).insertBefore(e,t.firstChild)})},before:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return j(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(N(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return d(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!A[(Te.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(N(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return j(this,arguments,function(e){var t=this.parentNode;S.inArray(this,n)<0&&(S.cleanData(N(this)),t&&t.replaceChild(e,this))},n)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){S.fn[e]=function(e){for(var t,n=[],i=S(e),r=i.length-1,o=0;o<=r;o++)t=o===r?this:this.clone(!0),S(i[o])[s](t),$.apply(n,t.get());return this.pushStack(n)}});function $e(e){var t=e.ownerDocument.defaultView;return(t=t&&t.opener?t:w).getComputedStyle(e)}function Re(e,t,n){var i,r={};for(i in t)r[i]=e.style[i],e.style[i]=t[i];for(i in n=n.call(e),t)e.style[i]=r[i];return n}var We,Fe,ze,Be,Ue,Xe,Ve,r,Ye=new RegExp("^("+e+")(?!px)[a-z%]+$","i"),Qe=/^--/,Ge=new RegExp(p.join("|"),"i"),o="[\\x20\\t\\r\\n\\f]",Je=new RegExp("^"+o+"+|((?:^|[^\\\\])(?:\\\\.)*)"+o+"+$","g");function Ze(){var e;r&&(Ve.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",r.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",E.appendChild(Ve).appendChild(r),e=w.getComputedStyle(r),We="1%"!==e.top,Xe=12===Ke(e.marginLeft),r.style.right="60%",Be=36===Ke(e.right),Fe=36===Ke(e.width),r.style.position="absolute",ze=12===Ke(r.offsetWidth/3),E.removeChild(Ve),r=null)}function Ke(e){return Math.round(parseFloat(e))}function et(e,t,n){var i,r=Qe.test(t),o=e.style;return(n=n||$e(e))&&(i=n.getPropertyValue(t)||n[t],""!==(i=r?i.replace(Je,"$1"):i)||k(e)||(i=S.style(e,t)),!v.pixelBoxStyles()&&Ye.test(i)&&Ge.test(t)&&(r=o.width,e=o.minWidth,t=o.maxWidth,o.minWidth=o.maxWidth=o.width=i,i=n.width,o.width=r,o.minWidth=e,o.maxWidth=t)),void 0!==i?i+"":i}function tt(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ve=T.createElement("div"),(r=T.createElement("div")).style&&(r.style.backgroundClip="content-box",r.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===r.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return Ze(),Fe},pixelBoxStyles:function(){return Ze(),Be},pixelPosition:function(){return Ze(),We},reliableMarginLeft:function(){return Ze(),Xe},scrollboxSize:function(){return Ze(),ze},reliableTrDimensions:function(){var e,t,n;return null==Ue&&(e=T.createElement("table"),t=T.createElement("tr"),n=T.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",E.appendChild(e).appendChild(t).appendChild(n),n=w.getComputedStyle(t),Ue=parseInt(n.height,10)+parseInt(n.borderTopWidth,10)+parseInt(n.borderBottomWidth,10)===t.offsetHeight,E.removeChild(e)),Ue}}));var nt=["Webkit","Moz","ms"],it=T.createElement("div").style,rt={};function ot(e){var t=S.cssProps[e]||rt[e];return t||(e in it?e:rt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=nt.length;n--;)if((e=nt[n]+t)in it)return e}(e)||e)}var st=/^(none|table(?!-c[ea]).+)/,at={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"};function ct(e,t,n){var i=me.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ut(e,t,n,i,r,o){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=S.css(e,n+p[s],!0,r)),i?("content"===n&&(l-=S.css(e,"padding"+p[s],!0,r)),"margin"!==n&&(l-=S.css(e,"border"+p[s]+"Width",!0,r))):(l+=S.css(e,"padding"+p[s],!0,r),"padding"!==n?l+=S.css(e,"border"+p[s]+"Width",!0,r):a+=S.css(e,"border"+p[s]+"Width",!0,r));return!i&&0<=o&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function dt(e,t,n){var i=$e(e),r=(!v.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,i),o=r,s=et(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&l(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===S.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===S.css(e,"boxSizing",!1,i),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ut(e,t,n||(r?"border":"content"),o,i,s)+"px"}function s(e,t,n,i,r){return new s.prototype.init(e,t,n,i,r)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t)return""===(t=et(e,"opacity"))?"1":t}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=x(t),l=Qe.test(t),c=e.style;if(l||(t=ot(a)),s=S.cssHooks[t]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=_typeof(n))&&(r=me.exec(n))&&r[1]&&(n=xe(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(S.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o=x(t);return Qe.test(t)||(t=ot(o)),"normal"===(r=void 0===(r=(o=S.cssHooks[t]||S.cssHooks[o])&&"get"in o?o.get(e,!0,n):r)?et(e,t,i):r)&&t in lt&&(r=lt[t]),(""===n||n)&&(o=parseFloat(r),!0===n||isFinite(o))?o||0:r}}),S.each(["height","width"],function(e,s){S.cssHooks[s]={get:function(e,t,n){if(t)return!st.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,s,n):Re(e,at,function(){return dt(e,s,n)})},set:function(e,t,n){var i=$e(e),r=!v.scrollboxSize()&&"absolute"===i.position,o=(r||n)&&"border-box"===S.css(e,"boxSizing",!1,i),n=n?ut(e,s,n,o,i):0;return o&&r&&(n-=Math.ceil(e["offset"+s[0].toUpperCase()+s.slice(1)]-parseFloat(i[s])-ut(e,s,"border",!1,i)-.5)),n&&(o=me.exec(t))&&"px"!==(o[3]||"px")&&(e.style[s]=t,t=S.css(e,s)),ct(0,t,n)}}}),S.cssHooks.marginLeft=tt(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(et(e,"marginLeft"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(r,o){S.cssHooks[r+o]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+p[t]+o]=i[t]||i[t-2]||i[0];return n}},"margin"!==r&&(S.cssHooks[r+o].set=ct)}),S.fn.extend({css:function(e,t){return d(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=$e(e),r=t.length;s<r;s++)o[t[s]]=S.css(e,t[s],!1,i);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,1<arguments.length)}}),((S.Tween=s).prototype={constructor:s,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var e=s.propHooks[this.prop];return(e&&e.get?e:s.propHooks._default).get(this)},run:function(e){var t,n=s.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:s.propHooks._default).set(this),this}}).init.prototype=s.prototype,(s.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=S.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[ot(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=s.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=s.prototype.init,S.fx.step={};var P,pt,L,ft=/^(?:toggle|show|hide)$/,ht=/queueHooks$/;function gt(){pt&&(!1===T.hidden&&w.requestAnimationFrame?w.requestAnimationFrame(gt):w.setTimeout(gt,S.fx.interval),S.fx.tick())}function vt(){return w.setTimeout(function(){P=void 0}),P=Date.now()}function mt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=p[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function yt(e,t,n){for(var i,r=(_.tweeners[t]||[]).concat(_.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function _(r,e,t){var n,o,i,s,a,l,c,u=0,d=_.prefilters.length,p=S.Deferred().always(function(){delete f.elem}),f=function(){if(!o){for(var e=P||vt(),e=Math.max(0,h.startTime+h.duration-e),t=1-(e/h.duration||0),n=0,i=h.tweens.length;n<i;n++)h.tweens[n].run(t);if(p.notifyWith(r,[h,t,e]),t<1&&i)return e;i||p.notifyWith(r,[h,1,0]),p.resolveWith(r,[h])}return!1},h=p.promise({elem:r,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},t),originalProperties:e,originalOptions:t,startTime:P||vt(),duration:t.duration,tweens:[],createTween:function(e,t){t=S.Tween(r,h.opts,e,t,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(t),t},stop:function(e){var t=0,n=e?h.tweens.length:0;if(!o){for(o=!0;t<n;t++)h.tweens[t].run(1);e?(p.notifyWith(r,[h,1,0]),p.resolveWith(r,[h,e])):p.rejectWith(r,[h,e])}return this}}),g=h.props,v=g,m=h.opts.specialEasing;for(i in v)if(a=m[s=x(i)],l=v[i],Array.isArray(l)&&(a=l[1],l=v[i]=l[0]),i!==s&&(v[s]=l,delete v[i]),(c=S.cssHooks[s])&&"expand"in c)for(i in l=c.expand(l),delete v[s],l)i in v||(v[i]=l[i],m[i]=a);else m[s]=a;for(;u<d;u++)if(n=_.prefilters[u].call(h,r,g,h.opts))return y(n.stop)&&(S._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return S.map(g,yt,h),y(h.opts.start)&&h.opts.start.call(r,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),S.fx.timer(S.extend(f,{elem:r,anim:h,queue:h.opts.queue})),h}S.Animation=S.extend(_,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return xe(n.elem,e,me.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,r=(e=y(e)?(t=e,["*"]):e.match(C)).length;i<r;i++)n=e[i],_.tweeners[n]=_.tweeners[n]||[],_.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,c,u="width"in t||"height"in t,d=this,p={},f=e.style,h=e.nodeType&&ve(e),g=b.get(e,"fxshow");for(i in n.queue||(null==(s=S._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,S.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],ft.test(r)){if(delete t[i],o=o||"toggle"===r,r===(h?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;h=!0}p[i]=g&&g[i]||S.style(e,i)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(i in u&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=b.get(e,"display")),"none"===(u=S.css(e,"display"))&&(c?u=c:(D([e],!0),c=e.style.display||c,u=S.css(e,"display"),D([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===S.css(e,"float")&&(l||(d.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=b.access(e,"fxshow",{display:c}),o&&(g.hidden=!h),h&&D([e],!0),d.done(function(){for(i in h||D([e]),b.remove(e,"fxshow"),p)S.style(e,i,p[i])})),l=yt(h?g[i]:0,i,d),i in g||(g[i]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?_.prefilters.unshift(e):_.prefilters.push(e)}}),S.speed=function(e,t,n){var i=e&&"object"===_typeof(e)?S.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return S.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in S.fx.speeds?i.duration=S.fx.speeds[i.duration]:i.duration=S.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ve).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=_(this,S.extend({},t),s);(o||b.get(this,"finish"))&&e.stop(!0)}var o=S.isEmptyObject(t),s=S.speed(e,n,i);return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(r,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof r&&(o=e,e=r,r=void 0),e&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=S.timers,i=b.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&ht.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||S.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=b.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],r=S.timers,o=n?n.length:0;for(t.finish=!0,S.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===s&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),S.each(["toggle","show","hide"],function(e,i){var r=S.fn[i];S.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(mt(i,!0),e,t,n)}}),S.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){S.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(P=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),P=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){pt||(pt=!0,gt())},S.fx.stop=function(){pt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(i,e){return i=S.fx&&S.fx.speeds[i]||i,this.queue(e=e||"fx",function(e,t){var n=w.setTimeout(e,i);t.stop=function(){w.clearTimeout(n)}})},L=T.createElement("input"),e=T.createElement("select").appendChild(T.createElement("option")),L.type="checkbox",v.checkOn=""!==L.value,v.optSelected=e.selected,(L=T.createElement("input")).value="t",L.type="radio",v.radioValue="t"===L.value;var xt,bt=S.expr.attrHandle,wt=(S.fn.extend({attr:function(e,t){return d(this,S.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(r=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?xt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(r&&"get"in r&&null!==(i=r.get(e,t)))&&null==(i=S.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){var n;if(!v.radioValue&&"radio"===t&&l(e,"input"))return n=e.value,e.setAttribute("type",t),n&&(e.value=n),t}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(C);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),xt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var s=bt[t]||S.find.attr;bt[t]=function(e,t,n){var i,r,o=t.toLowerCase();return n||(r=bt[o],bt[o]=i,i=null!=s(e,t,n)?o:null,bt[o]=r),i}}),/^(?:input|select|textarea|button)$/i),Tt=/^(?:a|area)$/i;function M(e){return(e.match(C)||[]).join(" ")}function q(e){return e.getAttribute&&e.getAttribute("class")||""}function St(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(C)||[]}S.fn.extend({prop:function(e,t){return d(this,S.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,r=S.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):wt.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(S.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(t){var e,n,i,r,o,s;return y(t)?this.each(function(e){S(this).addClass(t.call(this,e,q(this)))}):(e=St(t)).length?this.each(function(){if(i=q(this),n=1===this.nodeType&&" "+M(i)+" "){for(o=0;o<e.length;o++)r=e[o],n.indexOf(" "+r+" ")<0&&(n+=r+" ");s=M(n),i!==s&&this.setAttribute("class",s)}}):this},removeClass:function(t){var e,n,i,r,o,s;return y(t)?this.each(function(e){S(this).removeClass(t.call(this,e,q(this)))}):arguments.length?(e=St(t)).length?this.each(function(){if(i=q(this),n=1===this.nodeType&&" "+M(i)+" "){for(o=0;o<e.length;o++)for(r=e[o];-1<n.indexOf(" "+r+" ");)n=n.replace(" "+r+" "," ");s=M(n),i!==s&&this.setAttribute("class",s)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,i,r,o,s=_typeof(t),a="string"===s||Array.isArray(t);return y(t)?this.each(function(e){S(this).toggleClass(t.call(this,e,q(this),n),n)}):"boolean"==typeof n&&a?n?this.addClass(t):this.removeClass(t):(e=St(t),this.each(function(){if(a)for(o=S(this),r=0;r<e.length;r++)i=e[r],o.hasClass(i)?o.removeClass(i):o.addClass(i);else void 0!==t&&"boolean"!==s||((i=q(this))&&b.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",!i&&!1!==t&&b.get(this,"__className__")||""))}))},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+M(q(t))+" ").indexOf(i))return!0;return!1}});function Ct(e){e.stopPropagation()}var Et=/\r/g,kt=(S.fn.extend({val:function(t){var n,e,i,r=this[0];return arguments.length?(i=y(t),this.each(function(e){1===this.nodeType&&(null==(e=i?t.call(this,e,S(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=S.map(e,function(e){return null==e?"":e+""})),(n=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):r?(n=S.valHooks[r.type]||S.valHooks[r.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(r,"value"))?e:"string"==typeof(e=r.value)?e.replace(Et,""):null==e?"":e:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:M(S.text(e))}},select:{get:function(e){for(var t,n=e.options,i=e.selectedIndex,r="select-one"===e.type,o=r?null:[],s=r?i+1:n.length,a=i<0?s:r?i:0;a<s;a++)if(((t=n[a]).selected||a===i)&&!t.disabled&&(!t.parentNode.disabled||!l(t.parentNode,"optgroup"))){if(t=S(t).val(),r)return t;o.push(t)}return o},set:function(e,t){for(var n,i,r=e.options,o=S.makeArray(t),s=r.length;s--;)((i=r[s]).selected=-1<S.inArray(S.valHooks.option.get(i),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<S.inArray(S(e).val(),t)}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in w,/^(?:focusinfocus|focusoutblur)$/),Dt=(S.extend(S.event,{trigger:function(e,t,n,i){var r,o,s,a,l,c,u,d=[n||T],p=z.call(e,"type")?e.type:e,f=z.call(e,"namespace")?e.namespace.split("."):[],h=u=o=n=n||T;if(3!==n.nodeType&&8!==n.nodeType&&!kt.test(p+S.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),a=p.indexOf(":")<0&&"on"+p,(e=e[S.expando]?e:new S.Event(p,"object"===_typeof(e)&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),c=S.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,t))){if(!i&&!c.noBubble&&!g(n)){for(s=c.delegateType||p,kt.test(s+p)||(h=h.parentNode);h;h=h.parentNode)d.push(h),o=h;o===(n.ownerDocument||T)&&d.push(o.defaultView||o.parentWindow||w)}for(r=0;(h=d[r++])&&!e.isPropagationStopped();)u=h,e.type=1<r?s:c.bindType||p,(l=(b.get(h,"events")||Object.create(null))[e.type]&&b.get(h,"handle"))&&l.apply(h,t),(l=a&&h[a])&&l.apply&&m(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!m(n)||a&&y(n[p])&&!g(n)&&((o=n[a])&&(n[a]=null),S.event.triggered=p,e.isPropagationStopped()&&u.addEventListener(p,Ct),n[p](),e.isPropagationStopped()&&u.removeEventListener(p,Ct),S.event.triggered=void 0,o&&(n[a]=o)),e.result}},simulate:function(e,t,n){n=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(n,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){S.event.simulate(i,e.target,S.event.fix(e))}S.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,i);t||e.addEventListener(n,r,!0),b.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=b.access(e,i)-1;t?b.access(e,i,t):(e.removeEventListener(n,r,!0),b.remove(e,i))}}}),w.location),At={guid:Date.now()},Nt=/\?/,jt=(S.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new w.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t},/\[\]$/),Pt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,_t=/^(?:input|select|textarea|keygen)/i;S.param=function(e,t){function n(e,t){t=y(t)?t():t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var i,r=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,r,o){if(Array.isArray(e))S.each(e,function(e,t){r||jt.test(i)?o(i,t):n(i+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,r,o)});else if(r||"object"!==h(e))o(i,e);else for(var t in e)n(i+"["+t+"]",e[t],r,o)}(i,e[i],t,n);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&_t.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!we.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}}):{name:t.name,value:n.replace(Pt,"\r\n")}}).get()}});var Mt=/%20/g,qt=/#.*$/,Ot=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,$t=/^\/\//,Rt={},Wt={},Ft="*/".concat("*"),zt=T.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(C)||[];if(y(t))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Ut(t,i,r,o){var s={},a=t===Wt;function l(e){var n;return s[e]=!0,S.each(t[e]||[],function(e,t){t=t(i,r,o);return"string"!=typeof t||a||s[t]?a?!(n=t):void 0:(i.dataTypes.unshift(t),l(t),!1)}),n}return l(i.dataTypes[0])||!s["*"]&&l("*")}function Xt(e,t){var n,i,r=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i=i||{})[n]=t[n]);return i&&S.extend(!0,e,i),e}zt.href=Dt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ft,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Xt(Xt(e,S.ajaxSettings),t):Xt(S.ajaxSettings,e)},ajaxPrefilter:Bt(Rt),ajaxTransport:Bt(Wt),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0);var l,c,u,n,d,p,f,i,h=S.ajaxSetup({},t=t||{}),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?S(g):S.event,m=S.Deferred(),y=S.Callbacks("once memory"),x=h.statusCode||{},r={},o={},s="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(p){if(!n)for(n={};t=It.exec(u);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?u:null},setRequestHeader:function(e,t){return null==p&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==p&&(h.mimeType=e),this},statusCode:function(e){if(e)if(p)b.always(e[b.status]);else for(var t in e)x[t]=[x[t],e[t]];return this},abort:function(e){e=e||s;return l&&l.abort(e),a(0,e),this}};if(m.promise(b),h.url=((e||h.url||Dt.href)+"").replace($t,Dt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(C)||[""],null==h.crossDomain){e=T.createElement("a");try{e.href=h.url,e.href=e.href,h.crossDomain=zt.protocol+"//"+zt.host!=e.protocol+"//"+e.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=S.param(h.data,h.traditional)),Ut(Rt,h,t,b),!p){for(i in(f=S.event&&h.global)&&0==S.active++&&S.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ht.test(h.type),c=h.url.replace(qt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Mt,"+")):(e=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=(Nt.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace(Ot,"$1"),e=(Nt.test(c)?"&":"?")+"_="+At.guid+++e),h.url=c+e),h.ifModified&&(S.lastModified[c]&&b.setRequestHeader("If-Modified-Since",S.lastModified[c]),S.etag[c]&&b.setRequestHeader("If-None-Match",S.etag[c])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&b.setRequestHeader("Content-Type",h.contentType),b.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ft+"; q=0.01":""):h.accepts["*"]),h.headers)b.setRequestHeader(i,h.headers[i]);if(h.beforeSend&&(!1===h.beforeSend.call(g,b,h)||p))return b.abort();if(s="abort",y.add(h.complete),b.done(h.success),b.fail(h.error),l=Ut(Wt,h,t,b)){if(b.readyState=1,f&&v.trigger("ajaxSend",[b,h]),p)return b;h.async&&0<h.timeout&&(d=w.setTimeout(function(){b.abort("timeout")},h.timeout));try{p=!1,l.send(r,a)}catch(e){if(p)throw e;a(-1,e)}}else a(-1,"No Transport")}return b;function a(e,t,n,i){var r,o,s,a=t;p||(p=!0,d&&w.clearTimeout(d),l=void 0,u=i||"",b.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s=s||r}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,b,n)),!i&&-1<S.inArray("script",h.dataTypes)&&S.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),s=function(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,s,b,i),i?(h.ifModified&&((n=b.getResponseHeader("Last-Modified"))&&(S.lastModified[c]=n),(n=b.getResponseHeader("etag"))&&(S.etag[c]=n)),204===e||"HEAD"===h.type?a="nocontent":304===e?a="notmodified":(a=s.state,r=s.data,i=!(o=s.error))):(o=a,!e&&a||(a="error",e<0&&(e=0))),b.status=e,b.statusText=(t||a)+"",i?m.resolveWith(g,[r,a,b]):m.rejectWith(g,[b,a,o]),b.statusCode(x),x=void 0,f&&v.trigger(i?"ajaxSuccess":"ajaxError",[b,h,i?r:o]),y.fireWith(g,[b,a]),f&&(v.trigger("ajaxComplete",[b,h]),--S.active||S.event.trigger("ajaxStop")))}},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,r){S[r]=function(e,t,n,i){return y(t)&&(i=i||n,n=t,t=void 0),S.ajax(S.extend({url:e,type:r,dataType:i,data:t,success:n},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){return this[0]&&(y(e)&&(e=e.call(this[0])),e=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(e){S(this).wrapInner(n.call(this,e))}):this.each(function(){var e=S(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=y(t);return this.each(function(e){S(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new w.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Yt=S.ajaxSettings.xhr(),Qt=(v.cors=!!Yt&&"withCredentials"in Yt,v.ajax=Yt=!!Yt,S.ajaxTransport(function(r){var o,s;if(v.cors||Yt&&!r.crossDomain)return{send:function(e,t){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Vt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=o(),s=i.onerror=i.ontimeout=o("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&w.setTimeout(function(){o&&s()})},o=o("abort");try{i.send(r.hasContent&&r.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(n){var i,r;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=S("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(e){i.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),T.head.appendChild(i[0])},abort:function(){r&&r()}}}),[]),Gt=/(=)\?(?=&|$)|\?\?/,Jt=(S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||S.expando+"_"+At.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,o,s=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Gt,"$1"+i):!1!==e.jsonp&&(e.url+=(Nt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||S.error(i+" was not called"),o[0]},e.dataTypes[0]="json",r=w[i],w[i]=function(){o=arguments},n.always(function(){void 0===r?S(w).removeProp(i):w[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(i)),o&&y(r)&&r(o[0]),o=r=void 0}),"script"}),v.createHTMLDocument=((o=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===o.childNodes.length),S.parseHTML=function(e,t,n){var i;return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,t.head.appendChild(i)):t=T),i=!n&&[],(n=J.exec(e))?[t.createElement(n[1])]:(n=ke([e],t,i),i&&i.length&&S(i).remove(),S.merge([],n.childNodes)))},S.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return-1<a&&(i=M(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(r="POST"),0<s.length&&S.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?S("<div>").append(S.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,function(e){return t===e.elem}).length},S.offset={setOffset:function(e,t,n){var i,r,o,s,a=S.css(e,"position"),l=S(e),c={};"static"===a&&(e.style.position="relative"),o=l.offset(),i=S.css(e,"top"),s=S.css(e,"left"),a=("absolute"===a||"fixed"===a)&&-1<(i+s).indexOf("auto")?(r=(a=l.position()).top,a.left):(r=parseFloat(i)||0,parseFloat(s)||0),null!=(t=y(t)?t.call(e,n,S.extend({},o)):t).top&&(c.top=t.top-o.top+r),null!=t.left&&(c.left=t.left-o.left+a),"using"in t?t.using.call(e,c):l.css(c)}},S.fn.extend({offset:function(t){var e,n;return arguments.length?void 0===t?this:this.each(function(e){S.offset.setOffset(this,t,e)}):(n=this[0])?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===S.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),r.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-S.css(i,"marginTop",!0),left:t.left-r.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||E})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var o="pageYOffset"===r;S.fn[t]=function(e){return d(this,function(e,t,n){var i;if(g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[r]:e[t];i?i.scrollTo(o?i.pageXOffset:n,o?n:i.pageYOffset):e[t]=n},t,e,arguments.length)}}),S.each(["top","left"],function(e,n){S.cssHooks[n]=tt(v.pixelPosition,function(e,t){if(t)return t=et(e,n),Ye.test(t)?S(e).position()[n]+"px":t})}),S.each({Height:"height",Width:"width"},function(s,a){S.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,o){S.fn[o]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return d(this,function(e,t,n){var i;return g(e)?0===o.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?S.css(e,t,r):S.style(e,t,n,r)},a,n?e:void 0,n)}})}),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){S.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g),Zt=(S.proxy=function(e,t){var n,i;if("string"==typeof t&&(i=e[t],t=e,e=i),y(e))return n=a.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(a.call(arguments)))}).guid=e.guid=e.guid||S.guid++,i},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=l,S.isFunction=y,S.isWindow=g,S.camelCase=x,S.type=h,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Jt,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return S}),w.jQuery),Kt=w.$;return S.noConflict=function(e){return w.$===S&&(w.$=Kt),e&&w.jQuery===S&&(w.jQuery=Zt),S},void 0===O&&(w.jQuery=w.$=S),S});var myMap,openItem=function(e){var e=e.closest(".team__member"),t=e.find(".team__member-content"),n=t.find(".team__member-content-block").height();e.addClass("active"),t.height(n)},closeEveryItem=function(e){var t=e.find(".team__member-content");e.find(".team__member").removeClass("active"),t.height(0)},FullMenu=($(".team__member-link").click(function(e){var e=$(e.currentTarget),t=e.closest(".team__list");e.closest(".team__member").hasClass("active")?closeEveryItem(t):(closeEveryItem(t),openItem(e))}),function(){function n(e){var t=this;_classCallCheck(this,n),this.menu=document.querySelector(e),document.addEventListener("click",function(e){var e=e.target.closest("[data-menu]");e&&(e=e.dataset.menu,t[e]())})}return _createClass(n,[{key:"open",value:function(){this.menu.classList.add("open"),document.body.style.overflow="hidden"}},{key:"close",value:function(){this.menu.classList.remove("open"),document.body.style.overflow="auto"}}]),n}()),menu=new FullMenu("#full-menu"),findBlockByAlias=function(n){return $(".reviews__item").filter(function(e,t){return $(t).attr("data-linked-with")===n})},init=($(".reviews__switcher-link").click(function(e){e.preventDefault();var e=$(e.currentTarget),t=e.attr("data-open"),t=findBlockByAlias(t),e=e.closest(".reviews__switcher-item");t.addClass("active").siblings().removeClass("active"),e.addClass("active").siblings().removeClass("active")}),!function(B){var U={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0}};B.fn.bxSlider=function(t){var c,u,r,o,n,e,s,a,l,d,p,f,h,g,v,m,y,x,b,w,T,S,C,E,k,I,D,A,N,j,H,$,P,R,L,W,F,z,_,M,q,O;return 0===this.length?this:1<this.length?(this.each(function(){B(this).bxSlider(t)}),this):(c={},u=this,r=B(window).width(),o=B(window).height(),B(u).data("bxSlider")?void 0:(n=function(){B(u).data("bxSlider")||(c.settings=B.extend({},U,t),c.settings.slideWidth=parseInt(c.settings.slideWidth),c.children=u.children(c.settings.slideSelector),c.children.length<c.settings.minSlides&&(c.settings.minSlides=c.children.length),c.children.length<c.settings.maxSlides&&(c.settings.maxSlides=c.children.length),c.settings.randomStart&&(c.settings.startSlide=Math.floor(Math.random()*c.children.length)),c.active={index:c.settings.startSlide},c.carousel=1<c.settings.minSlides||1<c.settings.maxSlides,c.carousel&&(c.settings.preloadImages="all"),c.minThreshold=c.settings.minSlides*c.settings.slideWidth+(c.settings.minSlides-1)*c.settings.slideMargin,c.maxThreshold=c.settings.maxSlides*c.settings.slideWidth+(c.settings.maxSlides-1)*c.settings.slideMargin,c.working=!1,c.controls={},c.interval=null,c.animProp="vertical"===c.settings.mode?"top":"left",c.usingCSS=c.settings.useCSS&&"fade"!==c.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return c.cssPrefix=t[n].replace("Perspective","").toLowerCase(),c.animProp="-"+c.cssPrefix+"-transform",!0;return!1}(),"vertical"===c.settings.mode&&(c.settings.maxSlides=c.settings.minSlides),u.data("origStyle",u.attr("style")),u.children(c.settings.slideSelector).each(function(){B(this).data("origStyle",B(this).attr("style"))}),e())},e=function(){var e=c.children.eq(c.settings.startSlide);u.wrap('<div class="'+c.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),c.viewport=u.parent(),c.settings.ariaLive&&!c.settings.ticker&&c.viewport.attr("aria-live","polite"),c.loader=B('<div class="bx-loading" />'),c.viewport.prepend(c.loader),u.css({width:"horizontal"===c.settings.mode?1e3*c.children.length+215+"%":"auto",position:"relative"}),c.usingCSS&&c.settings.easing?u.css("-"+c.cssPrefix+"-transition-timing-function",c.settings.easing):c.settings.easing||(c.settings.easing="swing"),c.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),c.viewport.parent().css({maxWidth:d()}),c.children.css({float:"horizontal"===c.settings.mode?"left":"none",listStyle:"none",position:"relative"}),c.children.css("width",p()),"horizontal"===c.settings.mode&&0<c.settings.slideMargin&&c.children.css("marginRight",c.settings.slideMargin),"vertical"===c.settings.mode&&0<c.settings.slideMargin&&c.children.css("marginBottom",c.settings.slideMargin),"fade"===c.settings.mode&&(c.children.css({position:"absolute",zIndex:0,display:"none"}),c.children.eq(c.settings.startSlide).css({zIndex:c.settings.slideZIndex,display:"block"})),c.controls.el=B('<div class="bx-controls" />'),c.settings.captions&&T(),c.active.last=c.settings.startSlide===h()-1,c.settings.video&&u.fitVids(),"all"!==c.settings.preloadImages&&!c.settings.ticker||(e=c.children),c.settings.ticker?c.settings.pager=!1:(c.settings.controls&&b(),c.settings.auto&&c.settings.autoControls&&w(),c.settings.pager&&x(),(c.settings.controls||c.settings.autoControls||c.settings.pager)&&c.viewport.after(c.controls.el)),s(e,a)},s=function(e,t){var n=e.find('img:not([src=""]), iframe').length,i=0;0===n?t():e.find('img:not([src=""]), iframe').each(function(){B(this).one("load error",function(){++i===n&&t()}).each(function(){this.complete&&B(this).trigger("load")})})},a=function(){var e,t;c.settings.infiniteLoop&&"fade"!==c.settings.mode&&!c.settings.ticker&&(t="vertical"===c.settings.mode?c.settings.minSlides:c.settings.maxSlides,e=c.children.slice(0,t).clone(!0).addClass("bx-clone"),t=c.children.slice(-t).clone(!0).addClass("bx-clone"),c.settings.ariaHidden&&(e.attr("aria-hidden",!0),t.attr("aria-hidden",!0)),u.append(e).prepend(t)),c.loader.remove(),v(),"vertical"===c.settings.mode&&(c.settings.adaptiveHeight=!0),c.viewport.height(l()),u.redrawSlider(),c.settings.onSliderLoad.call(u,c.active.index),c.initialized=!0,c.settings.responsive&&B(window).bind("resize",q),c.settings.auto&&c.settings.autoStart&&(1<h()||c.settings.autoSlideForOnePage)&&H(),c.settings.ticker&&$(),c.settings.pager&&D(c.settings.startSlide),c.settings.controls&&j(),c.settings.touchEnabled&&!c.settings.ticker&&W(),c.settings.keyboardEnabled&&!c.settings.ticker&&B(document).keydown(L)},l=function(){var t=0,e=B();if("vertical"===c.settings.mode||c.settings.adaptiveHeight)if(c.carousel){var n=1===c.settings.moveSlides?c.active.index:c.active.index*g(),e=c.children.eq(n);for(i=1;i<=c.settings.maxSlides-1;i++)e=n+i>=c.children.length?e.add(c.children.eq(i-1)):e.add(c.children.eq(n+i))}else e=c.children.eq(c.active.index);else e=c.children;return"vertical"===c.settings.mode?(e.each(function(e){t+=B(this).outerHeight()}),0<c.settings.slideMargin&&(t+=c.settings.slideMargin*(c.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return B(this).outerHeight(!1)}).get()),"border-box"===c.viewport.css("box-sizing")?t+=parseFloat(c.viewport.css("padding-top"))+parseFloat(c.viewport.css("padding-bottom"))+parseFloat(c.viewport.css("border-top-width"))+parseFloat(c.viewport.css("border-bottom-width")):"padding-box"===c.viewport.css("box-sizing")&&(t+=parseFloat(c.viewport.css("padding-top"))+parseFloat(c.viewport.css("padding-bottom"))),t},d=function(){var e="100%";return e=0<c.settings.slideWidth?"horizontal"===c.settings.mode?c.settings.maxSlides*c.settings.slideWidth+(c.settings.maxSlides-1)*c.settings.slideMargin:c.settings.slideWidth:e},p=function(){var e=c.settings.slideWidth,t=c.viewport.width();if(0===c.settings.slideWidth||c.settings.slideWidth>t&&!c.carousel||"vertical"===c.settings.mode)e=t;else if(1<c.settings.maxSlides&&"horizontal"===c.settings.mode){if(t>c.maxThreshold)return e;t<c.minThreshold?e=(t-c.settings.slideMargin*(c.settings.minSlides-1))/c.settings.minSlides:c.settings.shrinkItems&&(e=Math.floor((t+c.settings.slideMargin)/Math.ceil((t+c.settings.slideMargin)/(e+c.settings.slideMargin))-c.settings.slideMargin))}return e},f=function(){var e,t=1;return"horizontal"===c.settings.mode&&0<c.settings.slideWidth?t=c.viewport.width()<c.minThreshold?c.settings.minSlides:c.viewport.width()>c.maxThreshold?c.settings.maxSlides:(e=c.children.first().width()+c.settings.slideMargin,Math.floor((c.viewport.width()+c.settings.slideMargin)/e)):"vertical"===c.settings.mode&&(t=c.settings.minSlides),t},h=function(){var e=0,t=0,n=0;if(0<c.settings.moveSlides)if(c.settings.infiniteLoop)e=Math.ceil(c.children.length/g());else for(;t<c.children.length;)++e,t=n+f(),n+=c.settings.moveSlides<=f()?c.settings.moveSlides:f();else e=Math.ceil(c.children.length/f());return e},g=function(){return 0<c.settings.moveSlides&&c.settings.moveSlides<=f()?c.settings.moveSlides:f()},v=function(){var e,t;c.children.length>c.settings.maxSlides&&c.active.last&&!c.settings.infiniteLoop?"horizontal"===c.settings.mode?(e=(t=c.children.last()).position(),m(-(e.left-(c.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===c.settings.mode&&(t=c.children.length-c.settings.minSlides,e=c.children.eq(t).position(),m(-e.top,"reset",0)):(e=c.children.eq(c.active.index*g()).position(),c.active.index===h()-1&&(c.active.last=!0),void 0!==e&&("horizontal"===c.settings.mode?m(-e.left,"reset",0):"vertical"===c.settings.mode&&m(-e.top,"reset",0)))},m=function t(e,n,i,r){var o;c.usingCSS?(o="vertical"===c.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",u.css("-"+c.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(u.css(c.animProp,o),0!==i?u.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){B(e.target).is(u)&&(u.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),A())}):A()):"reset"===n?u.css(c.animProp,o):"ticker"===n&&(u.css("-"+c.cssPrefix+"-transition-timing-function","linear"),u.css(c.animProp,o),0!==i?u.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){B(e.target).is(u)&&(u.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),t(r.resetValue,"reset",0),P())}):(t(r.resetValue,"reset",0),P()))):((o={})[c.animProp]=e,"slide"===n?u.animate(o,i,c.settings.easing,function(){A()}):"reset"===n?u.css(c.animProp,e):"ticker"===n&&u.animate(o,i,"linear",function(){t(r.resetValue,"reset",0),P()}))},y=function(){for(var e="",t="",n=h(),i=0;i<n;i++)t="",c.settings.buildPager&&B.isFunction(c.settings.buildPager)||c.settings.pagerCustom?(t=c.settings.buildPager(i),c.pagerEl.addClass("bx-custom-pager")):(t=i+1,c.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+i+'" class="bx-pager-link">'+t+"</a></div>";c.pagerEl.html(e)},x=function(){c.settings.pagerCustom?c.pagerEl=B(c.settings.pagerCustom):(c.pagerEl=B('<div class="bx-pager" />'),c.settings.pagerSelector?B(c.settings.pagerSelector).html(c.pagerEl):c.controls.el.addClass("bx-has-pager").append(c.pagerEl),y()),c.pagerEl.on("click touchend","a",I)},b=function(){c.controls.next=B('<a class="bx-next" href="">'+c.settings.nextText+"</a>"),c.controls.prev=B('<a class="bx-prev" href="">'+c.settings.prevText+"</a>"),c.controls.next.bind("click touchend",S),c.controls.prev.bind("click touchend",C),c.settings.nextSelector&&B(c.settings.nextSelector).append(c.controls.next),c.settings.prevSelector&&B(c.settings.prevSelector).append(c.controls.prev),c.settings.nextSelector||c.settings.prevSelector||(c.controls.directionEl=B('<div class="bx-controls-direction" />'),c.controls.directionEl.append(c.controls.prev).append(c.controls.next),c.controls.el.addClass("bx-has-controls-direction").append(c.controls.directionEl))},w=function(){c.controls.start=B('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+c.settings.startText+"</a></div>"),c.controls.stop=B('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+c.settings.stopText+"</a></div>"),c.controls.autoEl=B('<div class="bx-controls-auto" />'),c.controls.autoEl.on("click",".bx-start",E),c.controls.autoEl.on("click",".bx-stop",k),c.settings.autoControlsCombine?c.controls.autoEl.append(c.controls.start):c.controls.autoEl.append(c.controls.start).append(c.controls.stop),c.settings.autoControlsSelector?B(c.settings.autoControlsSelector).html(c.controls.autoEl):c.controls.el.addClass("bx-has-controls-auto").append(c.controls.autoEl),N(c.settings.autoStart?"stop":"start")},T=function(){c.children.each(function(e){var t=B(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&B(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},S=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),u.goToNextSlide())},C=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),u.goToPrevSlide())},E=function(e){u.startAuto(),e.preventDefault()},k=function(e){u.stopAuto(),e.preventDefault()},I=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),void 0!==(e=B(e.currentTarget)).attr("data-slide-index")&&(e=parseInt(e.attr("data-slide-index")))!==c.active.index&&u.goToSlide(e))},D=function(n){var e=c.children.length;"short"===c.settings.pagerType?(1<c.settings.maxSlides&&(e=Math.ceil(c.children.length/c.settings.maxSlides)),c.pagerEl.html(n+1+c.settings.pagerShortSeparator+e)):(c.pagerEl.find("a").removeClass("active"),c.pagerEl.each(function(e,t){B(t).find("a").eq(n).addClass("active")}))},A=function(){var e;c.settings.infiniteLoop&&(e="",0===c.active.index?e=c.children.eq(0).position():c.active.index===h()-1&&c.carousel?e=c.children.eq((h()-1)*g()).position():c.active.index===c.children.length-1&&(e=c.children.eq(c.children.length-1).position()),e&&("horizontal"===c.settings.mode?m(-e.left,"reset",0):"vertical"===c.settings.mode&&m(-e.top,"reset",0))),c.working=!1,c.settings.onSlideAfter.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)},N=function(e){c.settings.autoControlsCombine?c.controls.autoEl.html(c.controls[e]):(c.controls.autoEl.find("a").removeClass("active"),c.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},j=function(){1===h()?(c.controls.prev.addClass("disabled"),c.controls.next.addClass("disabled")):!c.settings.infiniteLoop&&c.settings.hideControlOnEnd&&(0===c.active.index?(c.controls.prev.addClass("disabled"),c.controls.next):c.active.index===h()-1?(c.controls.next.addClass("disabled"),c.controls.prev):(c.controls.prev.removeClass("disabled"),c.controls.next)).removeClass("disabled")},H=function(){0<c.settings.autoDelay?setTimeout(u.startAuto,c.settings.autoDelay):(u.startAuto(),B(window).focus(function(){u.startAuto()}).blur(function(){u.stopAuto()})),c.settings.autoHover&&u.hover(function(){c.interval&&(u.stopAuto(!0),c.autoPaused=!0)},function(){c.autoPaused&&(u.startAuto(!0),c.autoPaused=null)})},$=function(){var e,t,n,i,r,o,s,a,l=0;"next"===c.settings.autoDirection?u.append(c.children.clone().addClass("bx-clone")):(u.prepend(c.children.clone().addClass("bx-clone")),e=c.children.first().position(),l="horizontal"===c.settings.mode?-e.left:-e.top),m(l,"reset",0),c.settings.pager=!1,c.settings.controls=!1,c.settings.autoControls=!1,c.settings.tickerHover&&(c.usingCSS?(i="horizontal"===c.settings.mode?4:5,c.viewport.hover(function(){t=u.css("-"+c.cssPrefix+"-transform"),n=parseFloat(t.split(",")[i]),m(n,"reset",0)},function(){a=0,c.children.each(function(e){a+="horizontal"===c.settings.mode?B(this).outerWidth(!0):B(this).outerHeight(!0)}),r=c.settings.speed/a,o="horizontal"===c.settings.mode?"left":"top",s=r*(a-Math.abs(parseInt(n))),P(s)})):c.viewport.hover(function(){u.stop()},function(){a=0,c.children.each(function(e){a+="horizontal"===c.settings.mode?B(this).outerWidth(!0):B(this).outerHeight(!0)}),r=c.settings.speed/a,o="horizontal"===c.settings.mode?"left":"top",s=r*(a-Math.abs(parseInt(u.css(o)))),P(s)})),P()},P=function(e){var e=e||c.settings.speed,t={left:0,top:0},n={left:0,top:0};"next"===c.settings.autoDirection?t=u.find(".bx-clone").first().position():n=c.children.first().position(),t="horizontal"===c.settings.mode?-t.left:-t.top,n="horizontal"===c.settings.mode?-n.left:-n.top,m(t,"ticker",e,{resetValue:n})},R=function(e){var t=B(window),n={top:t.scrollTop(),left:t.scrollLeft()},i=e.offset();return n.right=n.left+t.width(),n.bottom=n.top+t.height(),i.right=i.left+e.outerWidth(),i.bottom=i.top+e.outerHeight(),!(n.right<i.left||n.left>i.right||n.bottom<i.top||n.top>i.bottom)},L=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&R(u))return 39===e.keyCode?(S(e),!1):37===e.keyCode?(C(e),!1):void 0},W=function(){c.touch={start:{x:0,y:0},end:{x:0,y:0}},c.viewport.bind("touchstart MSPointerDown pointerdown",F),c.viewport.on("click",".bxslider a",function(e){c.viewport.hasClass("click-disabled")&&(e.preventDefault(),c.viewport.removeClass("click-disabled"))})},F=function(e){var t;c.controls.el.addClass("disabled"),c.working?(e.preventDefault(),c.controls.el.removeClass("disabled")):(c.touch.originalPos=u.position(),t=void 0!==(e=e.originalEvent).changedTouches?e.changedTouches:[e],c.touch.start.x=t[0].pageX,c.touch.start.y=t[0].pageY,c.viewport.get(0).setPointerCapture&&(c.pointerId=e.pointerId,c.viewport.get(0).setPointerCapture(c.pointerId)),c.viewport.bind("touchmove MSPointerMove pointermove",_),c.viewport.bind("touchend MSPointerUp pointerup",M),c.viewport.bind("MSPointerCancel pointercancel",z))},z=function e(t){m(c.touch.originalPos.left,"reset",0),c.controls.el.removeClass("disabled"),c.viewport.unbind("MSPointerCancel pointercancel",e),c.viewport.unbind("touchmove MSPointerMove pointermove",_),c.viewport.unbind("touchend MSPointerUp pointerup",M),c.viewport.get(0).releasePointerCapture&&c.viewport.get(0).releasePointerCapture(c.pointerId)},_=function(e){var t=e.originalEvent,t=void 0!==t.changedTouches?t.changedTouches:[t],n=Math.abs(t[0].pageX-c.touch.start.x),i=Math.abs(t[0].pageY-c.touch.start.y),r=0,o=0;(i<3*n&&c.settings.preventDefaultSwipeX||n<3*i&&c.settings.preventDefaultSwipeY)&&e.preventDefault(),"fade"!==c.settings.mode&&c.settings.oneToOneTouch&&(r="horizontal"===c.settings.mode?(o=t[0].pageX-c.touch.start.x,c.touch.originalPos.left+o):(o=t[0].pageY-c.touch.start.y,c.touch.originalPos.top+o),m(r,"reset",0))},M=function e(t){c.viewport.unbind("touchmove MSPointerMove pointermove",_),c.controls.el.removeClass("disabled");var t=t.originalEvent,t=void 0!==t.changedTouches?t.changedTouches:[t],n=0,i=0;c.touch.end.x=t[0].pageX,c.touch.end.y=t[0].pageY,"fade"===c.settings.mode?(i=Math.abs(c.touch.start.x-c.touch.end.x))>=c.settings.swipeThreshold&&(c.touch.start.x>c.touch.end.x?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):(n="horizontal"===c.settings.mode?(i=c.touch.end.x-c.touch.start.x,c.touch.originalPos.left):(i=c.touch.end.y-c.touch.start.y,c.touch.originalPos.top),(c.settings.infiniteLoop||!(0===c.active.index&&0<i||c.active.last&&i<0))&&Math.abs(i)>=c.settings.swipeThreshold?(i<0?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):m(n,"reset",200)),c.viewport.unbind("touchend MSPointerUp pointerup",e),c.viewport.get(0).releasePointerCapture&&c.viewport.get(0).releasePointerCapture(c.pointerId)},q=function e(t){var n,i;c.initialized&&(c.working?window.setTimeout(e,10):(n=B(window).width(),i=B(window).height(),r===n&&o===i||(r=n,o=i,u.redrawSlider(),c.settings.onSliderResize.call(u,c.active.index))))},O=function(e){var t=f();c.settings.ariaHidden&&!c.settings.ticker&&(c.children.attr("aria-hidden","true"),c.children.slice(e,e+t).attr("aria-hidden","false"))},u.goToSlide=function(e,t){var n,i=!0,r=0,o={left:0,top:0},s=null;c.oldIndex=c.active.index,c.active.index=(n=e)<0?c.settings.infiniteLoop?h()-1:c.active.index:n>=h()?c.settings.infiniteLoop?0:c.active.index:n,c.working||c.active.index===c.oldIndex||(c.working=!0,void 0===(i=c.settings.onSlideBefore.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index))||i?("next"===t?c.settings.onSlideNext.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)||(i=!1):"prev"!==t||c.settings.onSlidePrev.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)||(i=!1),c.active.last=c.active.index>=h()-1,(c.settings.pager||c.settings.pagerCustom)&&D(c.active.index),c.settings.controls&&j(),"fade"===c.settings.mode?(c.settings.adaptiveHeight&&c.viewport.height()!==l()&&c.viewport.animate({height:l()},c.settings.adaptiveHeightSpeed),c.children.filter(":visible").fadeOut(c.settings.speed).css({zIndex:0}),c.children.eq(c.active.index).css("zIndex",c.settings.slideZIndex+1).fadeIn(c.settings.speed,function(){B(this).css("zIndex",c.settings.slideZIndex),A()})):(c.settings.adaptiveHeight&&c.viewport.height()!==l()&&c.viewport.animate({height:l()},c.settings.adaptiveHeightSpeed),!c.settings.infiniteLoop&&c.carousel&&c.active.last?"horizontal"===c.settings.mode?(o=(s=c.children.eq(c.children.length-1)).position(),r=c.viewport.width()-s.outerWidth()):(n=c.children.length-c.settings.minSlides,o=c.children.eq(n).position()):c.carousel&&c.active.last&&"prev"===t?(i=1===c.settings.moveSlides?c.settings.maxSlides-g():(h()-1)*g()-(c.children.length-c.settings.maxSlides),o=(s=u.children(".bx-clone").eq(i)).position()):"next"===t&&0===c.active.index?(o=u.find("> .bx-clone").eq(c.settings.maxSlides).position(),c.active.last=!1):0<=e&&(n=e*parseInt(g()),o=c.children.eq(n).position()),void 0!==o?(i="horizontal"===c.settings.mode?-(o.left-r):-o.top,m(i,"slide",c.settings.speed)):c.working=!1),c.settings.ariaHidden&&O(c.active.index*g())):(c.active.index=c.oldIndex,c.working=!1))},u.goToNextSlide=function(){var e;!c.settings.infiniteLoop&&c.active.last||(e=parseInt(c.active.index)+1,u.goToSlide(e,"next"))},u.goToPrevSlide=function(){var e;!c.settings.infiniteLoop&&0===c.active.index||(e=parseInt(c.active.index)-1,u.goToSlide(e,"prev"))},u.startAuto=function(e){c.interval||(c.interval=setInterval(function(){"next"===c.settings.autoDirection?u.goToNextSlide():u.goToPrevSlide()},c.settings.pause),c.settings.autoControls&&!0!==e&&N("stop"))},u.stopAuto=function(e){c.interval&&(clearInterval(c.interval),c.interval=null,c.settings.autoControls&&!0!==e&&N("start"))},u.getCurrentSlide=function(){return c.active.index},u.getCurrentSlideElement=function(){return c.children.eq(c.active.index)},u.getSlideElement=function(e){return c.children.eq(e)},u.getSlideCount=function(){return c.children.length},u.isWorking=function(){return c.working},u.redrawSlider=function(){c.children.add(u.find(".bx-clone")).outerWidth(p()),c.viewport.css("height",l()),c.settings.ticker||v(),c.active.last&&(c.active.index=h()-1),c.active.index>=h()&&(c.active.last=!0),c.settings.pager&&!c.settings.pagerCustom&&(y(),D(c.active.index)),c.settings.ariaHidden&&O(c.active.index*g())},u.destroySlider=function(){c.initialized&&(c.initialized=!1,B(".bx-clone",this).remove(),c.children.each(function(){void 0!==B(this).data("origStyle")?B(this).attr("style",B(this).data("origStyle")):B(this).removeAttr("style")}),void 0!==B(this).data("origStyle")?this.attr("style",B(this).data("origStyle")):B(this).removeAttr("style"),B(this).unwrap().unwrap(),c.controls.el&&c.controls.el.remove(),c.controls.next&&c.controls.next.remove(),c.controls.prev&&c.controls.prev.remove(),c.pagerEl&&c.settings.controls&&!c.settings.pagerCustom&&c.pagerEl.remove(),B(".bx-caption",this).remove(),c.controls.autoEl&&c.controls.autoEl.remove(),clearInterval(c.interval),c.settings.responsive&&B(window).unbind("resize",q),c.settings.keyboardEnabled&&B(document).unbind("keydown",L),B(this).removeData("bxSlider"))},u.reloadSlider=function(e){void 0!==e&&(t=e),u.destroySlider(),n(),B(u).data("bxSlider",this)},n(),B(u).data("bxSlider",this),this))}}(jQuery),!function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):e("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function(ae){function i(O,l){function e(e){if(!(!0===D.data(Le+"_intouch")||0<ae(e.target).closest(l.excludedElements,D).length)){var t,n,i,r=e.originalEvent||e;if(!r.pointerType||"mouse"!=r.pointerType||0!=l.fallbackToMouseEvents)return i=(n=r.touches)?n[0]:r,A=Ee,n?N=n.length:!1!==l.preventDefaultEvents&&e.preventDefault(),E=x=y=null,S=1,C=T=w=b=m=0,(e={})[le]=a(le),e[ce]=a(ce),e[ue]=a(ue),e[de]=a(de),k=e,J(),p(0,i),!n||N===l.fingers||l.fingers===Se||u()?(oe=f(),2==N&&(p(1,n[1]),w=T=te(j[0].start,j[1].start)),(l.swipeStatus||l.pinchStatus)&&(t=c(r,A))):t=!1,!1===t?(c(r,A=Ae),t):(l.hold&&(q=setTimeout(ae.proxy(function(){D.trigger("hold",[r.target]),l.hold&&(t=l.hold.call(D,r,r.target))},this),l.longTapThreshold)),s(!0),null)}}function t(e){var t=e.originalEvent||e;if(A!==De&&A!==Ae&&!d()){var n,i=t.touches,r=Z(i?i[0]:t);if(P=f(),i&&(N=i.length),l.hold&&clearTimeout(q),A=ke,2==N&&(0==w?(p(1,i[1]),w=T=te(j[0].start,j[1].start)):(Z(i[1]),T=te(j[0].end,j[1].end),j[0].end,j[1].end,E=S<1?fe:pe),S=(T/w*1).toFixed(2),C=Math.abs(w-T)),N===l.fingers||l.fingers===Se||!i||u()){y=ne(r.start,r.end),x=ne(r.last,r.end);var o,s=e,i=x;if(!1!==l.preventDefaultEvents)if(l.allowPageScroll===he)s.preventDefault();else{var a=l.allowPageScroll===ge;switch(i){case le:(l.swipeLeft&&a||!a&&l.allowPageScroll!=we)&&s.preventDefault();break;case ce:(l.swipeRight&&a||!a&&l.allowPageScroll!=we)&&s.preventDefault();break;case ue:(l.swipeUp&&a||!a&&l.allowPageScroll!=Te)&&s.preventDefault();break;case de:(l.swipeDown&&a||!a&&l.allowPageScroll!=Te)&&s.preventDefault()}}e=r.start,i=r.end,m=Math.round(Math.sqrt(Math.pow(i.x-e.x,2)+Math.pow(i.y-e.y,2))),b=ee(),i=m,(e=y)!=he&&(i=Math.max(i,K(e)),k[e].distance=i),n=c(t,A),l.triggerOnTouchEnd&&!l.triggerOnTouchLeave||(e=!0,l.triggerOnTouchLeave&&(o={left:(o=(i=ae(i=this)).offset()).left,right:o.left+i.outerWidth(),top:o.top,bottom:o.top+i.outerHeight()},i=r.end,r=o,e=i.x>r.left&&i.x<r.right&&i.y>r.top&&i.y<r.bottom),!l.triggerOnTouchEnd&&e?A=$(ke):l.triggerOnTouchLeave&&!e&&(A=$(De)),A!=Ae&&A!=De||c(t,A))}else c(t,A=Ae);!1===n&&c(t,A=Ae)}}function n(e){var t,n=e.originalEvent||e,i=n.touches;if(i){if(i.length&&!d())return t=n,L=f(),se=t.touches.length+1,!0;if(i.length&&d())return!0}return d()&&(N=se),P=f(),b=ee(),W()||!R()?c(n,A=Ae):l.triggerOnTouchEnd||!1===l.triggerOnTouchEnd&&A===ke?(!1!==l.preventDefaultEvents&&e.preventDefault(),c(n,A=De)):!l.triggerOnTouchEnd&&Y()?o(n,A=De,ye):A===ke&&c(n,A=Ae),s(!1),null}function r(){T=w=oe=P=N=0,J(),s(!(S=1))}function I(e){e=e.originalEvent||e;l.triggerOnTouchLeave&&c(e,A=$(De))}function H(){D.unbind(h,e),D.unbind(v,r),D.unbind(ie,t),D.unbind(re,n),g&&D.unbind(g,I),s(!1)}function $(e){var t=e,n=F(),i=R(),r=W();return!n||r?t=Ae:!i||e!=ke||l.triggerOnTouchEnd&&!l.triggerOnTouchLeave?!i&&e==De&&l.triggerOnTouchLeave&&(t=Ae):t=De,t}function c(e,t){var n,i=e.touches;return(B()&&U()||U())&&(n=o(e,t,ve)),(z()&&u()||u())&&!1!==n&&(n=o(e,t,me)),G()&&Q()&&!1!==n?n=o(e,t,xe):b>l.longTapThreshold&&m<Ce&&l.longTap&&!1!==n?n=o(e,t,be):1!==N&&Ne||!(isNaN(m)||m<l.threshold)||!Y()||!1===n||(n=o(e,t,ye)),t===Ae&&r(),t!==De||i&&i.length||r(),n}function o(e,t,n){var i;if(n==ve){if(D.trigger("swipeStatus",[t,y||null,m||0,b||0,N,j,x]),l.swipeStatus&&!1===(i=l.swipeStatus.call(D,e,t,y||null,m||0,b||0,N,j,x)))return!1;if(t==De&&B()){if(clearTimeout(M),clearTimeout(q),D.trigger("swipe",[y,m,b,N,j,x]),l.swipe&&!1===(i=l.swipe.call(D,e,y,m,b,N,j,x)))return!1;switch(y){case le:D.trigger("swipeLeft",[y,m,b,N,j,x]),l.swipeLeft&&(i=l.swipeLeft.call(D,e,y,m,b,N,j,x));break;case ce:D.trigger("swipeRight",[y,m,b,N,j,x]),l.swipeRight&&(i=l.swipeRight.call(D,e,y,m,b,N,j,x));break;case ue:D.trigger("swipeUp",[y,m,b,N,j,x]),l.swipeUp&&(i=l.swipeUp.call(D,e,y,m,b,N,j,x));break;case de:D.trigger("swipeDown",[y,m,b,N,j,x]),l.swipeDown&&(i=l.swipeDown.call(D,e,y,m,b,N,j,x))}}}if(n==me){if(D.trigger("pinchStatus",[t,E||null,C||0,b||0,N,S,j]),l.pinchStatus&&!1===(i=l.pinchStatus.call(D,e,t,E||null,C||0,b||0,N,S,j)))return!1;if(t==De&&z())switch(E){case pe:D.trigger("pinchIn",[E||null,C||0,b||0,N,S,j]),l.pinchIn&&(i=l.pinchIn.call(D,e,E||null,C||0,b||0,N,S,j));break;case fe:D.trigger("pinchOut",[E||null,C||0,b||0,N,S,j]),l.pinchOut&&(i=l.pinchOut.call(D,e,E||null,C||0,b||0,N,S,j))}}return n==ye?t!==Ae&&t!==De||(clearTimeout(M),clearTimeout(q),Q()&&!G()?(_=f(),M=setTimeout(ae.proxy(function(){_=null,D.trigger("tap",[e.target]),l.tap&&(i=l.tap.call(D,e,e.target))},this),l.doubleTapThreshold)):(_=null,D.trigger("tap",[e.target]),l.tap&&(i=l.tap.call(D,e,e.target)))):n==xe?t!==Ae&&t!==De||(clearTimeout(M),clearTimeout(q),_=null,D.trigger("doubletap",[e.target]),l.doubleTap&&(i=l.doubleTap.call(D,e,e.target))):n!=be||t!==Ae&&t!==De||(clearTimeout(M),_=null,D.trigger("longtap",[e.target]),l.longTap&&(i=l.longTap.call(D,e,e.target))),i}function R(){var e=!0;return e=null!==l.threshold?m>=l.threshold:e}function W(){var e=!1;return e=null!==l.cancelThreshold&&null!==y?K(y)-m>=l.cancelThreshold:e}function F(){return!(l.maxTimeThreshold&&b>=l.maxTimeThreshold)}function z(){var e=X(),t=V(),n=null===l.pinchThreshold||C>=l.pinchThreshold;return e&&t&&n}function u(){return l.pinchStatus||l.pinchIn||l.pinchOut}function B(){var e=F(),t=R(),n=X(),i=V();return!W()&&i&&n&&t&&e}function U(){return l.swipe||l.swipeStatus||l.swipeLeft||l.swipeRight||l.swipeUp||l.swipeDown}function X(){return N===l.fingers||l.fingers===Se||!Ne}function V(){return 0!==j[0].end.x}function Y(){return l.tap}function Q(){return!!l.doubleTap}function G(){var e;return null!=_&&(e=f(),Q()&&e-_<=l.doubleTapThreshold)}function J(){se=L=0}function d(){var e=!1;return e=L&&f()-L<=l.fingerReleaseThreshold?!0:e}function s(e){D&&(!0===e?(D.bind(ie,t),D.bind(re,n),g&&D.bind(g,I)):(D.unbind(ie,t,!1),D.unbind(re,n,!1),g&&D.unbind(g,I,!1)),D.data(Le+"_intouch",!0===e))}function p(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,j[e]=n}function Z(e){var t=void 0!==e.identifier?e.identifier:0,n=j[t]||null;return(n=null===n?p(t,e):n).last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function K(e){if(k[e])return k[e].distance}function a(e){return{direction:e,distance:0}}function ee(){return P-oe}function te(e,t){var n=Math.abs(e.x-t.x),e=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+e*e))}function ne(e,t){var n,i;return n=t,(i=e).x==n.x&&i.y==n.y?he:(i=t,t=(n=e).x-i.x,i=i.y-e.y,n=Math.atan2(i,t),i=(i=Math.round(180*n/Math.PI))<0?360-Math.abs(i):i,i<=45&&0<=i||i<=360&&315<=i?le:135<=i&&i<=225?ce:45<i&&i<135?de:ue)}function f(){return(new Date).getTime()}var l=ae.extend({},l),i=Ne||Pe||!l.fallbackToMouseEvents,h=i?Pe?je?"MSPointerDown":"pointerdown":"touchstart":"mousedown",ie=i?Pe?je?"MSPointerMove":"pointermove":"touchmove":"mousemove",re=i?Pe?je?"MSPointerUp":"pointerup":"touchend":"mouseup",g=!i||Pe?"mouseleave":null,v=Pe?je?"MSPointerCancel":"pointercancel":"touchcancel",m=0,y=null,x=null,b=0,w=0,T=0,S=1,C=0,E=0,k=null,D=ae(O),A="start",N=0,j={},oe=0,P=0,L=0,se=0,_=0,M=null,q=null;try{D.bind(h,e),D.bind(v,r)}catch(e){ae.error("events not supported "+h+","+v+" on jQuery.swipe")}this.enable=function(){return this.disable(),D.bind(h,e),D.bind(v,r),D},this.disable=function(){return H(),D},this.destroy=function(){H(),D.data(Le,null),D=null},this.option=function(e,t){if("object"==_typeof(e))l=ae.extend(l,e);else if(void 0!==l[e]){if(void 0===t)return l[e];l[e]=t}else{if(!e)return l;ae.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}var le="left",ce="right",ue="up",de="down",pe="in",fe="out",he="none",ge="auto",ve="swipe",me="pinch",ye="tap",xe="doubletap",be="longtap",we="horizontal",Te="vertical",Se="all",Ce=10,Ee="start",ke="move",De="end",Ae="cancel",Ne="ontouchstart"in window,je=window.navigator.msPointerEnabled&&!window.PointerEvent&&!Ne,Pe=(window.PointerEvent||window.navigator.msPointerEnabled)&&!Ne,Le="TouchSwipe";ae.fn.swipe=function(e){var t=ae(this),n=t.data(Le);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));ae.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"==_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!=_typeof(e)&&e))return function(n){return!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=he),void 0!==n.click&&void 0===n.tap&&(n.tap=n.click),n=n||{},n=ae.extend({},ae.fn.swipe.defaults,n),this.each(function(){var e,t=ae(this);t.data(Le)||(e=new i(this,n),t.data(Le,e))})}.apply(this,arguments);return t},ae.fn.swipe.version="1.6.18",ae.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},ae.fn.swipe.phases={PHASE_START:Ee,PHASE_MOVE:ke,PHASE_END:De,PHASE_CANCEL:Ae},ae.fn.swipe.directions={LEFT:le,RIGHT:ce,UP:ue,DOWN:de,IN:pe,OUT:fe},ae.fn.swipe.pageScroll={NONE:he,HORIZONTAL:we,VERTICAL:Te,AUTO:ge},ae.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:Se}}),function(){myMap=new ymaps.Map("map",{center:[55.751226,37.61652],zoom:14.02,controls:[]});var e=new ymaps.Placemark([55.751203,37.6061],{},{iconLayout:"default#image",iconImageHref:"./img/map-marker.svg",iconImageSize:[58,73],iconImageOffset:[-3,-42]});myMap.geoObjects.add(e)}),mesureWidth=(ymaps.ready(init),function(e){var t=0,n=$(window).width(),i=3*e.closest(".products-menu__item").find(".products-menu__title").width(),e=e.find(".products-menu__container"),r=parseInt(e.css("padding-left")),e=parseInt(e.css("padding-right"));return{container:t=window.matchMedia("(max-width: 768px)").matches?n-i:500,textContainer:t-e-r}}),closeEveryItemInContainer=function(e){var t=e.find(".products-menu__item"),e=e.find(".products-menu__content");t.removeClass("active"),e.width(0)},openAcc=function(e){var t=e.find(".products-menu__content"),n=mesureWidth(e),i=e.find(".products-menu__container");e.addClass("active"),t.width(n.container),i.width(n.textContainer),console.log(n.container)},validateFields=($(".products-menu__title").on("click",function(e){e.preventDefault();var e=$(e.currentTarget),t=e.closest(".products-menu__item"),n=t.hasClass("active");e.closest(".products-menu__item");n?($(".products-menu__item").removeClass("active"),$(".products-menu__content").width(0)):($(".products-menu__item").removeClass("active"),$(".products-menu__content").width(0),openAcc(t))}),function(e,t){return t.forEach(function(e){e.removeClass("input-error"),""===e.val().trim()&&e.addClass("input-error")}),0===e.find(".input-error").length}),sections=($(".form").submit(function(e){e.preventDefault();var e=$(e.currentTarget),t=e.find("[name='name']"),n=e.find("[name='phone']"),i=e.find("[name='comment']"),r=e.find("[name='to']"),o=$("#modal"),s=o.find(".modal__content");o.removeClass("error-modal"),validateFields(e,[t,n,i,r])&&$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:t.val(),phone:n.val(),comment:i.val(),to:r.val()},success:function(e){s.text(e.message),$.fancybox.open({src:"#modal",type:"inline"})},error:function(e){s.text(e.message),o.addClass("error-modal"),$.fancybox.oopen({scr:"#modal",type:"inline"})}})}),$(".modal__button").on("click",function(e){e.preventDefault(),$.fancybox.close()}),$("section")),display=$(".maincontent"),mobileDetect=new MobileDetect(window.navigator.userAgent),isMobile=mobileDetect.mobile(),inScroll=!1,performTransition=(sections.first().addClass("active"),function(e){var t,n,i;!1===inScroll&&(inScroll=!0,t=-100*e,n=sections.eq(e).attr("data-sidemenu-theme"),i=$(".fixed-menu"),"black"===n?i.addClass("fixed-menu--shadowed"):i.removeClass("fixed-menu--shadowed"),display.css({transform:"translateY(".concat(t,"%)")}),sections.eq(e).addClass("active").siblings().removeClass("active"),setTimeout(function(){inScroll=!1,i.find(".fixed-menu__item").eq(e).addClass("fixed-menu__item--active").siblings().removeClass("fixed-menu__item--active")},1300))}),scrollViewport=function(e){var t=sections.filter(".active"),n=t.next(),t=t.prev();"next"===e&&n.length&&performTransition(n.index()),"prev"===e&&t.length&&performTransition(t.index())};$(window).on("wheel",function(e){e=e.originalEvent.deltaY;0<e&&scrollViewport("next"),e<0&&scrollViewport("prev")}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase();if("input"!==t&&"textarea"!==t)switch(e.keyCode){case 38:scrollViewport("prev");break;case 40:scrollViewport("next")}}),$(".wrapper").on("touchmove",function(e){return e.preventDefault()}),$("[data-scroll-to]").click(function(e){e.preventDefault();e=$(e.currentTarget).attr("data-scroll-to"),e=$("[data-section-id=".concat(e,"]"));performTransition(e.index())}),$(window).on("load",function(e){function i(e){var e=Math.round(e),t=n(Math.floor(e/60)),e=n(e-60*t);function n(e){return(e<10?"0":"").concat(e)}return"".concat(t,":").concat(e)}var r,t,o,n,s=$(".player");r=document.getElementById("video"),$(".player__start").on("click",function(e){e.preventDefault(),s.hasClass("paused")?(s.removeClass("paused"),r.pause()):(s.addClass("paused"),r.play()),s.hasClass("active")||s.addClass("active")}),$(".player__playback").on("click",function(e){var t=$(e.currentTarget),e=e.originalEvent.layerX/t.width()*100,t=r.duration/100*e;s.hasClass("active")||s.addClass("active"),s.hasClass("paused")||(s.addClass("paused"),r.play()),$(".player__playback-button").css("left","".concat(e,"%")),r.currentTime=t}),$(".player__video-btn").on("click",function(e){document.getElementById("videobtn").style.display="none",s.hasClass("active")?s.removeClass("active"):s.addClass("active"),s.hasClass("paused")?(s.removeClass("paused"),r.pause()):(s.addClass("paused"),r.play())}),$(".player__sound").on("click",function(e){var t=$(e.currentTarget),e=e.originalEvent.layerX/t.width()*100,t=.01*e;$(".player__sound-button").css("left","".concat(e,"%")),r.volume=t}),$(".player__mute").on("click",function(e){r.muted?(console.log("Ð£Ð±Ð¸ÑÐ°ÐµÐ¼ Ð¼ÑÑ"),$(".player__sound-button").removeClass("muted"),r.muted=!1):(console.log("ÐÑÑ Ð·Ð²ÑÐºÐ°"),$(".player__sound-button").addClass("muted"),r.muted=!0)}),o=r.duration,n=i(o),$(".player__duration-estimate").text(n),void 0!==t&&clearInterval(t),setInterval(function(e){var t=Math.trunc(r.currentTime),n=t/o*100;$(".player__playback-button").css("left","".concat(n,"%")),$(".player__duration-completed").text(i(t))},1e3)}),$(".proslider").bxSlider({pager:!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
